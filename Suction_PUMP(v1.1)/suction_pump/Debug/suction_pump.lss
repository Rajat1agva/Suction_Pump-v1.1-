
suction_pump.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00006134  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bc  0080022e  0080022e  000062f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000062f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a28  00000000  00000000  00006394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a501  00000000  00000000  00006dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036ed  00000000  00000000  000212bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cd5  00000000  00000000  000249aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026ac  00000000  00000000  0002a680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004851  00000000  00000000  0002cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ed27  00000000  00000000  0003157d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  000402a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__dtors_end>
       4:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
       8:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
       c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      10:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      14:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      18:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      1c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      20:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      24:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      28:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      2c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      30:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      34:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      38:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      3c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      40:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__vector_16>
      44:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      48:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_18>
      4c:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__vector_19>
      50:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      54:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      58:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      5c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      60:	0c 94 1d 27 	jmp	0x4e3a	; 0x4e3a <__vector_24>
      64:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__bad_interrupt>
      68:	26 16       	cp	r2, r22
      6a:	35 16       	cp	r3, r21
      6c:	39 16       	cp	r3, r25
      6e:	3d 16       	cp	r3, r29
      70:	41 16       	cp	r4, r17
      72:	45 16       	cp	r4, r21
      74:	49 16       	cp	r4, r25
      76:	4d 16       	cp	r4, r29
      78:	51 16       	cp	r5, r17
      7a:	55 16       	cp	r5, r21
      7c:	59 16       	cp	r5, r25
      7e:	5d 16       	cp	r5, r29
      80:	61 16       	cp	r6, r17
      82:	65 16       	cp	r6, r21
      84:	69 16       	cp	r6, r25
      86:	6d 16       	cp	r6, r29
      88:	71 16       	cp	r7, r17
      8a:	75 16       	cp	r7, r21
      8c:	79 16       	cp	r7, r25
      8e:	7d 16       	cp	r7, r29
      90:	81 16       	cp	r8, r17
      92:	85 16       	cp	r8, r21

00000094 <__trampolines_end>:
      94:	00 40       	sbci	r16, 0x00	; 0
      96:	7a 10       	cpse	r7, r10
      98:	f3 5a       	subi	r31, 0xA3	; 163
      9a:	00 a0       	ldd	r0, Z+32	; 0x20
      9c:	72 4e       	sbci	r23, 0xE2	; 226
      9e:	18 09       	sbc	r17, r8
      a0:	00 10       	cpse	r0, r0
      a2:	a5 d4       	rcall	.+2378   	; 0x9ee <__stack+0xef>
      a4:	e8 00       	.word	0x00e8	; ????
      a6:	00 e8       	ldi	r16, 0x80	; 128
      a8:	76 48       	sbci	r23, 0x86	; 134
      aa:	17 00       	.word	0x0017	; ????
      ac:	00 e4       	ldi	r16, 0x40	; 64
      ae:	0b 54       	subi	r16, 0x4B	; 75
      b0:	02 00       	.word	0x0002	; ????
      b2:	00 ca       	rjmp	.-3072   	; 0xfffff4b4 <__eeprom_end+0xff7ef4b4>
      b4:	9a 3b       	cpi	r25, 0xBA	; 186
      b6:	00 00       	nop
      b8:	00 e1       	ldi	r16, 0x10	; 16
      ba:	f5 05       	cpc	r31, r5
      bc:	00 00       	nop
      be:	80 96       	adiw	r24, 0x20	; 32
      c0:	98 00       	.word	0x0098	; ????
      c2:	00 00       	nop
      c4:	40 42       	sbci	r20, 0x20	; 32
      c6:	0f 00       	.word	0x000f	; ????
      c8:	00 00       	nop
      ca:	a0 86       	std	Z+8, r10	; 0x08
      cc:	01 00       	.word	0x0001	; ????
      ce:	00 00       	nop
      d0:	10 27       	eor	r17, r16
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	e8 03       	fmulsu	r22, r16
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	64 00       	.word	0x0064	; ????
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	0a 00       	.word	0x000a	; ????
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	01 00       	.word	0x0001	; ????
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	2c 76       	andi	r18, 0x6C	; 108
      f0:	d8 88       	ldd	r13, Y+16	; 0x10
      f2:	dc 67       	ori	r29, 0x7C	; 124
      f4:	4f 08       	sbc	r4, r15
      f6:	23 df       	rcall	.-442    	; 0xffffff3e <__eeprom_end+0xff7eff3e>
      f8:	c1 df       	rcall	.-126    	; 0x7c <__SREG__+0x3d>
      fa:	ae 59       	subi	r26, 0x9E	; 158
      fc:	e1 b1       	in	r30, 0x01	; 1
      fe:	b7 96       	adiw	r30, 0x27	; 39
     100:	e5 e3       	ldi	r30, 0x35	; 53
     102:	e4 53       	subi	r30, 0x34	; 52
     104:	c6 3a       	cpi	r28, 0xA6	; 166
     106:	e6 51       	subi	r30, 0x16	; 22
     108:	99 76       	andi	r25, 0x69	; 105
     10a:	96 e8       	ldi	r25, 0x86	; 134
     10c:	e6 c2       	rjmp	.+1484   	; 0x6da <_ZL21FreeSerif9pt7bBitmaps+0x25c>
     10e:	84 26       	eor	r8, r20
     110:	eb 89       	ldd	r30, Y+19	; 0x13
     112:	8c 9b       	sbis	0x11, 4	; 17
     114:	62 ed       	ldi	r22, 0xD2	; 210
     116:	40 7c       	andi	r20, 0xC0	; 192
     118:	6f fc       	.word	0xfc6f	; ????
     11a:	ef bc       	out	0x2f, r14	; 47
     11c:	9c 9f       	mul	r25, r28
     11e:	40 f2       	brcs	.-112    	; 0xb0 <__trampolines_end+0x1c>
     120:	ba a5       	ldd	r27, Y+42	; 0x2a
     122:	6f a5       	ldd	r22, Y+47	; 0x2f
     124:	f4 90       	lpm	r15, Z
     126:	05 5a       	subi	r16, 0xA5	; 165
     128:	2a f7       	brpl	.-54     	; 0xf4 <__trampolines_end+0x60>
     12a:	5c 93       	st	X, r21
     12c:	6b 6c       	ori	r22, 0xCB	; 203
     12e:	f9 67       	ori	r31, 0x79	; 121
     130:	6d c1       	rjmp	.+730    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     132:	1b fc       	.word	0xfc1b	; ????
     134:	e0 e4       	ldi	r30, 0x40	; 64
     136:	0d 47       	sbci	r16, 0x7D	; 125
     138:	fe f5       	brtc	.+126    	; 0x1b8 <_ZL5batt3+0x2a>
     13a:	20 e6       	ldi	r18, 0x60	; 96
     13c:	b5 00       	.word	0x00b5	; ????
     13e:	d0 ed       	ldi	r29, 0xD0	; 208
     140:	90 2e       	mov	r9, r16
     142:	03 00       	.word	0x0003	; ????
     144:	94 35       	cpi	r25, 0x54	; 84
     146:	77 05       	cpc	r23, r7
     148:	00 80       	ld	r0, Z
     14a:	84 1e       	adc	r8, r20
     14c:	08 00       	.word	0x0008	; ????
     14e:	00 20       	and	r0, r0
     150:	4e 0a       	sbc	r4, r30
     152:	00 00       	nop
     154:	00 c8       	rjmp	.-4096   	; 0xfffff156 <__eeprom_end+0xff7ef156>
     156:	0c 33       	cpi	r16, 0x3C	; 60
     158:	33 33       	cpi	r19, 0x33	; 51
     15a:	33 0f       	add	r19, r19
     15c:	98 6e       	ori	r25, 0xE8	; 232
     15e:	12 83       	std	Z+2, r17	; 0x02
     160:	11 41       	sbci	r17, 0x11	; 17
     162:	ef 8d       	ldd	r30, Y+31	; 0x1f
     164:	21 14       	cp	r2, r1
     166:	89 3b       	cpi	r24, 0xB9	; 185
     168:	e6 55       	subi	r30, 0x56	; 86
     16a:	16 cf       	rjmp	.-468    	; 0xffffff98 <__eeprom_end+0xff7eff98>
     16c:	fe e6       	ldi	r31, 0x6E	; 110
     16e:	db 18       	sub	r13, r11
     170:	d1 84       	ldd	r13, Z+9	; 0x09
     172:	4b 38       	cpi	r20, 0x8B	; 139
     174:	1b f7       	brvc	.-58     	; 0x13c <__trampolines_end+0xa8>
     176:	7c 1d       	adc	r23, r12
     178:	90 1d       	adc	r25, r0
     17a:	a4 bb       	out	0x14, r26	; 20
     17c:	e4 24       	eor	r14, r4
     17e:	20 32       	cpi	r18, 0x20	; 32
     180:	84 72       	andi	r24, 0x24	; 36
     182:	5e 22       	and	r5, r30
     184:	81 00       	.word	0x0081	; ????
     186:	c9 f1       	breq	.+114    	; 0x1fa <_ZL20FreeSerif9pt7bGlyphs+0x15>
     188:	24 ec       	ldi	r18, 0xC4	; 196
     18a:	a1 e5       	ldi	r26, 0x51	; 81
     18c:	3d 27       	eor	r19, r29

0000018e <_ZL5batt3>:
	...
     19a:	3f ff ff 00 3f ff 81 00 3f ff 81 00 3f ff 81 f8     ?...?...?...?...
     1aa:	3f ff 80 08 3f ff 80 08 3f ff 80 08 3f ff 80 08     ?...?...?...?...
     1ba:	3f ff 80 08 3f ff 80 08 3f ff 81 f8 3f ff 81 00     ?...?...?...?...
     1ca:	3f ff 81 00 3f ff ff 00 00 00 00 00 00 00 00 00     ?...?...........
     1da:	00 00 00 00                                         ....

000001de <_ZL14FreeSerif9pt7b>:
     1de:	7e 04 e5 01 20 7e 16                                ~... ~.

000001e5 <_ZL20FreeSerif9pt7bGlyphs>:
     1e5:	00 00 00 00 05 00 01 00 00 02 0c 06 02 f5 03 00     ................
     1f5:	05 04 07 01 f5 06 00 09 0c 09 00 f5 14 00 08 0e     ................
     205:	09 01 f4 22 00 0d 0c 0f 01 f5 36 00 0d 0d 0e 01     ..."......6.....
     215:	f4 4c 00 02 04 04 01 f5 4d 00 05 0f 06 01 f5 57     .L......M......W
     225:	00 05 0f 06 00 f5 61 00 06 08 09 03 f5 67 00 09     ......a......g..
     235:	09 0a 00 f8 72 00 02 03 04 02 00 73 00 04 01 06     ....r......s....
     245:	01 fd 74 00 02 02 05 01 ff 75 00 05 0c 05 00 f5     ..t......u......
     255:	7d 00 09 0d 09 00 f4 8c 00 05 0d 09 02 f4 95 00     }...............
     265:	08 0c 09 01 f5 a1 00 08 0c 09 00 f5 ad 00 07 0c     ................
     275:	09 01 f5 b8 00 08 0c 09 00 f5 c4 00 08 0d 09 01     ................
     285:	f4 d1 00 08 0c 09 00 f5 dd 00 07 0d 09 01 f4 e9     ................
     295:	00 08 0e 09 01 f4 f7 00 02 08 05 01 f9 f9 00 03     ................
     2a5:	0a 05 01 f9 fd 00 09 09 0a 01 f8 08 01 09 05 0a     ................
     2b5:	01 fa 0e 01 0a 09 0a 00 f8 1a 01 07 0d 08 01 f4     ................
     2c5:	26 01 0c 0d 10 02 f4 3a 01 0d 0c 0d 00 f5 4e 01     &......:......N.
     2d5:	0b 0c 0b 00 f5 5f 01 0b 0c 0c 01 f5 70 01 0c 0c     ....._......p...
     2e5:	0d 00 f5 82 01 0a 0c 0b 01 f5 91 01 09 0c 0a 01     ................
     2f5:	f5 9f 01 0c 0c 0d 01 f5 b1 01 0b 0c 0d 01 f5 c2     ................
     305:	01 04 0c 06 01 f5 c8 01 06 0c 07 00 f5 d1 01 0c     ................
     315:	0c 0d 01 f5 e3 01 0a 0c 0b 01 f5 f2 01 0f 0c 10     ................
     325:	00 f5 09 02 0b 0c 0d 01 f5 1a 02 0b 0d 0d 01 f4     ................
     335:	2c 02 09 0c 0a 01 f5 3a 02 0b 10 0d 01 f4 50 02     ,......:......P.
     345:	0b 0c 0c 01 f5 61 02 09 0c 0a 00 f5 6f 02 0b 0c     .....a......o...
     355:	0b 00 f5 80 02 0b 0c 0d 01 f5 91 02 0c 0c 0d 00     ................
     365:	f5 a3 02 11 0c 11 00 f5 bd 02 0d 0c 0d 00 f5 d1     ................
     375:	02 0c 0c 0d 00 f5 e3 02 0b 0c 0b 00 f5 f4 02 03     ................
     385:	0f 06 02 f5 fa 02 05 0c 05 00 f5 02 03 03 0f 06     ................
     395:	01 f5 08 03 08 07 08 00 f5 0f 03 09 01 09 00 02     ................
     3a5:	11 03 04 03 05 00 f5 13 03 07 08 08 01 f9 1a 03     ................
     3b5:	09 0d 09 00 f4 29 03 07 08 08 00 f9 30 03 09 0d     .....)......0...
     3c5:	09 00 f4 3f 03 08 08 08 00 f9 47 03 07 0d 07 01     ...?......G.....
     3d5:	f4 53 03 0a 0c 08 00 f9 62 03 09 0d 09 00 f4 71     .S......b......q
     3e5:	03 04 0b 05 01 f6 77 03 05 0f 06 00 f6 81 03 09     ......w.........
     3f5:	0d 09 01 f4 90 03 04 0d 05 01 f4 97 03 0e 08 0e     ................
     405:	00 f9 a5 03 09 08 09 00 f9 ae 03 09 08 09 00 f9     ................
     415:	b7 03 09 0c 09 00 f9 c5 03 09 0c 09 00 f9 d3 03     ................
     425:	06 08 06 00 f9 d9 03 06 08 07 01 f9 df 03 05 09     ................
     435:	05 00 f8 e5 03 09 08 09 00 f9 ee 03 08 08 08 00     ................
     445:	f9 f6 03 0c 08 0c 00 f9 02 04 09 08 09 00 f9 0b     ................
     455:	04 08 0c 08 00 f9 17 04 07 08 07 01 f9 1e 04 05     ................
     465:	10 09 01 f4 28 04 01 0c 04 01 f5 2a 04 05 10 09     ....(......*....
     475:	03 f5 34 04 09 03 09 00 fb                          ..4......

0000047e <_ZL21FreeSerif9pt7bBitmaps>:
     47e:	ff ea 03 de f7 20 11 09 04 82 4f f9 10 89 ff 24     ..... ....O....$
     48e:	12 09 0c 80 10 7c d6 d2 d0 f0 38 1e 17 93 93 d6     .....|....8.....
     49e:	7c 10 38 43 3c 39 21 8a 0c 50 65 39 cb 20 b9 05     |.8C<9!..Pe9. ..
     4ae:	88 4c 44 64 21 c0 0e 00 c8 06 40 32 01 a0 07 78     .LDd!.....@2...x
     4be:	31 87 88 46 86 34 30 c1 c7 17 cf 00 fe 08 88 84     1..F.40.........
     4ce:	63 18 c6 10 82 08 20 82 08 21 0c 63 18 c4 22 22     c..... ..!.c..""
     4de:	00 63 9a dc 72 b6 08 08 04 02 01 0f f8 40 20 10     .c..r........@ .
     4ee:	08 00 d8 f0 f0 08 84 22 10 8c 42 31 00 1c 31 98     ......."..B1..1.
     4fe:	d8 3c 1e 0f 07 83 c1 e0 d8 c4 61 c0 13 8c 63 18     .<........a...c.
     50e:	c6 31 8c 67 80 3c 4e 86 06 06 04 0c 08 10 20 41     .1.g.<N....... A
     51e:	fe 3c c6 06 04 1c 3e 07 03 03 03 06 f8 04 18 71     .<....>........q
     52e:	64 c9 a3 46 fe 18 30 60 0f 10 20 3c 0e 07 03 03     d..F..0`.. <....
     53e:	03 02 04 f8 07 1c 30 60 60 dc e6 c3 c3 c3 43 66     ......0``.....Cf
     54e:	3c 7f 82 02 02 04 04 04 08 08 08 10 10 3c 8f 1e     <............<..
     55e:	3e 4f 06 36 c7 8f 1b 33 c0 3c 66 c2 c3 c3 c3 c3     >O.6...3.<f.....
     56e:	63 3f 06 06 0c 38 60 f0 0f d8 00 03 28 01 87 0e     c?...8`.....(...
     57e:	1c 0c 03 80 70 0e 00 80 ff 80 00 00 0f f8 80 1c     ....p...........
     58e:	01 c0 1c 01 c0 e0 e0 e0 c0 00 79 1a 18 30 60 83     ..........y..0`.
     59e:	04 10 20 40 03 00 0f 83 8c 60 26 02 c7 9c c9 d8     .. @.....`&.....
     5ae:	9d 99 d9 26 ec 60 03 04 0f 80 02 00 10 01 c0 16     ...&.`..........
     5be:	00 98 04 c0 43 03 f8 20 61 03 18 1d e1 f0 ff 86     ....C.. a.......
     5ce:	1c c1 98 33 0c 7e 0c 31 83 30 66 0c c3 7f c0 1f     ...3.~.1.0f.....
     5de:	26 1d 81 e0 1c 01 80 30 06 00 c0 0c 00 c1 8f c0     &......0........
     5ee:	ff 03 1c 30 63 07 30 33 03 30 33 03 30 33 06 30     ...0c.03.03.03.0
     5fe:	cf f0 ff 98 26 01 80 61 1f c6 11 80 60 18 16 0f     ....&..a....`...
     60e:	fe ff b0 58 0c 06 13 f9 84 c0 60 30 18 1e 00 1f     ...X......`0....
     61e:	23 0e 60 26 00 c0 0c 0f c0 6c 06 c0 66 06 30 60     #.`&.....l..f.0`
     62e:	f8 f1 ec 19 83 30 66 0c ff 98 33 06 60 cc 19 83     .....0f...3.`...
     63e:	78 f0 f6 66 66 66 66 6f 3c 61 86 18 61 86 18 6d     x..ffffo<a..a..m
     64e:	bc f3 e6 08 61 06 20 64 07 80 6c 06 60 63 06 18     ....a. d..l.`c..
     65e:	60 cf 3f f0 18 06 01 80 60 18 06 01 80 60 18 16     `.?.....`....`..
     66e:	0b fe f0 0e 70 38 e0 71 e1 62 c2 c5 c9 89 93 13     ....p8.q.b......
     67e:	26 23 8c 47 18 84 33 88 f0 e0 ee 09 c1 2c 25 c4     &#.G..3......,%.
     68e:	9c 91 92 1a 41 c8 19 03 70 20 1f 06 31 83 20 2c     ....A...p ..1. ,
     69e:	07 80 f0 1e 03 c0 68 09 83 18 c1 f0 fe 31 98 6c     ......h......1.l
     6ae:	36 1b 19 f8 c0 60 30 18 1e 00 1f 06 31 83 20 2c     6....`0.....1. ,
     6be:	07 80 f0 1e 03 c0 68 19 83 18 c0 e0 0e 00 e0 07     ......h.........
     6ce:	fe 0c 61 86 30 c6 18 c6 1f 83 70 67 0c 71 87 78     ..a.0.....pg.q.x
     6de:	70 1d 31 98 4c 07 80 e0 1c 07 01 a0 d8 cb c0 ff     p.1.L...........
     6ee:	f8 ce 18 83 00 60 0c 01 80 30 06 00 c0 18 07 80     .....`...0......
     6fe:	f0 ec 09 81 30 26 04 c0 98 13 02 60 4c 08 c2 0f     ....0&.....`L...
     70e:	80 f8 77 02 30 23 04 18 41 84 0c 80 c8 07 00 70     ..w.0#..A......p
     71e:	02 00 20 fb e7 b0 c0 8c 20 86 18 41 8c 40 cb 20     .. ..... ..A.@. 
     72e:	65 90 1a 70 0e 38 03 1c 01 04 00 82 00 fc f9 83     e..p.8..........
     73e:	06 10 19 00 d0 03 00 1c 01 30 11 c1 86 08 19 e3     .........0......
     74e:	f0 f8 f6 06 30 41 88 1d 00 d0 06 00 60 06 00 60     ....0A......`..`
     75e:	06 00 f0 3f cc 11 06 01 80 70 0c 03 00 e0 38 06     ...?.....p....8.
     76e:	05 c1 7f e0 fb 6d b6 db 6d b8 82 10 82 10 86 10     .....m..m.......
     77e:	86 10 ed b6 db 6d b6 f8 18 1c 34 26 62 42 c1 ff     .....m....4&bB..
     78e:	80 84 20 79 98 30 e6 d9 b3 3f 20 70 18 0c 06 03     .. y.0...? p....
     79e:	71 cc c3 61 b0 d8 6c 63 e0 3c cf 06 0c 18 18 9e     q..a..lc.<......
     7ae:	01 03 80 c0 60 31 d9 9d 86 c3 61 b0 cc 63 f0 3c     ....`1....a..c.<
     7be:	46 fe c0 c0 e1 62 3c 1e 41 83 06 1e 18 30 60 c1     F....b<.A....0`.
     7ce:	83 0f 00 3c 19 f6 31 8c 1e 08 04 01 fc 40 b0 2e     ...<..1......@..
     7de:	11 f8 20 70 18 0c 06 03 71 cc c6 63 31 98 cc 6f     .. p....q..c1..o
     7ee:	78 60 02 e6 66 66 f0 18 00 33 8c 63 18 c6 31 8b     x`..ff...3.c..1.
     7fe:	80 20 70 18 0c 06 03 3d 88 d8 78 36 19 8c 6f 78     . p....=..x6..ox
     80e:	2e 66 66 66 66 66 f0 ee 71 ce 66 31 98 c6 63 19     .fffff..q.f1..c.
     81e:	8c 66 31 bd ef ee 39 98 cc 66 33 19 8d ef 3e 31     .f1...9..f3...>1
     82e:	b0 78 3c 1e 0d 8c 7c ee 39 98 6c 36 1b 0d 8c fc     .x<...|.9.l6....
     83e:	60 30 18 1e 00 3d 31 b0 d8 6c 36 1b 8c fe 03 01     `0...=1..l6.....
     84e:	80 c0 f0 6d c6 18 61 86 3c 76 38 58 3e 38 fe 27     ...m..a.<v8X>8.'
     85e:	98 c6 31 8c 38 e7 31 98 cc 66 33 19 8c 7f f3 61     ..1.8.1..f3....a
     86e:	22 32 14 1c 08 08 ef 36 61 62 22 32 35 41 9c 18     "2.....6ab"25A..
     87e:	81 08 f7 12 0e 03 01 c1 21 09 cf f3 61 62 32 34     ........!...ab24
     88e:	14 1c 08 08 08 10 e0 fd 18 60 83 0c 70 fe 19 8c     .........`..p...
     89e:	63 18 c4 61 8c 63 18 c3 ff f0 c3 18 c6 31 84 33     c..a.c.......1.3
     8ae:	18 c6 31 98 70 24 c1 c0                             ..1.p$..

000008b6 <Terminal12x16>:
     8b6:	0c 10 20 60 07 00 00 00 00 00 00 00 00 00 00 00     .. `............
	...
     8d2:	00 08 00 00 00 00 00 00 7c 00 ff 33 ff 33 ff 33     ........|..3.3.3
     8e2:	7c 00 00 00 00 00 00 00 00 00 09 00 00 00 00 3c     |..............<
     8f2:	00 3c 00 3c 00 00 00 3c 00 3c 00 3c 00 00 00 00     .<.<...<.<.<....
     902:	00 00 00 0c 00 02 10 1e 90 1f f0 1f fe 03 7e 1e     ..............~.
     912:	9e 1f f0 1f fe 03 7e 02 1e 00 10 00 0a 00 00 78     ......~........x
     922:	04 fc 0c fc 0c ff 3f ff 3f ff 3f cc 0f cc 0f 88     ......?.?.?.....
     932:	07 00 00 00 00 0c 00 30 38 38 38 3c 38 1e 38 0f     .......0888<8.8.
     942:	80 07 c0 03 e0 39 f0 38 78 38 3c 38 1c 00 0b 00     .....9.8x8<8....
     952:	00 00 1f b8 3f fc 3f fe 31 e6 37 fe 3f 3e 1e 1c     ....?.?.1.7.?>..
     962:	3e 00 36 00 22 00 00 07 00 00 00 00 00 00 27 00     >.6.".........'.
     972:	3f 00 3f 00 1f 00 00 00 00 00 00 00 00 00 00 00     ?.?.............
     982:	09 00 00 00 00 f0 03 fc 0f fe 1f ff 3f 07 38 01     ............?.8.
     992:	20 01 20 00 00 00 00 00 00 09 00 00 00 00 01 20      . ............ 
     9a2:	01 20 07 38 ff 3f fe 1f fc 0f f0 03 00 00 00 00     . .8.?..........
     9b2:	00 00 0a 00 00 98 0c b8 0e f8 0f f8 0f f8 0f f8     ................
     9c2:	0f f8 0f b8 0e 98 0c 00 00 00 00 0a 00 00 80 01     ................
     9d2:	80 01 80 01 f0 0f f0 0f f0 0f 80 01 80 01 80 01     ................
     9e2:	00 00 00 00 07 00 00 00 00 00 00 00 b8 00 f8 00     ................
     9f2:	f8 00 78 00 00 00 00 00 00 00 00 00 00 0a 00 00     ..x.............
     a02:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
     a12:	80 01 00 00 00 00 07 00 00 00 00 00 00 00 38 00     ..............8.
     a22:	38 00 38 00 38 00 00 00 00 00 00 00 00 00 00 0c     8.8.8...........
     a32:	00 18 00 1c 00 1e 00 0f 80 07 c0 03 e0 01 f0 00     ................
     a42:	78 00 3c 00 1e 00 0e 00 0c f8 07 fe 1f fe 1f 07     x.<.............
     a52:	3f 83 33 c3 31 e3 30 73 30 3f 38 fe 1f fe 1f f8     ?.3.1.0s0?8.....
     a62:	07 0b 00 00 00 00 0c 30 0c 30 0e 30 ff 3f ff 3f     .......0.0.0.?.?
     a72:	ff 3f 00 30 00 30 00 30 00 00 0c 1c 30 1e 38 1f     .?.0.0.0....0.8.
     a82:	3c 07 3e 03 3f 83 37 c3 33 e3 31 f7 30 7f 30 3e     <.>.?.7.3.1.0.0>
     a92:	30 1c 30 0c 0c 0c 0e 1c 0f 3c c7 38 c3 30 c3 30     0.0......<.8.0.0
     aa2:	c3 30 c3 30 e7 39 ff 3f 7e 1f 3c 0e 0c c0 03 e0     .0.0.9.?~.<.....
     ab2:	03 f0 03 78 03 3c 03 1e 03 0f 03 ff 3f ff 3f ff     ...x.<......?.?.
     ac2:	3f 00 03 00 03 0c 3f 0c 7f 1c 7f 3c 63 38 63 30     ?.....?....<c8c0
     ad2:	63 30 63 30 63 30 e3 38 e3 3f c3 1f 83 0f 0c c0     c0c0c0.8.?......
     ae2:	0f f0 1f f8 3f fc 39 de 30 cf 30 c7 30 c3 30 c3     ....?.9.0.0.0.0.
     af2:	39 c3 3f 80 1f 00 0f 0c 03 00 03 00 03 00 03 30     9.?............0
     b02:	03 3c 03 3f c3 0f f3 03 ff 00 3f 00 0f 00 03 00     .<.?......?.....
     b12:	0c 00 0f bc 1f fe 3f ff 39 e7 30 c3 30 c3 30 e7     ......?.9.0.0.0.
     b22:	30 ff 39 fe 3f bc 1f 00 0f 0c 3c 00 7e 00 ff 30     0.9.?.....<.~..0
     b32:	e7 30 c3 30 c3 38 c3 3c c3 1e e7 0f ff 07 fe 03     .0.0.8.<........
     b42:	fc 00 07 00 00 00 00 00 00 70 1c 70 1c 70 1c 70     .........p.p.p.p
     b52:	1c 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00     ................
     b62:	00 00 70 9c 70 fc 70 fc 70 7c 00 00 00 00 00 00     ..p.p.p.p|......
     b72:	00 00 00 00 0a 00 00 c0 00 e0 01 f0 03 f8 07 3c     ...............<
     b82:	0f 1e 1e 0f 3c 07 38 03 30 00 00 00 00 0b 00 00     ....<.8.0.......
     b92:	60 06 60 06 60 06 60 06 60 06 60 06 60 06 60 06     `.`.`.`.`.`.`.`.
     ba2:	60 06 60 06 00 00 0a 00 00 03 30 07 38 0f 3c 1e     `.`.......0.8.<.
     bb2:	1e 3c 0f f8 07 f0 03 e0 01 c0 00 00 00 00 00 0b     .<..............
     bc2:	1c 00 1e 00 1f 00 07 00 83 37 c3 37 e3 37 f7 00     .........7.7.7..
     bd2:	7f 00 3e 00 1c 00 00 00 0c f8 0f fe 1f ff 1f f7     ..>.............
     be2:	3b fb 37 fb 37 fb 37 fb 37 ff 37 ff 37 fe 03 f8     ;.7.7.7.7.7.7...
     bf2:	01 0b 00 38 00 3f e0 3f fc 07 ff 06 1f 06 ff 06     ...8.?.?........
     c02:	fc 07 e0 3f 00 3f 00 38 00 00 0b ff 3f ff 3f ff     ...?.?.8....?.?.
     c12:	3f c3 30 c3 30 c3 30 e7 30 ff 39 fe 3f bc 1f 00     ?.0.0.0.0.9.?...
     c22:	0f 00 00 0b f0 03 fc 0f fe 1f 0f 3c 07 38 03 30     ...........<.8.0
     c32:	03 30 07 38 0f 3c 0e 1c 0c 0c 00 00 0b ff 3f ff     .0.8.<........?.
     c42:	3f ff 3f 03 30 03 30 03 30 07 38 0f 3c fe 1f fc     ?.?.0.0.0.8.<...
     c52:	0f f0 03 00 00 0b ff 3f ff 3f ff 3f c3 30 c3 30     .......?.?.?.0.0
     c62:	c3 30 c3 30 c3 30 c3 30 03 30 03 30 00 00 0b ff     .0.0.0.0.0.0....
     c72:	3f ff 3f ff 3f c3 00 c3 00 c3 00 c3 00 c3 00 c3     ?.?.?...........
     c82:	00 03 00 03 00 00 00 0b f0 03 fc 0f fe 1f 0f 3c     ...............<
     c92:	07 38 c3 30 c3 30 c3 30 c7 3f c7 3f c6 3f 00 00     .8.0.0.0.?.?.?..
     ca2:	0b ff 3f ff 3f ff 3f c0 00 c0 00 c0 00 c0 00 c0     ..?.?.?.........
     cb2:	00 ff 3f ff 3f ff 3f 00 00 09 00 00 00 00 03 30     ..?.?.?........0
     cc2:	03 30 ff 3f ff 3f ff 3f 03 30 03 30 00 00 00 00     .0.?.?.?.0.0....
     cd2:	00 00 0b 00 0e 00 1e 00 3e 00 38 00 30 00 30 00     ........>.8.0.0.
     ce2:	30 00 38 ff 3f ff 1f ff 07 00 00 0b ff 3f ff 3f     0.8.?........?.?
     cf2:	ff 3f e0 01 f0 03 f8 07 3c 0f 1e 1e 0f 3c 07 38     .?......<....<.8
     d02:	03 30 00 00 0b ff 3f ff 3f ff 3f 00 30 00 30 00     .0....?.?.?.0.0.
     d12:	30 00 30 00 30 00 30 00 30 00 30 00 00 0b ff 3f     0.0.0.0.0.0....?
     d22:	ff 3f ff 3f 7e 00 f8 01 e0 01 f8 01 7e 00 ff 3f     .?.?~.......~..?
     d32:	ff 3f ff 3f 00 00 0b ff 3f ff 3f ff 3f 3e 00 f8     .?.?....?.?.?>..
     d42:	00 f0 03 c0 07 00 1f ff 3f ff 3f ff 3f 00 00 0b     ........?.?.?...
     d52:	f0 03 fc 0f fe 1f 0f 3c 07 38 03 30 07 38 0f 3c     .......<.8.0.8.<
     d62:	fe 1f fc 0f f0 03 00 00 0b ff 3f ff 3f ff 3f 83     ..........?.?.?.
     d72:	01 83 01 83 01 83 01 c7 01 ff 01 fe 00 7c 00 00     .............|..
     d82:	00 0b f0 03 fc 0f fe 1f 0f 3c 07 38 03 36 07 3e     .........<.8.6.>
     d92:	0f 3e fe 3f fc 3f f0 33 00 00 0b ff 3f ff 3f ff     .>.?.?.3....?.?.
     da2:	3f 83 01 83 03 83 07 83 0f c7 1f ff 3d fe 38 7c     ?...........=.8|
     db2:	30 00 00 0b 3c 0c 7e 1c ff 3c e7 38 c3 30 c3 30     0...<.~..<.8.0.0
     dc2:	c3 30 c7 39 cf 3f 8e 1f 0c 0f 00 00 0a 00 00 03     .0.9.?..........
     dd2:	00 03 00 03 00 ff 3f ff 3f ff 3f 03 00 03 00 03     ......?.?.?.....
     de2:	00 00 00 00 00 0b ff 07 ff 1f ff 3f 00 38 00 30     ...........?.8.0
     df2:	00 30 00 30 00 38 ff 3f ff 1f ff 07 00 00 0b 07     .0.0.8.?........
     e02:	00 3f 00 ff 01 f8 0f c0 3f 00 3e c0 3f f8 0f ff     .?......?.>.?...
     e12:	01 3f 00 07 00 00 00 0b ff 3f ff 3f ff 3f 00 1e     .?.......?.?.?..
     e22:	80 07 80 03 80 07 00 1e ff 3f ff 3f ff 3f 00 00     .........?.?.?..
     e32:	0b 03 30 0f 3c 1f 3e 3c 0f f0 03 e0 01 f0 03 3c     ..0.<.><.......<
     e42:	0f 1f 3e 0f 3c 03 30 00 00 0b 03 00 0f 00 3f 00     ..>.<.0.......?.
     e52:	fc 00 f0 3f c0 3f f0 3f fc 00 3f 00 0f 00 03 00     ...?.?.?..?.....
     e62:	00 00 0b 03 30 03 3c 03 3e 03 3f c3 33 e3 31 f3     ....0.<.>.?.3.1.
     e72:	30 3f 30 1f 30 0f 30 03 30 00 00 09 00 00 00 00     0?0.0.0.0.......
     e82:	ff 3f ff 3f ff 3f 03 30 03 30 03 30 03 30 00 00     .?.?.?.0.0.0.0..
     e92:	00 00 00 00 0c 0e 00 1e 00 3c 00 78 00 f0 00 e0     .........<.x....
     ea2:	01 c0 03 80 07 00 0f 00 1e 00 1c 00 18 09 00 00     ................
     eb2:	00 00 03 30 03 30 03 30 03 30 ff 3f ff 3f ff 3f     ...0.0.0.0.?.?.?
     ec2:	00 00 00 00 00 00 0c 60 00 70 00 78 00 3c 00 1e     .......`.p.x.<..
     ed2:	00 0f 00 0f 00 1e 00 3c 00 78 00 70 00 60 00 0c     .......<.x.p.`..
     ee2:	00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0     ................
     ef2:	00 c0 00 c0 00 c0 00 c0 08 00 00 00 00 00 00 00     ................
     f02:	00 3e 00 7e 00 7e 00 4e 00 00 00 00 00 00 00 00     .>.~.~.N........
     f12:	00 0b 00 1c 40 3e 60 3f 60 33 60 33 60 33 60 33     ....@>`?`3`3`3`3
     f22:	60 33 e0 3f e0 3f c0 3f 00 00 0b ff 3f ff 3f ff     `3.?.?.?....?.?.
     f32:	3f e0 30 60 30 60 30 60 30 e0 38 e0 3f c0 1f 80     ?.0`0`0`0.8.?...
     f42:	0f 00 00 0b 80 0f c0 1f e0 3f e0 38 60 30 60 30     .........?.8`0`0
     f52:	60 30 60 30 e0 38 c0 18 80 08 00 00 0b 80 0f c0     `0`0.8..........
     f62:	1f e0 3f e0 38 60 30 60 30 e0 30 e0 30 ff 3f ff     ..?.8`0`0.0.0.?.
     f72:	3f ff 3f 00 00 0b 80 0f c0 1f e0 3f e0 3b 60 33     ?.?........?.;`3
     f82:	60 33 60 33 60 33 e0 33 c0 13 80 01 00 00 09 c0     `3`3`3.3........
     f92:	00 c0 00 fc 3f fe 3f ff 3f c7 00 c3 00 c3 00 03     ....?.?.?.......
     fa2:	00 00 00 00 00 00 00 0b 80 03 c0 c7 e0 cf e0 ce     ................
     fb2:	60 cc 60 cc 60 cc 60 ee e0 ff e0 7f e0 3f 00 00     `.`.`.`......?..
     fc2:	0a ff 3f ff 3f ff 3f e0 00 60 00 60 00 e0 00 e0     ..?.?.?..`.`....
     fd2:	3f c0 3f 80 3f 00 00 00 00 09 00 00 00 00 00 30     ?.?.?..........0
     fe2:	60 30 ec 3f ec 3f ec 3f 00 30 00 30 00 00 00 00     `0.?.?.?.0.0....
     ff2:	00 00 09 00 00 00 00 00 60 00 e0 00 e0 60 c0 ec     ........`....`..
    1002:	ff ec ff ec 7f 00 00 00 00 00 00 0a 00 00 ff 3f     ...............?
    1012:	ff 3f ff 3f 80 07 c0 0f e0 1f e0 3c 60 38 00 30     .?.?.......<`8.0
    1022:	00 00 00 00 09 00 00 00 00 00 30 03 30 ff 3f ff     ..........0.0.?.
    1032:	3f ff 3f 00 30 00 30 00 00 00 00 00 00 0b e0 3f     ?.?.0.0........?
    1042:	e0 3f e0 3f e0 00 e0 3f c0 3f e0 3f e0 00 e0 3f     .?.?...?.?.?...?
    1052:	c0 3f 80 3f 00 00 0b 00 00 e0 3f e0 3f e0 3f 60     .?.?......?.?.?`
    1062:	00 60 00 60 00 e0 00 e0 3f c0 3f 80 3f 00 00 0b     .`.`....?.?.?...
    1072:	80 0f c0 1f e0 3f e0 38 60 30 60 30 60 30 e0 38     .....?.8`0`0`0.8
    1082:	e0 3f c0 1f 80 0f 00 00 0b e0 ff e0 ff e0 ff 60     .?.............`
    1092:	1c 60 18 60 18 60 18 e0 1c e0 1f c0 0f 80 07 00     .`.`.`..........
    10a2:	00 0b 80 07 c0 0f e0 1f e0 1c 60 18 60 18 60 18     ..........`.`.`.
    10b2:	60 1c e0 ff e0 ff e0 ff 00 00 0b 00 00 e0 3f e0     `.............?.
    10c2:	3f e0 3f e0 00 60 00 60 00 60 00 e0 00 e0 00 c0     ?.?..`.`.`......
    10d2:	00 00 00 09 c0 11 e0 33 e0 33 60 33 60 33 60 33     .......3.3`3`3`3
    10e2:	60 3f 60 3f 40 1e 00 00 00 00 00 00 09 60 00 60     `?`?@........`.`
    10f2:	00 fe 1f fe 3f fe 3f 60 30 60 30 60 30 00 30 00     ....?.?`0`0`0.0.
    1102:	00 00 00 00 00 0b e0 0f e0 1f e0 3f 00 38 00 30     ...........?.8.0
    1112:	00 30 00 30 00 38 e0 3f e0 3f e0 3f 00 00 0b 60     .0.0.8.?.?.?...`
    1122:	00 e0 01 e0 07 80 1f 00 3e 00 38 00 3e 80 1f e0     ........>.8.>...
    1132:	07 e0 01 60 00 00 00 0b e0 07 e0 1f e0 3f 00 3c     ...`.........?.<
    1142:	e0 1f e0 0f e0 1f 00 3c e0 3f e0 1f e0 07 00 00     .......<.?......
    1152:	0a 60 30 e0 38 e0 3d c0 1f 80 0f 80 0f c0 1f e0     .`0.8.=.........
    1162:	3d e0 38 60 30 00 00 00 00 0a 00 00 60 00 e0 81     =.8`0.......`...
    1172:	e0 e7 80 ff 00 7e 80 1f e0 07 e0 01 60 00 00 00     .....~......`...
    1182:	00 00 0a 60 30 60 38 60 3c 60 3e 60 37 e0 33 e0     ...`0`8`<`>`7.3.
    1192:	31 e0 30 60 30 20 30 00 00 00 00 0a 00 00 80 00     1.0`0 0.........
    11a2:	c0 01 fc 1f fe 3f 7f 7f 07 70 03 60 03 60 03 60     .....?...p.`.`.`
    11b2:	00 00 00 00 07 00 00 00 00 00 00 00 00 ff 3f ff     ..............?.
    11c2:	3f ff 3f 00 00 00 00 00 00 00 00 00 00 0a 00 00     ?.?.............
    11d2:	03 60 03 60 03 60 07 70 7f 7f fe 3f fc 1f c0 01     .`.`.`.p...?....
    11e2:	80 00 00 00 00 00 0b 10 00 18 00 1c 00 0c 00 0c     ................
    11f2:	00 1c 00 18 00 18 00 1c 00 0c 00 04 00 00 00 0b     ................
    1202:	00 0f 80 0f c0 0f e0 0c 70 0c 30 0c 70 0c e0 0c     ........p.0.p...
    1212:	c0 0f 80 0f 00 0f 00 00                             ........

0000121a <digital_pin_to_timer_PGM>:
    121a:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
    122a:	00 00 00 00                                         ....

0000122e <digital_pin_to_bit_mask_PGM>:
    122e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    123e:	04 08 10 20                                         ... 

00001242 <digital_pin_to_port_PGM>:
    1242:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    1252:	03 03 03 03                                         ....

00001256 <port_to_output_PGM>:
    1256:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00001260 <port_to_mode_PGM>:
    1260:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000126a <__ctors_start>:
    126a:	86 0c       	add	r8, r6
    126c:	18 10       	cpse	r1, r8
    126e:	51 23       	and	r21, r17

00001270 <__ctors_end>:
    1270:	a2 0c       	add	r10, r2

00001272 <__dtors_end>:
    1272:	11 24       	eor	r1, r1
    1274:	1f be       	out	0x3f, r1	; 63
    1276:	cf ef       	ldi	r28, 0xFF	; 255
    1278:	d8 e0       	ldi	r29, 0x08	; 8
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	cd bf       	out	0x3d, r28	; 61

0000127e <__do_copy_data>:
    127e:	12 e0       	ldi	r17, 0x02	; 2
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b1 e0       	ldi	r27, 0x01	; 1
    1284:	e4 e3       	ldi	r30, 0x34	; 52
    1286:	f1 e6       	ldi	r31, 0x61	; 97
    1288:	02 c0       	rjmp	.+4      	; 0x128e <__do_copy_data+0x10>
    128a:	05 90       	lpm	r0, Z+
    128c:	0d 92       	st	X+, r0
    128e:	ae 32       	cpi	r26, 0x2E	; 46
    1290:	b1 07       	cpc	r27, r17
    1292:	d9 f7       	brne	.-10     	; 0x128a <__do_copy_data+0xc>

00001294 <__do_clear_bss>:
    1294:	24 e0       	ldi	r18, 0x04	; 4
    1296:	ae e2       	ldi	r26, 0x2E	; 46
    1298:	b2 e0       	ldi	r27, 0x02	; 2
    129a:	01 c0       	rjmp	.+2      	; 0x129e <.do_clear_bss_start>

0000129c <.do_clear_bss_loop>:
    129c:	1d 92       	st	X+, r1

0000129e <.do_clear_bss_start>:
    129e:	aa 3e       	cpi	r26, 0xEA	; 234
    12a0:	b2 07       	cpc	r27, r18
    12a2:	e1 f7       	brne	.-8      	; 0x129c <.do_clear_bss_loop>

000012a4 <__do_global_ctors>:
    12a4:	19 e0       	ldi	r17, 0x09	; 9
    12a6:	c8 e3       	ldi	r28, 0x38	; 56
    12a8:	d9 e0       	ldi	r29, 0x09	; 9
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <__do_global_ctors+0x10>
    12ac:	21 97       	sbiw	r28, 0x01	; 1
    12ae:	fe 01       	movw	r30, r28
    12b0:	0e 94 26 29 	call	0x524c	; 0x524c <__tablejump2__>
    12b4:	c5 33       	cpi	r28, 0x35	; 53
    12b6:	d1 07       	cpc	r29, r17
    12b8:	c9 f7       	brne	.-14     	; 0x12ac <__do_global_ctors+0x8>
    12ba:	0e 94 46 10 	call	0x208c	; 0x208c <main>
    12be:	0c 94 8d 30 	jmp	0x611a	; 0x611a <__do_global_dtors>

000012c2 <__bad_interrupt>:
    12c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000012c6 <setup>:
/***************************************************************************************/
TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, TFT_BRIGHTNESS);
AMS5812 dPress(Wire,0x10,AMS5812::AMS5812_1000_D);
void fill_area(int area,uint16_t colour);
/**************************************************************************************/
void setup() {
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2c 97       	sbiw	r28, 0x0c	; 12
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    12e6:	26 e0       	ldi	r18, 0x06	; 6
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	55 e2       	ldi	r21, 0x25	; 37
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	82 e7       	ldi	r24, 0x72	; 114
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  tft.begin();
    12f8:	88 e1       	ldi	r24, 0x18	; 24
    12fa:	93 e0       	ldi	r25, 0x03	; 3
    12fc:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <_ZN14TFT_22_ILI92255beginEv>
  tft.clear();
    1300:	88 e1       	ldi	r24, 0x18	; 24
    1302:	93 e0       	ldi	r25, 0x03	; 3
    1304:	0e 94 ab 1b 	call	0x3756	; 0x3756 <_ZN14TFT_22_ILI92255clearEv>
  tft.setOrientation(3);
    1308:	63 e0       	ldi	r22, 0x03	; 3
    130a:	88 e1       	ldi	r24, 0x18	; 24
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <_ZN14TFT_22_ILI922514setOrientationEh>
  tft.setBacklight(HIGH);
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	88 e1       	ldi	r24, 0x18	; 24
    1316:	93 e0       	ldi	r25, 0x03	; 3
    1318:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN14TFT_22_ILI922512setBacklightEb>
  tft.drawRectangle(0, 0, tft.maxX() - 1, tft.maxY() - 1, COLOR_WHITE);
    131c:	88 e1       	ldi	r24, 0x18	; 24
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZN14TFT_22_ILI92254maxYEv>
    1324:	8c 01       	movw	r16, r24
    1326:	88 e1       	ldi	r24, 0x18	; 24
    1328:	93 e0       	ldi	r25, 0x03	; 3
    132a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN14TFT_22_ILI92254maxXEv>
    132e:	01 50       	subi	r16, 0x01	; 1
    1330:	11 09       	sbc	r17, r1
    1332:	9c 01       	movw	r18, r24
    1334:	21 50       	subi	r18, 0x01	; 1
    1336:	31 09       	sbc	r19, r1
    1338:	ee 24       	eor	r14, r14
    133a:	ea 94       	dec	r14
    133c:	fe 2c       	mov	r15, r14
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	88 e1       	ldi	r24, 0x18	; 24
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  tft.drawRectangle(1, 1, tft.maxX() - 2, tft.maxY() - 2, COLOR_WHITE);
    134e:	88 e1       	ldi	r24, 0x18	; 24
    1350:	93 e0       	ldi	r25, 0x03	; 3
    1352:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZN14TFT_22_ILI92254maxYEv>
    1356:	8c 01       	movw	r16, r24
    1358:	88 e1       	ldi	r24, 0x18	; 24
    135a:	93 e0       	ldi	r25, 0x03	; 3
    135c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN14TFT_22_ILI92254maxXEv>
    1360:	02 50       	subi	r16, 0x02	; 2
    1362:	11 09       	sbc	r17, r1
    1364:	9c 01       	movw	r18, r24
    1366:	22 50       	subi	r18, 0x02	; 2
    1368:	31 09       	sbc	r19, r1
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	88 e1       	ldi	r24, 0x18	; 24
    1374:	93 e0       	ldi	r25, 0x03	; 3
    1376:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  tft.drawRectangle(2, 2, tft.maxX() - 3, tft.maxY() - 3, COLOR_WHITE);
    137a:	88 e1       	ldi	r24, 0x18	; 24
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZN14TFT_22_ILI92254maxYEv>
    1382:	8c 01       	movw	r16, r24
    1384:	88 e1       	ldi	r24, 0x18	; 24
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN14TFT_22_ILI92254maxXEv>
    138c:	03 50       	subi	r16, 0x03	; 3
    138e:	11 09       	sbc	r17, r1
    1390:	9c 01       	movw	r18, r24
    1392:	23 50       	subi	r18, 0x03	; 3
    1394:	31 09       	sbc	r19, r1
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	62 e0       	ldi	r22, 0x02	; 2
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	88 e1       	ldi	r24, 0x18	; 24
    13a0:	93 e0       	ldi	r25, 0x03	; 3
    13a2:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  tft.drawRectangle(30, 100, 190, 140, COLOR_WHITE);
    13a6:	0c e8       	ldi	r16, 0x8C	; 140
    13a8:	10 e0       	ldi	r17, 0x00	; 0
    13aa:	2e eb       	ldi	r18, 0xBE	; 190
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	44 e6       	ldi	r20, 0x64	; 100
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	6e e1       	ldi	r22, 0x1E	; 30
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	88 e1       	ldi	r24, 0x18	; 24
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  tft.drawRectangle(29, 99, 191, 141, COLOR_WHITE);
    13be:	0d e8       	ldi	r16, 0x8D	; 141
    13c0:	10 e0       	ldi	r17, 0x00	; 0
    13c2:	2f eb       	ldi	r18, 0xBF	; 191
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	43 e6       	ldi	r20, 0x63	; 99
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	6d e1       	ldi	r22, 0x1D	; 29
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	88 e1       	ldi	r24, 0x18	; 24
    13d0:	93 e0       	ldi	r25, 0x03	; 3
    13d2:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  tft.drawRectangle(28, 98, 192, 142, COLOR_WHITE);
    13d6:	0e e8       	ldi	r16, 0x8E	; 142
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	20 ec       	ldi	r18, 0xC0	; 192
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	42 e6       	ldi	r20, 0x62	; 98
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	6c e1       	ldi	r22, 0x1C	; 28
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	88 e1       	ldi	r24, 0x18	; 24
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  tft.drawRectangle(27, 97, 193, 143, COLOR_WHITE);
    13ee:	0f e8       	ldi	r16, 0x8F	; 143
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	21 ec       	ldi	r18, 0xC1	; 193
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	41 e6       	ldi	r20, 0x61	; 97
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	6b e1       	ldi	r22, 0x1B	; 27
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	88 e1       	ldi	r24, 0x18	; 24
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>
  tft.setFont(Terminal12x16);
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	66 eb       	ldi	r22, 0xB6	; 182
    140a:	78 e0       	ldi	r23, 0x08	; 8
    140c:	88 e1       	ldi	r24, 0x18	; 24
    140e:	93 e0       	ldi	r25, 0x03	; 3
    1410:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN14TFT_22_ILI92257setFontEPhb>
  String s2;
    1414:	6b e7       	ldi	r22, 0x7B	; 123
    1416:	71 e0       	ldi	r23, 0x01	; 1
    1418:	ce 01       	movw	r24, r28
    141a:	07 96       	adiw	r24, 0x07	; 7
    141c:	0e 94 85 13 	call	0x270a	; 0x270a <_ZN6StringC1EPKc>
  tft.setGFXFont(&FreeSerif9pt7b);
    1420:	6e ed       	ldi	r22, 0xDE	; 222
    1422:	71 e0       	ldi	r23, 0x01	; 1
    1424:	88 e1       	ldi	r24, 0x18	; 24
    1426:	93 e0       	ldi	r25, 0x03	; 3
    1428:	0e 94 06 21 	call	0x420c	; 0x420c <_ZN14TFT_22_ILI922510setGFXFontEPK7GFXfont>
  s2="Pressure ";
    142c:	6e e1       	ldi	r22, 0x1E	; 30
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	ce 01       	movw	r24, r28
    1432:	07 96       	adiw	r24, 0x07	; 7
    1434:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN6StringaSEPKc>
  tft.drawGFXText(15,70, s2,COLOR_WHITE);
    1438:	be 01       	movw	r22, r28
    143a:	69 5f       	subi	r22, 0xF9	; 249
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN6StringC1ERKS_>
    1446:	0f ef       	ldi	r16, 0xFF	; 255
    1448:	1f ef       	ldi	r17, 0xFF	; 255
    144a:	9e 01       	movw	r18, r28
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	46 e4       	ldi	r20, 0x46	; 70
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	6f e0       	ldi	r22, 0x0F	; 15
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	88 e1       	ldi	r24, 0x18	; 24
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj>
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	0e 94 14 13 	call	0x2628	; 0x2628 <_ZN6StringD1Ev>
  s2="0.000";
    1468:	68 e2       	ldi	r22, 0x28	; 40
    146a:	71 e0       	ldi	r23, 0x01	; 1
    146c:	ce 01       	movw	r24, r28
    146e:	07 96       	adiw	r24, 0x07	; 7
    1470:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN6StringaSEPKc>
  tft.drawGFXText(110,70, s2,COLOR_WHITE);
    1474:	be 01       	movw	r22, r28
    1476:	69 5f       	subi	r22, 0xF9	; 249
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	ce 01       	movw	r24, r28
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN6StringC1ERKS_>
    1482:	9e 01       	movw	r18, r28
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	46 e4       	ldi	r20, 0x46	; 70
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	6e e6       	ldi	r22, 0x6E	; 110
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	88 e1       	ldi	r24, 0x18	; 24
    1492:	93 e0       	ldi	r25, 0x03	; 3
    1494:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj>
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	0e 94 14 13 	call	0x2628	; 0x2628 <_ZN6StringD1Ev>
  s2="MPa";
    14a0:	6e e2       	ldi	r22, 0x2E	; 46
    14a2:	71 e0       	ldi	r23, 0x01	; 1
    14a4:	ce 01       	movw	r24, r28
    14a6:	07 96       	adiw	r24, 0x07	; 7
    14a8:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN6StringaSEPKc>
  tft.drawGFXText(160,70, s2,COLOR_WHITE);
    14ac:	be 01       	movw	r22, r28
    14ae:	69 5f       	subi	r22, 0xF9	; 249
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN6StringC1ERKS_>
    14ba:	9e 01       	movw	r18, r28
    14bc:	2f 5f       	subi	r18, 0xFF	; 255
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	46 e4       	ldi	r20, 0x46	; 70
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	60 ea       	ldi	r22, 0xA0	; 160
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	88 e1       	ldi	r24, 0x18	; 24
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj>
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	0e 94 14 13 	call	0x2628	; 0x2628 <_ZN6StringD1Ev>
  tft.drawBitmap(170, 10, batt3, 30, 20, COLOR_WHITE);
    14d8:	cc 24       	eor	r12, r12
    14da:	ca 94       	dec	r12
    14dc:	dc 2c       	mov	r13, r12
    14de:	24 e1       	ldi	r18, 0x14	; 20
    14e0:	e2 2e       	mov	r14, r18
    14e2:	f1 2c       	mov	r15, r1
    14e4:	0e e1       	ldi	r16, 0x1E	; 30
    14e6:	10 e0       	ldi	r17, 0x00	; 0
    14e8:	2e e8       	ldi	r18, 0x8E	; 142
    14ea:	31 e0       	ldi	r19, 0x01	; 1
    14ec:	4a e0       	ldi	r20, 0x0A	; 10
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	6a ea       	ldi	r22, 0xAA	; 170
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	88 e1       	ldi	r24, 0x18	; 24
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <_ZN14TFT_22_ILI922510drawBitmapEiiPKhiij>
  while(!Serial){}
  // starting communication with the 
  // static pressure transducer
  if (dPress.begin() < 0) {
    14fc:	8e e2       	ldi	r24, 0x2E	; 46
    14fe:	92 e0       	ldi	r25, 0x02	; 2
    1500:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN7AMS58125beginEv>
    1504:	97 ff       	sbrs	r25, 7
    1506:	07 c0       	rjmp	.+14     	; 0x1516 <setup+0x250>
    Serial.println("Error communicating with sensor, check wiring and I2C address");
    1508:	62 e3       	ldi	r22, 0x32	; 50
    150a:	71 e0       	ldi	r23, 0x01	; 1
    150c:	82 e7       	ldi	r24, 0x72	; 114
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	0e 94 a1 10 	call	0x2142	; 0x2142 <_ZN5Print7printlnEPKc>
    1514:	ff cf       	rjmp	.-2      	; 0x1514 <setup+0x24e>
  tft.drawRectangle(30, 100, 190, 140, COLOR_WHITE);
  tft.drawRectangle(29, 99, 191, 141, COLOR_WHITE);
  tft.drawRectangle(28, 98, 192, 142, COLOR_WHITE);
  tft.drawRectangle(27, 97, 193, 143, COLOR_WHITE);
  tft.setFont(Terminal12x16);
  String s2;
    1516:	ce 01       	movw	r24, r28
    1518:	07 96       	adiw	r24, 0x07	; 7
    151a:	0e 94 14 13 	call	0x2628	; 0x2628 <_ZN6StringD1Ev>
  // static pressure transducer
  if (dPress.begin() < 0) {
    Serial.println("Error communicating with sensor, check wiring and I2C address");
    while(1){}
  }
}
    151e:	2c 96       	adiw	r28, 0x0c	; 12
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	08 95       	ret

0000153c <_Z9fill_areaij>:
  Previous_Pressure = Current_Pressure;
  Previous_Area = Current_Area;
}
}
void fill_area(int area,uint16_t colour)
{
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	7b 01       	movw	r14, r22
  
  int length = area/rectangle_width;
  tft.fillRectangle(35, 105, 35+length, 135, colour);
    1546:	6e e1       	ldi	r22, 0x1E	; 30
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__divmodhi4>
    154e:	9b 01       	movw	r18, r22
    1550:	2d 5d       	subi	r18, 0xDD	; 221
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	07 e8       	ldi	r16, 0x87	; 135
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	49 e6       	ldi	r20, 0x69	; 105
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	63 e2       	ldi	r22, 0x23	; 35
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	88 e1       	ldi	r24, 0x18	; 24
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN14TFT_22_ILI922513fillRectangleEjjjjj>
  
}
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	08 95       	ret

00001572 <loop>:
    while(1){}
  }
}


void loop() {
    1572:	4f 92       	push	r4
    1574:	5f 92       	push	r5
    1576:	6f 92       	push	r6
    1578:	7f 92       	push	r7
    157a:	af 92       	push	r10
    157c:	bf 92       	push	r11
    157e:	cf 92       	push	r12
    1580:	df 92       	push	r13
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	00 d0       	rcall	.+0      	; 0x1590 <loop+0x1e>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <loop+0x20>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <loop+0x22>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
  
  dPress.readSensor();
    1598:	8e e2       	ldi	r24, 0x2E	; 46
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <_ZN7AMS581210readSensorEv>
  pressure = dPress.getPressure_Pa(); //Pressure in pascal
    15a0:	8e e2       	ldi	r24, 0x2E	; 46
    15a2:	92 e0       	ldi	r25, 0x02	; 2
    15a4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <_ZN7AMS581214getPressure_PaEv>
    15a8:	6b 01       	movw	r12, r22
    15aa:	7c 01       	movw	r14, r24
  if(pressure >= 1700000)
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	35 e8       	ldi	r19, 0x85	; 133
    15b0:	4f ec       	ldi	r20, 0xCF	; 207
    15b2:	59 e4       	ldi	r21, 0x49	; 73
    15b4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__gesf2>
    15b8:	87 ff       	sbrs	r24, 7
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <loop+0x5c>


void loop() {
  
  dPress.readSensor();
  pressure = dPress.getPressure_Pa(); //Pressure in pascal
    15bc:	c0 92 6e 03 	sts	0x036E, r12	; 0x80036e <pressure>
    15c0:	d0 92 6f 03 	sts	0x036F, r13	; 0x80036f <pressure+0x1>
    15c4:	e0 92 70 03 	sts	0x0370, r14	; 0x800370 <pressure+0x2>
    15c8:	f0 92 71 03 	sts	0x0371, r15	; 0x800371 <pressure+0x3>
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <loop+0x6c>
  if(pressure >= 1700000)
  {
    pressure=0;
    15ce:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <pressure>
    15d2:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <pressure+0x1>
    15d6:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <pressure+0x2>
    15da:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <pressure+0x3>
  }
  
  float kPa = (pressure/1000); //pressure in Kilo  pascal
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4a e7       	ldi	r20, 0x7A	; 122
    15e4:	54 e4       	ldi	r21, 0x44	; 68
    15e6:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <pressure>
    15ea:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <pressure+0x1>
    15ee:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <pressure+0x2>
    15f2:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <pressure+0x3>
    15f6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
    15fa:	6b 01       	movw	r12, r22
    15fc:	7c 01       	movw	r14, r24
    15fe:	08 ec       	ldi	r16, 0xC8	; 200
    1600:	10 e0       	ldi	r17, 0x00	; 0
  float final_pressure = 0;
    1602:	41 2c       	mov	r4, r1
    1604:	51 2c       	mov	r5, r1
    1606:	32 01       	movw	r6, r4
  int i = 200;
  
  
  while(i)
  {
    final_pressure = final_pressure+kPa;  
    1608:	a7 01       	movw	r20, r14
    160a:	96 01       	movw	r18, r12
    160c:	c3 01       	movw	r24, r6
    160e:	b2 01       	movw	r22, r4
    1610:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    1614:	2b 01       	movw	r4, r22
    1616:	3c 01       	movw	r6, r24
    i--;
    delay(1);
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    1624:	01 50       	subi	r16, 0x01	; 1
    1626:	11 09       	sbc	r17, r1
  float kPa = (pressure/1000); //pressure in Kilo  pascal
  float final_pressure = 0;
  int i = 200;
  
  
  while(i)
    1628:	79 f7       	brne	.-34     	; 0x1608 <loop+0x96>
  {
    final_pressure = final_pressure+kPa;  
    i--;
    delay(1);
  }
  final_pressure = final_pressure/200;
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	48 e4       	ldi	r20, 0x48	; 72
    1630:	53 e4       	ldi	r21, 0x43	; 67
    1632:	c3 01       	movw	r24, r6
    1634:	b2 01       	movw	r22, r4
    1636:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
    163a:	2b 01       	movw	r4, r22
    163c:	3c 01       	movw	r6, r24

  
  Serial.print("Pressure =\t");
    163e:	60 e7       	ldi	r22, 0x70	; 112
    1640:	71 e0       	ldi	r23, 0x01	; 1
    1642:	82 e7       	ldi	r24, 0x72	; 114
    1644:	93 e0       	ldi	r25, 0x03	; 3
    1646:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEPKc>
  Serial.print(final_pressure,4);
    164a:	24 e0       	ldi	r18, 0x04	; 4
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	b3 01       	movw	r22, r6
    1650:	a2 01       	movw	r20, r4
    1652:	82 e7       	ldi	r24, 0x72	; 114
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_ZN5Print5printEdi>
  Serial.print("kPa");
    165a:	6c e7       	ldi	r22, 0x7C	; 124
    165c:	71 e0       	ldi	r23, 0x01	; 1
    165e:	82 e7       	ldi	r24, 0x72	; 114
    1660:	93 e0       	ldi	r25, 0x03	; 3
    1662:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEPKc>
  //Serial.print(Angle);
  Serial.print("\n");
    1666:	63 e9       	ldi	r22, 0x93	; 147
    1668:	71 e0       	ldi	r23, 0x01	; 1
    166a:	82 e7       	ldi	r24, 0x72	; 114
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN5Print5printEPKc>

  Current_Area = map(final_pressure,0,100,0,4500);
    1672:	c3 01       	movw	r24, r6
    1674:	b2 01       	movw	r22, r4
    1676:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fixsfsi>
    167a:	1f 92       	push	r1
    167c:	1f 92       	push	r1
    167e:	21 e1       	ldi	r18, 0x11	; 17
    1680:	2f 93       	push	r18
    1682:	24 e9       	ldi	r18, 0x94	; 148
    1684:	2f 93       	push	r18
    1686:	a1 2c       	mov	r10, r1
    1688:	b1 2c       	mov	r11, r1
    168a:	65 01       	movw	r12, r10
    168c:	14 e6       	ldi	r17, 0x64	; 100
    168e:	e1 2e       	mov	r14, r17
    1690:	f1 2c       	mov	r15, r1
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	a9 01       	movw	r20, r18
    169c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_Z3maplllll>
    16a0:	70 93 63 03 	sts	0x0363, r23	; 0x800363 <Current_Area+0x1>
    16a4:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <Current_Area>
  Current_Pressure = final_pressure; 
    16a8:	40 92 66 03 	sts	0x0366, r4	; 0x800366 <Current_Pressure>
    16ac:	50 92 67 03 	sts	0x0367, r5	; 0x800367 <Current_Pressure+0x1>
    16b0:	60 92 68 03 	sts	0x0368, r6	; 0x800368 <Current_Pressure+0x2>
    16b4:	70 92 69 03 	sts	0x0369, r7	; 0x800369 <Current_Pressure+0x3>
  stringTwo =  String(Current_Pressure/1000, 3); 
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a e7       	ldi	r20, 0x7A	; 122
    16be:	54 e4       	ldi	r21, 0x44	; 68
    16c0:	c3 01       	movw	r24, r6
    16c2:	b2 01       	movw	r22, r4
    16c4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
    16c8:	ab 01       	movw	r20, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	23 e0       	ldi	r18, 0x03	; 3
    16ce:	ce 01       	movw	r24, r28
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	0e 94 1a 14 	call	0x2834	; 0x2834 <_ZN6StringC1Efh>
    16d6:	be 01       	movw	r22, r28
    16d8:	6f 5f       	subi	r22, 0xFF	; 255
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8c e5       	ldi	r24, 0x5C	; 92
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN6StringaSEOS_>
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	0e 94 14 13 	call	0x2628	; 0x2628 <_ZN6StringD1Ev>
  if((Current_Pressure-Previous_Pressure > 1)||(Previous_Pressure-Current_Pressure > 1))
    16ec:	40 90 66 03 	lds	r4, 0x0366	; 0x800366 <Current_Pressure>
    16f0:	50 90 67 03 	lds	r5, 0x0367	; 0x800367 <Current_Pressure+0x1>
    16f4:	60 90 68 03 	lds	r6, 0x0368	; 0x800368 <Current_Pressure+0x2>
    16f8:	70 90 69 03 	lds	r7, 0x0369	; 0x800369 <Current_Pressure+0x3>
    16fc:	c0 90 6a 03 	lds	r12, 0x036A	; 0x80036a <Previous_Pressure>
    1700:	d0 90 6b 03 	lds	r13, 0x036B	; 0x80036b <Previous_Pressure+0x1>
    1704:	e0 90 6c 03 	lds	r14, 0x036C	; 0x80036c <Previous_Pressure+0x2>
    1708:	f0 90 6d 03 	lds	r15, 0x036D	; 0x80036d <Previous_Pressure+0x3>
    170c:	a7 01       	movw	r20, r14
    170e:	96 01       	movw	r18, r12
    1710:	c3 01       	movw	r24, r6
    1712:	b2 01       	movw	r22, r4
    1714:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__gesf2>
    172c:	18 16       	cp	r1, r24
    172e:	74 f0       	brlt	.+28     	; 0x174c <loop+0x1da>
    1730:	a3 01       	movw	r20, r6
    1732:	92 01       	movw	r18, r4
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__gesf2>
    1748:	18 16       	cp	r1, r24
    174a:	2c f5       	brge	.+74     	; 0x1796 <loop+0x224>
  {
  tft.fillRectangle(110, 50, 155, 80, COLOR_BLACK);
    174c:	e1 2c       	mov	r14, r1
    174e:	f1 2c       	mov	r15, r1
    1750:	00 e5       	ldi	r16, 0x50	; 80
    1752:	10 e0       	ldi	r17, 0x00	; 0
    1754:	2b e9       	ldi	r18, 0x9B	; 155
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	42 e3       	ldi	r20, 0x32	; 50
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	6e e6       	ldi	r22, 0x6E	; 110
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	88 e1       	ldi	r24, 0x18	; 24
    1762:	93 e0       	ldi	r25, 0x03	; 3
    1764:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN14TFT_22_ILI922513fillRectangleEjjjjj>
  tft.drawGFXText(110,70, stringTwo,COLOR_WHITE);
    1768:	6c e5       	ldi	r22, 0x5C	; 92
    176a:	73 e0       	ldi	r23, 0x03	; 3
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN6StringC1ERKS_>
    1774:	0f ef       	ldi	r16, 0xFF	; 255
    1776:	1f ef       	ldi	r17, 0xFF	; 255
    1778:	9e 01       	movw	r18, r28
    177a:	2f 5f       	subi	r18, 0xFF	; 255
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	46 e4       	ldi	r20, 0x46	; 70
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	6e e6       	ldi	r22, 0x6E	; 110
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	88 e1       	ldi	r24, 0x18	; 24
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj>
    178e:	ce 01       	movw	r24, r28
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	0e 94 14 13 	call	0x2628	; 0x2628 <_ZN6StringD1Ev>
  }
  if((Current_Pressure-Previous_Pressure > 1))   //When Pressure is increasing.
    1796:	c0 90 66 03 	lds	r12, 0x0366	; 0x800366 <Current_Pressure>
    179a:	d0 90 67 03 	lds	r13, 0x0367	; 0x800367 <Current_Pressure+0x1>
    179e:	e0 90 68 03 	lds	r14, 0x0368	; 0x800368 <Current_Pressure+0x2>
    17a2:	f0 90 69 03 	lds	r15, 0x0369	; 0x800369 <Current_Pressure+0x3>
    17a6:	40 90 6a 03 	lds	r4, 0x036A	; 0x80036a <Previous_Pressure>
    17aa:	50 90 6b 03 	lds	r5, 0x036B	; 0x80036b <Previous_Pressure+0x1>
    17ae:	60 90 6c 03 	lds	r6, 0x036C	; 0x80036c <Previous_Pressure+0x2>
    17b2:	70 90 6d 03 	lds	r7, 0x036D	; 0x80036d <Previous_Pressure+0x3>
    17b6:	a3 01       	movw	r20, r6
    17b8:	92 01       	movw	r18, r4
    17ba:	c7 01       	movw	r24, r14
    17bc:	b6 01       	movw	r22, r12
    17be:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__gesf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	64 f4       	brge	.+24     	; 0x17ea <loop+0x278>
 {
  
  if(Current_Area >= 0 && Current_Area < 900)
    17d2:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <Current_Area>
    17d6:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <Current_Area+0x1>
    17da:	84 38       	cpi	r24, 0x84	; 132
    17dc:	23 e0       	ldi	r18, 0x03	; 3
    17de:	92 07       	cpc	r25, r18
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <loop+0x272>
    17e2:	56 c0       	rjmp	.+172    	; 0x1890 <loop+0x31e>
  {fill_area(Current_Area,COLOR_AZUR);
    17e4:	6f ef       	ldi	r22, 0xFF	; 255
    17e6:	77 ef       	ldi	r23, 0xF7	; 247
    17e8:	62 c0       	rjmp	.+196    	; 0x18ae <loop+0x33c>
   fill_area(Current_Area,COLOR_RED); 
  }
  Previous_Pressure = Current_Pressure;
  Previous_Area = Current_Area;
}
else if(Previous_Pressure-Current_Pressure > 1)
    17ea:	a7 01       	movw	r20, r14
    17ec:	96 01       	movw	r18, r12
    17ee:	c3 01       	movw	r24, r6
    17f0:	b2 01       	movw	r22, r4
    17f2:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__gesf2>
    1802:	18 16       	cp	r1, r24
    1804:	0c f0       	brlt	.+2      	; 0x1808 <loop+0x296>
    1806:	6d c0       	rjmp	.+218    	; 0x18e2 <loop+0x370>
{
 float Previous_length = Previous_Area/rectangle_width;
 float Current_length =  Current_Area/rectangle_width;
 tft.fillRectangle(35+Current_length, 105, 35+Previous_length, 135,COLOR_BLACK);
    1808:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <Previous_Area>
    180c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <Previous_Area+0x1>
    1810:	0e e1       	ldi	r16, 0x1E	; 30
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	b8 01       	movw	r22, r16
    1816:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__divmodhi4>
    181a:	07 2e       	mov	r0, r23
    181c:	00 0c       	add	r0, r0
    181e:	88 0b       	sbc	r24, r24
    1820:	99 0b       	sbc	r25, r25
    1822:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__floatsisf>
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4c e0       	ldi	r20, 0x0C	; 12
    182c:	52 e4       	ldi	r21, 0x42	; 66
    182e:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    1832:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fixunssfsi>
    1836:	2b 01       	movw	r4, r22
    1838:	3c 01       	movw	r6, r24
    183a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <Current_Area>
    183e:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <Current_Area+0x1>
    1842:	b8 01       	movw	r22, r16
    1844:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__divmodhi4>
    1848:	07 2e       	mov	r0, r23
    184a:	00 0c       	add	r0, r0
    184c:	88 0b       	sbc	r24, r24
    184e:	99 0b       	sbc	r25, r25
    1850:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__floatsisf>
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4c e0       	ldi	r20, 0x0C	; 12
    185a:	52 e4       	ldi	r21, 0x42	; 66
    185c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    1860:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fixunssfsi>
    1864:	e1 2c       	mov	r14, r1
    1866:	f1 2c       	mov	r15, r1
    1868:	07 e8       	ldi	r16, 0x87	; 135
    186a:	10 e0       	ldi	r17, 0x00	; 0
    186c:	92 01       	movw	r18, r4
    186e:	49 e6       	ldi	r20, 0x69	; 105
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	88 e1       	ldi	r24, 0x18	; 24
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN14TFT_22_ILI922513fillRectangleEjjjjj>
 if(Current_Area >= 0 && Current_Area < 900)
    187a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <Current_Area>
    187e:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <Current_Area+0x1>
    1882:	84 38       	cpi	r24, 0x84	; 132
    1884:	43 e0       	ldi	r20, 0x03	; 3
    1886:	94 07       	cpc	r25, r20
    1888:	18 f4       	brcc	.+6      	; 0x1890 <loop+0x31e>
  {
    fill_area(Current_Area,COLOR_GOLD);
    188a:	60 ea       	ldi	r22, 0xA0	; 160
    188c:	7e ef       	ldi	r23, 0xFE	; 254
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <loop+0x33c>
  }
  else if(Current_Area >=900 && Current_Area <3600)
    1890:	9c 01       	movw	r18, r24
    1892:	24 58       	subi	r18, 0x84	; 132
    1894:	33 40       	sbci	r19, 0x03	; 3
    1896:	2c 38       	cpi	r18, 0x8C	; 140
    1898:	3a 40       	sbci	r19, 0x0A	; 10
    189a:	18 f4       	brcc	.+6      	; 0x18a2 <loop+0x330>
  {
    fill_area(Current_Area,COLOR_GREEN);
    189c:	60 ee       	ldi	r22, 0xE0	; 224
    189e:	77 e0       	ldi	r23, 0x07	; 7
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <loop+0x33c>
  }
  else if(Current_Area >= 3600 )
    18a2:	80 31       	cpi	r24, 0x10	; 16
    18a4:	2e e0       	ldi	r18, 0x0E	; 14
    18a6:	92 07       	cpc	r25, r18
    18a8:	24 f0       	brlt	.+8      	; 0x18b2 <loop+0x340>
  {
   fill_area(Current_Area,COLOR_RED); 
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	78 ef       	ldi	r23, 0xF8	; 248
    18ae:	0e 94 9e 0a 	call	0x153c	; 0x153c <_Z9fill_areaij>
  }
  Previous_Pressure = Current_Pressure;
    18b2:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <Current_Pressure>
    18b6:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <Current_Pressure+0x1>
    18ba:	a0 91 68 03 	lds	r26, 0x0368	; 0x800368 <Current_Pressure+0x2>
    18be:	b0 91 69 03 	lds	r27, 0x0369	; 0x800369 <Current_Pressure+0x3>
    18c2:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <Previous_Pressure>
    18c6:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <Previous_Pressure+0x1>
    18ca:	a0 93 6c 03 	sts	0x036C, r26	; 0x80036c <Previous_Pressure+0x2>
    18ce:	b0 93 6d 03 	sts	0x036D, r27	; 0x80036d <Previous_Pressure+0x3>
  Previous_Area = Current_Area;
    18d2:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <Current_Area>
    18d6:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <Current_Area+0x1>
    18da:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <Previous_Area+0x1>
    18de:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <Previous_Area>
}
}
    18e2:	26 96       	adiw	r28, 0x06	; 6
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	bf 90       	pop	r11
    1900:	af 90       	pop	r10
    1902:	7f 90       	pop	r7
    1904:	6f 90       	pop	r6
    1906:	5f 90       	pop	r5
    1908:	4f 90       	pop	r4
    190a:	08 95       	ret

0000190c <_GLOBAL__sub_I_pressure>:
{
  
  int length = area/rectangle_width;
  tft.fillRectangle(35, 105, 35+length, 135, colour);
  
}
    190c:	ef 92       	push	r14
    190e:	0f 93       	push	r16
float Current_Pressure = 0;
int Previous_Area = 0;
int Current_Area = 0;
int w = 10;
int h = 15;
String stringTwo;
    1910:	6b e7       	ldi	r22, 0x7B	; 123
    1912:	71 e0       	ldi	r23, 0x01	; 1
    1914:	8c e5       	ldi	r24, 0x5C	; 92
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	0e 94 85 13 	call	0x270a	; 0x270a <_ZN6StringC1EPKc>
/******************************************/


/***************************************************************************************/
TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, TFT_BRIGHTNESS);
    191c:	88 ec       	ldi	r24, 0xC8	; 200
    191e:	e8 2e       	mov	r14, r24
    1920:	03 e0       	ldi	r16, 0x03	; 3
    1922:	2a e0       	ldi	r18, 0x0A	; 10
    1924:	49 e0       	ldi	r20, 0x09	; 9
    1926:	68 e0       	ldi	r22, 0x08	; 8
    1928:	88 e1       	ldi	r24, 0x18	; 24
    192a:	93 e0       	ldi	r25, 0x03	; 3
    192c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <_ZN14TFT_22_ILI9225C1Eaaaah>
AMS5812 dPress(Wire,0x10,AMS5812::AMS5812_1000_D);
    1930:	2f e0       	ldi	r18, 0x0F	; 15
    1932:	40 e1       	ldi	r20, 0x10	; 16
    1934:	68 e1       	ldi	r22, 0x18	; 24
    1936:	74 e0       	ldi	r23, 0x04	; 4
    1938:	8e e2       	ldi	r24, 0x2E	; 46
    193a:	92 e0       	ldi	r25, 0x02	; 2
{
  
  int length = area/rectangle_width;
  tft.fillRectangle(35, 105, 35+length, 135, colour);
  
}
    193c:	0f 91       	pop	r16
    193e:	ef 90       	pop	r14
/******************************************/


/***************************************************************************************/
TFT_22_ILI9225 tft = TFT_22_ILI9225(TFT_RST, TFT_RS, TFT_CS, TFT_LED, TFT_BRIGHTNESS);
AMS5812 dPress(Wire,0x10,AMS5812::AMS5812_1000_D);
    1940:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <_ZN7AMS5812C1ER7TwoWirehNS_10TransducerE>

00001944 <_GLOBAL__sub_D_pressure>:
float Current_Pressure = 0;
int Previous_Area = 0;
int Current_Area = 0;
int w = 10;
int h = 15;
String stringTwo;
    1944:	8c e5       	ldi	r24, 0x5C	; 92
    1946:	93 e0       	ldi	r25, 0x03	; 3
    1948:	0c 94 14 13 	jmp	0x2628	; 0x2628 <_ZN6StringD1Ev>

0000194c <__subsf3>:
    194c:	50 58       	subi	r21, 0x80	; 128

0000194e <__addsf3>:
    194e:	bb 27       	eor	r27, r27
    1950:	aa 27       	eor	r26, r26
    1952:	0e 94 be 0c 	call	0x197c	; 0x197c <__addsf3x>
    1956:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__fp_round>
    195a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_pscA>
    195e:	38 f0       	brcs	.+14     	; 0x196e <__addsf3+0x20>
    1960:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscB>
    1964:	20 f0       	brcs	.+8      	; 0x196e <__addsf3+0x20>
    1966:	39 f4       	brne	.+14     	; 0x1976 <__addsf3+0x28>
    1968:	9f 3f       	cpi	r25, 0xFF	; 255
    196a:	19 f4       	brne	.+6      	; 0x1972 <__addsf3+0x24>
    196c:	26 f4       	brtc	.+8      	; 0x1976 <__addsf3+0x28>
    196e:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_nan>
    1972:	0e f4       	brtc	.+2      	; 0x1976 <__addsf3+0x28>
    1974:	e0 95       	com	r30
    1976:	e7 fb       	bst	r30, 7
    1978:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_inf>

0000197c <__addsf3x>:
    197c:	e9 2f       	mov	r30, r25
    197e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_split3>
    1982:	58 f3       	brcs	.-42     	; 0x195a <__addsf3+0xc>
    1984:	ba 17       	cp	r27, r26
    1986:	62 07       	cpc	r22, r18
    1988:	73 07       	cpc	r23, r19
    198a:	84 07       	cpc	r24, r20
    198c:	95 07       	cpc	r25, r21
    198e:	20 f0       	brcs	.+8      	; 0x1998 <__addsf3x+0x1c>
    1990:	79 f4       	brne	.+30     	; 0x19b0 <__addsf3x+0x34>
    1992:	a6 f5       	brtc	.+104    	; 0x19fc <__addsf3x+0x80>
    1994:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__fp_zero>
    1998:	0e f4       	brtc	.+2      	; 0x199c <__addsf3x+0x20>
    199a:	e0 95       	com	r30
    199c:	0b 2e       	mov	r0, r27
    199e:	ba 2f       	mov	r27, r26
    19a0:	a0 2d       	mov	r26, r0
    19a2:	0b 01       	movw	r0, r22
    19a4:	b9 01       	movw	r22, r18
    19a6:	90 01       	movw	r18, r0
    19a8:	0c 01       	movw	r0, r24
    19aa:	ca 01       	movw	r24, r20
    19ac:	a0 01       	movw	r20, r0
    19ae:	11 24       	eor	r1, r1
    19b0:	ff 27       	eor	r31, r31
    19b2:	59 1b       	sub	r21, r25
    19b4:	99 f0       	breq	.+38     	; 0x19dc <__addsf3x+0x60>
    19b6:	59 3f       	cpi	r21, 0xF9	; 249
    19b8:	50 f4       	brcc	.+20     	; 0x19ce <__addsf3x+0x52>
    19ba:	50 3e       	cpi	r21, 0xE0	; 224
    19bc:	68 f1       	brcs	.+90     	; 0x1a18 <__addsf3x+0x9c>
    19be:	1a 16       	cp	r1, r26
    19c0:	f0 40       	sbci	r31, 0x00	; 0
    19c2:	a2 2f       	mov	r26, r18
    19c4:	23 2f       	mov	r18, r19
    19c6:	34 2f       	mov	r19, r20
    19c8:	44 27       	eor	r20, r20
    19ca:	58 5f       	subi	r21, 0xF8	; 248
    19cc:	f3 cf       	rjmp	.-26     	; 0x19b4 <__addsf3x+0x38>
    19ce:	46 95       	lsr	r20
    19d0:	37 95       	ror	r19
    19d2:	27 95       	ror	r18
    19d4:	a7 95       	ror	r26
    19d6:	f0 40       	sbci	r31, 0x00	; 0
    19d8:	53 95       	inc	r21
    19da:	c9 f7       	brne	.-14     	; 0x19ce <__addsf3x+0x52>
    19dc:	7e f4       	brtc	.+30     	; 0x19fc <__addsf3x+0x80>
    19de:	1f 16       	cp	r1, r31
    19e0:	ba 0b       	sbc	r27, r26
    19e2:	62 0b       	sbc	r22, r18
    19e4:	73 0b       	sbc	r23, r19
    19e6:	84 0b       	sbc	r24, r20
    19e8:	ba f0       	brmi	.+46     	; 0x1a18 <__addsf3x+0x9c>
    19ea:	91 50       	subi	r25, 0x01	; 1
    19ec:	a1 f0       	breq	.+40     	; 0x1a16 <__addsf3x+0x9a>
    19ee:	ff 0f       	add	r31, r31
    19f0:	bb 1f       	adc	r27, r27
    19f2:	66 1f       	adc	r22, r22
    19f4:	77 1f       	adc	r23, r23
    19f6:	88 1f       	adc	r24, r24
    19f8:	c2 f7       	brpl	.-16     	; 0x19ea <__addsf3x+0x6e>
    19fa:	0e c0       	rjmp	.+28     	; 0x1a18 <__addsf3x+0x9c>
    19fc:	ba 0f       	add	r27, r26
    19fe:	62 1f       	adc	r22, r18
    1a00:	73 1f       	adc	r23, r19
    1a02:	84 1f       	adc	r24, r20
    1a04:	48 f4       	brcc	.+18     	; 0x1a18 <__addsf3x+0x9c>
    1a06:	87 95       	ror	r24
    1a08:	77 95       	ror	r23
    1a0a:	67 95       	ror	r22
    1a0c:	b7 95       	ror	r27
    1a0e:	f7 95       	ror	r31
    1a10:	9e 3f       	cpi	r25, 0xFE	; 254
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__addsf3x+0x9a>
    1a14:	b0 cf       	rjmp	.-160    	; 0x1976 <__addsf3+0x28>
    1a16:	93 95       	inc	r25
    1a18:	88 0f       	add	r24, r24
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <__addsf3x+0xa2>
    1a1c:	99 27       	eor	r25, r25
    1a1e:	ee 0f       	add	r30, r30
    1a20:	97 95       	ror	r25
    1a22:	87 95       	ror	r24
    1a24:	08 95       	ret

00001a26 <__divsf3>:
    1a26:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__divsf3x>
    1a2a:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__fp_round>
    1a2e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscB>
    1a32:	58 f0       	brcs	.+22     	; 0x1a4a <__divsf3+0x24>
    1a34:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_pscA>
    1a38:	40 f0       	brcs	.+16     	; 0x1a4a <__divsf3+0x24>
    1a3a:	29 f4       	brne	.+10     	; 0x1a46 <__divsf3+0x20>
    1a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3e:	29 f0       	breq	.+10     	; 0x1a4a <__divsf3+0x24>
    1a40:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_inf>
    1a44:	51 11       	cpse	r21, r1
    1a46:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_szero>
    1a4a:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_nan>

00001a4e <__divsf3x>:
    1a4e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_split3>
    1a52:	68 f3       	brcs	.-38     	; 0x1a2e <__divsf3+0x8>

00001a54 <__divsf3_pse>:
    1a54:	99 23       	and	r25, r25
    1a56:	b1 f3       	breq	.-20     	; 0x1a44 <__divsf3+0x1e>
    1a58:	55 23       	and	r21, r21
    1a5a:	91 f3       	breq	.-28     	; 0x1a40 <__divsf3+0x1a>
    1a5c:	95 1b       	sub	r25, r21
    1a5e:	55 0b       	sbc	r21, r21
    1a60:	bb 27       	eor	r27, r27
    1a62:	aa 27       	eor	r26, r26
    1a64:	62 17       	cp	r22, r18
    1a66:	73 07       	cpc	r23, r19
    1a68:	84 07       	cpc	r24, r20
    1a6a:	38 f0       	brcs	.+14     	; 0x1a7a <__divsf3_pse+0x26>
    1a6c:	9f 5f       	subi	r25, 0xFF	; 255
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	44 1f       	adc	r20, r20
    1a76:	aa 1f       	adc	r26, r26
    1a78:	a9 f3       	breq	.-22     	; 0x1a64 <__divsf3_pse+0x10>
    1a7a:	35 d0       	rcall	.+106    	; 0x1ae6 <__divsf3_pse+0x92>
    1a7c:	0e 2e       	mov	r0, r30
    1a7e:	3a f0       	brmi	.+14     	; 0x1a8e <__divsf3_pse+0x3a>
    1a80:	e0 e8       	ldi	r30, 0x80	; 128
    1a82:	32 d0       	rcall	.+100    	; 0x1ae8 <__divsf3_pse+0x94>
    1a84:	91 50       	subi	r25, 0x01	; 1
    1a86:	50 40       	sbci	r21, 0x00	; 0
    1a88:	e6 95       	lsr	r30
    1a8a:	00 1c       	adc	r0, r0
    1a8c:	ca f7       	brpl	.-14     	; 0x1a80 <__divsf3_pse+0x2c>
    1a8e:	2b d0       	rcall	.+86     	; 0x1ae6 <__divsf3_pse+0x92>
    1a90:	fe 2f       	mov	r31, r30
    1a92:	29 d0       	rcall	.+82     	; 0x1ae6 <__divsf3_pse+0x92>
    1a94:	66 0f       	add	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	bb 1f       	adc	r27, r27
    1a9c:	26 17       	cp	r18, r22
    1a9e:	37 07       	cpc	r19, r23
    1aa0:	48 07       	cpc	r20, r24
    1aa2:	ab 07       	cpc	r26, r27
    1aa4:	b0 e8       	ldi	r27, 0x80	; 128
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <__divsf3_pse+0x56>
    1aa8:	bb 0b       	sbc	r27, r27
    1aaa:	80 2d       	mov	r24, r0
    1aac:	bf 01       	movw	r22, r30
    1aae:	ff 27       	eor	r31, r31
    1ab0:	93 58       	subi	r25, 0x83	; 131
    1ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab4:	3a f0       	brmi	.+14     	; 0x1ac4 <__divsf3_pse+0x70>
    1ab6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab8:	51 05       	cpc	r21, r1
    1aba:	78 f0       	brcs	.+30     	; 0x1ada <__divsf3_pse+0x86>
    1abc:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_inf>
    1ac0:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_szero>
    1ac4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac6:	e4 f3       	brlt	.-8      	; 0x1ac0 <__divsf3_pse+0x6c>
    1ac8:	98 3e       	cpi	r25, 0xE8	; 232
    1aca:	d4 f3       	brlt	.-12     	; 0x1ac0 <__divsf3_pse+0x6c>
    1acc:	86 95       	lsr	r24
    1ace:	77 95       	ror	r23
    1ad0:	67 95       	ror	r22
    1ad2:	b7 95       	ror	r27
    1ad4:	f7 95       	ror	r31
    1ad6:	9f 5f       	subi	r25, 0xFF	; 255
    1ad8:	c9 f7       	brne	.-14     	; 0x1acc <__divsf3_pse+0x78>
    1ada:	88 0f       	add	r24, r24
    1adc:	91 1d       	adc	r25, r1
    1ade:	96 95       	lsr	r25
    1ae0:	87 95       	ror	r24
    1ae2:	97 f9       	bld	r25, 7
    1ae4:	08 95       	ret
    1ae6:	e1 e0       	ldi	r30, 0x01	; 1
    1ae8:	66 0f       	add	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	bb 1f       	adc	r27, r27
    1af0:	62 17       	cp	r22, r18
    1af2:	73 07       	cpc	r23, r19
    1af4:	84 07       	cpc	r24, r20
    1af6:	ba 07       	cpc	r27, r26
    1af8:	20 f0       	brcs	.+8      	; 0x1b02 <__divsf3_pse+0xae>
    1afa:	62 1b       	sub	r22, r18
    1afc:	73 0b       	sbc	r23, r19
    1afe:	84 0b       	sbc	r24, r20
    1b00:	ba 0b       	sbc	r27, r26
    1b02:	ee 1f       	adc	r30, r30
    1b04:	88 f7       	brcc	.-30     	; 0x1ae8 <__divsf3_pse+0x94>
    1b06:	e0 95       	com	r30
    1b08:	08 95       	ret

00001b0a <__fixsfsi>:
    1b0a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fixunssfsi>
    1b0e:	68 94       	set
    1b10:	b1 11       	cpse	r27, r1
    1b12:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_szero>
    1b16:	08 95       	ret

00001b18 <__fixunssfsi>:
    1b18:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fp_splitA>
    1b1c:	88 f0       	brcs	.+34     	; 0x1b40 <__fixunssfsi+0x28>
    1b1e:	9f 57       	subi	r25, 0x7F	; 127
    1b20:	98 f0       	brcs	.+38     	; 0x1b48 <__fixunssfsi+0x30>
    1b22:	b9 2f       	mov	r27, r25
    1b24:	99 27       	eor	r25, r25
    1b26:	b7 51       	subi	r27, 0x17	; 23
    1b28:	b0 f0       	brcs	.+44     	; 0x1b56 <__fixunssfsi+0x3e>
    1b2a:	e1 f0       	breq	.+56     	; 0x1b64 <__fixunssfsi+0x4c>
    1b2c:	66 0f       	add	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	1a f0       	brmi	.+6      	; 0x1b3c <__fixunssfsi+0x24>
    1b36:	ba 95       	dec	r27
    1b38:	c9 f7       	brne	.-14     	; 0x1b2c <__fixunssfsi+0x14>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <__fixunssfsi+0x4c>
    1b3c:	b1 30       	cpi	r27, 0x01	; 1
    1b3e:	91 f0       	breq	.+36     	; 0x1b64 <__fixunssfsi+0x4c>
    1b40:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fp_zero>
    1b44:	b1 e0       	ldi	r27, 0x01	; 1
    1b46:	08 95       	ret
    1b48:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__fp_zero>
    1b4c:	67 2f       	mov	r22, r23
    1b4e:	78 2f       	mov	r23, r24
    1b50:	88 27       	eor	r24, r24
    1b52:	b8 5f       	subi	r27, 0xF8	; 248
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <__fixunssfsi+0x4c>
    1b56:	b9 3f       	cpi	r27, 0xF9	; 249
    1b58:	cc f3       	brlt	.-14     	; 0x1b4c <__fixunssfsi+0x34>
    1b5a:	86 95       	lsr	r24
    1b5c:	77 95       	ror	r23
    1b5e:	67 95       	ror	r22
    1b60:	b3 95       	inc	r27
    1b62:	d9 f7       	brne	.-10     	; 0x1b5a <__fixunssfsi+0x42>
    1b64:	3e f4       	brtc	.+14     	; 0x1b74 <__fixunssfsi+0x5c>
    1b66:	90 95       	com	r25
    1b68:	80 95       	com	r24
    1b6a:	70 95       	com	r23
    1b6c:	61 95       	neg	r22
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	8f 4f       	sbci	r24, 0xFF	; 255
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	08 95       	ret

00001b76 <__floatunsisf>:
    1b76:	e8 94       	clt
    1b78:	09 c0       	rjmp	.+18     	; 0x1b8c <__floatsisf+0x12>

00001b7a <__floatsisf>:
    1b7a:	97 fb       	bst	r25, 7
    1b7c:	3e f4       	brtc	.+14     	; 0x1b8c <__floatsisf+0x12>
    1b7e:	90 95       	com	r25
    1b80:	80 95       	com	r24
    1b82:	70 95       	com	r23
    1b84:	61 95       	neg	r22
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	99 23       	and	r25, r25
    1b8e:	a9 f0       	breq	.+42     	; 0x1bba <__floatsisf+0x40>
    1b90:	f9 2f       	mov	r31, r25
    1b92:	96 e9       	ldi	r25, 0x96	; 150
    1b94:	bb 27       	eor	r27, r27
    1b96:	93 95       	inc	r25
    1b98:	f6 95       	lsr	r31
    1b9a:	87 95       	ror	r24
    1b9c:	77 95       	ror	r23
    1b9e:	67 95       	ror	r22
    1ba0:	b7 95       	ror	r27
    1ba2:	f1 11       	cpse	r31, r1
    1ba4:	f8 cf       	rjmp	.-16     	; 0x1b96 <__floatsisf+0x1c>
    1ba6:	fa f4       	brpl	.+62     	; 0x1be6 <__floatsisf+0x6c>
    1ba8:	bb 0f       	add	r27, r27
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <__floatsisf+0x36>
    1bac:	60 ff       	sbrs	r22, 0
    1bae:	1b c0       	rjmp	.+54     	; 0x1be6 <__floatsisf+0x6c>
    1bb0:	6f 5f       	subi	r22, 0xFF	; 255
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <__floatsisf+0x6c>
    1bba:	88 23       	and	r24, r24
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <__floatsisf+0x48>
    1bbe:	96 e9       	ldi	r25, 0x96	; 150
    1bc0:	11 c0       	rjmp	.+34     	; 0x1be4 <__floatsisf+0x6a>
    1bc2:	77 23       	and	r23, r23
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <__floatsisf+0x54>
    1bc6:	9e e8       	ldi	r25, 0x8E	; 142
    1bc8:	87 2f       	mov	r24, r23
    1bca:	76 2f       	mov	r23, r22
    1bcc:	05 c0       	rjmp	.+10     	; 0x1bd8 <__floatsisf+0x5e>
    1bce:	66 23       	and	r22, r22
    1bd0:	71 f0       	breq	.+28     	; 0x1bee <__floatsisf+0x74>
    1bd2:	96 e8       	ldi	r25, 0x86	; 134
    1bd4:	86 2f       	mov	r24, r22
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	2a f0       	brmi	.+10     	; 0x1be6 <__floatsisf+0x6c>
    1bdc:	9a 95       	dec	r25
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	da f7       	brpl	.-10     	; 0x1bdc <__floatsisf+0x62>
    1be6:	88 0f       	add	r24, r24
    1be8:	96 95       	lsr	r25
    1bea:	87 95       	ror	r24
    1bec:	97 f9       	bld	r25, 7
    1bee:	08 95       	ret

00001bf0 <__fp_inf>:
    1bf0:	97 f9       	bld	r25, 7
    1bf2:	9f 67       	ori	r25, 0x7F	; 127
    1bf4:	80 e8       	ldi	r24, 0x80	; 128
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	08 95       	ret

00001bfc <__fp_nan>:
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	80 ec       	ldi	r24, 0xC0	; 192
    1c00:	08 95       	ret

00001c02 <__fp_pscA>:
    1c02:	00 24       	eor	r0, r0
    1c04:	0a 94       	dec	r0
    1c06:	16 16       	cp	r1, r22
    1c08:	17 06       	cpc	r1, r23
    1c0a:	18 06       	cpc	r1, r24
    1c0c:	09 06       	cpc	r0, r25
    1c0e:	08 95       	ret

00001c10 <__fp_pscB>:
    1c10:	00 24       	eor	r0, r0
    1c12:	0a 94       	dec	r0
    1c14:	12 16       	cp	r1, r18
    1c16:	13 06       	cpc	r1, r19
    1c18:	14 06       	cpc	r1, r20
    1c1a:	05 06       	cpc	r0, r21
    1c1c:	08 95       	ret

00001c1e <__fp_round>:
    1c1e:	09 2e       	mov	r0, r25
    1c20:	03 94       	inc	r0
    1c22:	00 0c       	add	r0, r0
    1c24:	11 f4       	brne	.+4      	; 0x1c2a <__fp_round+0xc>
    1c26:	88 23       	and	r24, r24
    1c28:	52 f0       	brmi	.+20     	; 0x1c3e <__fp_round+0x20>
    1c2a:	bb 0f       	add	r27, r27
    1c2c:	40 f4       	brcc	.+16     	; 0x1c3e <__fp_round+0x20>
    1c2e:	bf 2b       	or	r27, r31
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <__fp_round+0x18>
    1c32:	60 ff       	sbrs	r22, 0
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <__fp_round+0x20>
    1c36:	6f 5f       	subi	r22, 0xFF	; 255
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	08 95       	ret

00001c40 <__fp_split3>:
    1c40:	57 fd       	sbrc	r21, 7
    1c42:	90 58       	subi	r25, 0x80	; 128
    1c44:	44 0f       	add	r20, r20
    1c46:	55 1f       	adc	r21, r21
    1c48:	59 f0       	breq	.+22     	; 0x1c60 <__fp_splitA+0x10>
    1c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4c:	71 f0       	breq	.+28     	; 0x1c6a <__fp_splitA+0x1a>
    1c4e:	47 95       	ror	r20

00001c50 <__fp_splitA>:
    1c50:	88 0f       	add	r24, r24
    1c52:	97 fb       	bst	r25, 7
    1c54:	99 1f       	adc	r25, r25
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <__fp_splitA+0x20>
    1c58:	9f 3f       	cpi	r25, 0xFF	; 255
    1c5a:	79 f0       	breq	.+30     	; 0x1c7a <__fp_splitA+0x2a>
    1c5c:	87 95       	ror	r24
    1c5e:	08 95       	ret
    1c60:	12 16       	cp	r1, r18
    1c62:	13 06       	cpc	r1, r19
    1c64:	14 06       	cpc	r1, r20
    1c66:	55 1f       	adc	r21, r21
    1c68:	f2 cf       	rjmp	.-28     	; 0x1c4e <__fp_split3+0xe>
    1c6a:	46 95       	lsr	r20
    1c6c:	f1 df       	rcall	.-30     	; 0x1c50 <__fp_splitA>
    1c6e:	08 c0       	rjmp	.+16     	; 0x1c80 <__fp_splitA+0x30>
    1c70:	16 16       	cp	r1, r22
    1c72:	17 06       	cpc	r1, r23
    1c74:	18 06       	cpc	r1, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	f1 cf       	rjmp	.-30     	; 0x1c5c <__fp_splitA+0xc>
    1c7a:	86 95       	lsr	r24
    1c7c:	71 05       	cpc	r23, r1
    1c7e:	61 05       	cpc	r22, r1
    1c80:	08 94       	sec
    1c82:	08 95       	ret

00001c84 <__fp_zero>:
    1c84:	e8 94       	clt

00001c86 <__fp_szero>:
    1c86:	bb 27       	eor	r27, r27
    1c88:	66 27       	eor	r22, r22
    1c8a:	77 27       	eor	r23, r23
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	97 f9       	bld	r25, 7
    1c90:	08 95       	ret

00001c92 <__gesf2>:
    1c92:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_cmp>
    1c96:	08 f4       	brcc	.+2      	; 0x1c9a <__gesf2+0x8>
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	08 95       	ret

00001c9c <__fp_cmp>:
    1c9c:	99 0f       	add	r25, r25
    1c9e:	00 08       	sbc	r0, r0
    1ca0:	55 0f       	add	r21, r21
    1ca2:	aa 0b       	sbc	r26, r26
    1ca4:	e0 e8       	ldi	r30, 0x80	; 128
    1ca6:	fe ef       	ldi	r31, 0xFE	; 254
    1ca8:	16 16       	cp	r1, r22
    1caa:	17 06       	cpc	r1, r23
    1cac:	e8 07       	cpc	r30, r24
    1cae:	f9 07       	cpc	r31, r25
    1cb0:	c0 f0       	brcs	.+48     	; 0x1ce2 <__fp_cmp+0x46>
    1cb2:	12 16       	cp	r1, r18
    1cb4:	13 06       	cpc	r1, r19
    1cb6:	e4 07       	cpc	r30, r20
    1cb8:	f5 07       	cpc	r31, r21
    1cba:	98 f0       	brcs	.+38     	; 0x1ce2 <__fp_cmp+0x46>
    1cbc:	62 1b       	sub	r22, r18
    1cbe:	73 0b       	sbc	r23, r19
    1cc0:	84 0b       	sbc	r24, r20
    1cc2:	95 0b       	sbc	r25, r21
    1cc4:	39 f4       	brne	.+14     	; 0x1cd4 <__fp_cmp+0x38>
    1cc6:	0a 26       	eor	r0, r26
    1cc8:	61 f0       	breq	.+24     	; 0x1ce2 <__fp_cmp+0x46>
    1cca:	23 2b       	or	r18, r19
    1ccc:	24 2b       	or	r18, r20
    1cce:	25 2b       	or	r18, r21
    1cd0:	21 f4       	brne	.+8      	; 0x1cda <__fp_cmp+0x3e>
    1cd2:	08 95       	ret
    1cd4:	0a 26       	eor	r0, r26
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <__fp_cmp+0x3e>
    1cd8:	a1 40       	sbci	r26, 0x01	; 1
    1cda:	a6 95       	lsr	r26
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	81 1d       	adc	r24, r1
    1ce0:	81 1d       	adc	r24, r1
    1ce2:	08 95       	ret

00001ce4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1ce4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1ce6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ce8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cea:	89 2f       	mov	r24, r25
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	80 5c       	subi	r24, 0xC0	; 192
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	82 1b       	sub	r24, r18
    1cf4:	91 09       	sbc	r25, r1
}
    1cf6:	8f 73       	andi	r24, 0x3F	; 63
    1cf8:	99 27       	eor	r25, r25
    1cfa:	08 95       	ret

00001cfc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1cfc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1cfe:	91 8d       	ldd	r25, Z+25	; 0x19
    1d00:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d02:	98 17       	cp	r25, r24
    1d04:	31 f0       	breq	.+12     	; 0x1d12 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1d06:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d08:	e8 0f       	add	r30, r24
    1d0a:	f1 1d       	adc	r31, r1
    1d0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1d16:	08 95       	ret

00001d18 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1d18:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1d1a:	91 8d       	ldd	r25, Z+25	; 0x19
    1d1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d1e:	98 17       	cp	r25, r24
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1d22:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d24:	df 01       	movw	r26, r30
    1d26:	a8 0f       	add	r26, r24
    1d28:	b1 1d       	adc	r27, r1
    1d2a:	5d 96       	adiw	r26, 0x1d	; 29
    1d2c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1d2e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d30:	9f 5f       	subi	r25, 0xFF	; 255
    1d32:	9f 73       	andi	r25, 0x3F	; 63
    1d34:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1d3e:	08 95       	ret

00001d40 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1d40:	fc 01       	movw	r30, r24
    1d42:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1d44:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d46:	25 2f       	mov	r18, r21
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	84 2f       	mov	r24, r20
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1d4e:	82 1b       	sub	r24, r18
    1d50:	93 0b       	sbc	r25, r19
    1d52:	54 17       	cp	r21, r20
    1d54:	10 f0       	brcs	.+4      	; 0x1d5a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1d56:	cf 96       	adiw	r24, 0x3f	; 63
    1d58:	08 95       	ret
  return tail - head - 1;
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
}
    1d5c:	08 95       	ret

00001d5e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1d5e:	8e e0       	ldi	r24, 0x0E	; 14
    1d60:	90 e1       	ldi	r25, 0x10	; 16
    1d62:	89 2b       	or	r24, r25
    1d64:	49 f0       	breq	.+18     	; 0x1d78 <_Z14serialEventRunv+0x1a>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	89 2b       	or	r24, r25
    1d6c:	29 f0       	breq	.+10     	; 0x1d78 <_Z14serialEventRunv+0x1a>
    1d6e:	0e 94 0e 10 	call	0x201c	; 0x201c <_Z17Serial0_availablev>
    1d72:	81 11       	cpse	r24, r1
    1d74:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1d78:	08 95       	ret

00001d7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1d7a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1d7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d7e:	df 01       	movw	r26, r30
    1d80:	a8 0f       	add	r26, r24
    1d82:	b1 1d       	adc	r27, r1
    1d84:	a3 5a       	subi	r26, 0xA3	; 163
    1d86:	bf 4f       	sbci	r27, 0xFF	; 255
    1d88:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1d8a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	8f 73       	andi	r24, 0x3F	; 63
    1d92:	99 27       	eor	r25, r25
    1d94:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1d96:	a6 89       	ldd	r26, Z+22	; 0x16
    1d98:	b7 89       	ldd	r27, Z+23	; 0x17
    1d9a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1d9c:	a0 89       	ldd	r26, Z+16	; 0x10
    1d9e:	b1 89       	ldd	r27, Z+17	; 0x11
    1da0:	8c 91       	ld	r24, X
    1da2:	83 70       	andi	r24, 0x03	; 3
    1da4:	80 64       	ori	r24, 0x40	; 64
    1da6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1da8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1daa:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dac:	98 13       	cpse	r25, r24
    1dae:	06 c0       	rjmp	.+12     	; 0x1dbc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1db0:	02 88       	ldd	r0, Z+18	; 0x12
    1db2:	f3 89       	ldd	r31, Z+19	; 0x13
    1db4:	e0 2d       	mov	r30, r0
    1db6:	80 81       	ld	r24, Z
    1db8:	8f 7d       	andi	r24, 0xDF	; 223
    1dba:	80 83       	st	Z, r24
    1dbc:	08 95       	ret

00001dbe <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
  _written = true;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1dd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dd4:	98 13       	cpse	r25, r24
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <_ZN14HardwareSerial5writeEh+0x24>
    1dd8:	e8 89       	ldd	r30, Y+16	; 0x10
    1dda:	f9 89       	ldd	r31, Y+17	; 0x11
    1ddc:	80 81       	ld	r24, Z
    1dde:	85 fd       	sbrc	r24, 5
    1de0:	26 c0       	rjmp	.+76     	; 0x1e2e <_ZN14HardwareSerial5writeEh+0x70>
    1de2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1de4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	0f 5f       	subi	r16, 0xFF	; 255
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	0f 73       	andi	r16, 0x3F	; 63
    1dee:	11 27       	eor	r17, r17
    1df0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1df2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1df4:	e8 12       	cpse	r14, r24
    1df6:	0c c0       	rjmp	.+24     	; 0x1e10 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	07 fc       	sbrc	r0, 7
    1dfc:	fa cf       	rjmp	.-12     	; 0x1df2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1dfe:	e8 89       	ldd	r30, Y+16	; 0x10
    1e00:	f9 89       	ldd	r31, Y+17	; 0x11
    1e02:	80 81       	ld	r24, Z
    1e04:	85 ff       	sbrs	r24, 5
    1e06:	f5 cf       	rjmp	.-22     	; 0x1df2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1e08:	ce 01       	movw	r24, r28
    1e0a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e0e:	f1 cf       	rjmp	.-30     	; 0x1df2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e12:	fe 01       	movw	r30, r28
    1e14:	e8 0f       	add	r30, r24
    1e16:	f1 1d       	adc	r31, r1
    1e18:	e3 5a       	subi	r30, 0xA3	; 163
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e1e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e20:	f8 94       	cli
    _tx_buffer_head = i;
    1e22:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1e24:	ea 89       	ldd	r30, Y+18	; 0x12
    1e26:	fb 89       	ldd	r31, Y+19	; 0x13
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 62       	ori	r24, 0x20	; 32
    1e2c:	0a c0       	rjmp	.+20     	; 0x1e42 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e2e:	9f b7       	in	r25, 0x3f	; 63
    1e30:	f8 94       	cli
      *_udr = c;
    1e32:	ee 89       	ldd	r30, Y+22	; 0x16
    1e34:	ff 89       	ldd	r31, Y+23	; 0x17
    1e36:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1e38:	e8 89       	ldd	r30, Y+16	; 0x10
    1e3a:	f9 89       	ldd	r31, Y+17	; 0x11
    1e3c:	80 81       	ld	r24, Z
    1e3e:	83 70       	andi	r24, 0x03	; 3
    1e40:	80 64       	ori	r24, 0x40	; 64
    1e42:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e44:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	08 95       	ret

00001e58 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1e5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e60:	88 23       	and	r24, r24
    1e62:	c9 f0       	breq	.+50     	; 0x1e96 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1e64:	ea 89       	ldd	r30, Y+18	; 0x12
    1e66:	fb 89       	ldd	r31, Y+19	; 0x13
    1e68:	80 81       	ld	r24, Z
    1e6a:	85 fd       	sbrc	r24, 5
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <_ZN14HardwareSerial5flushEv+0x20>
    1e6e:	a8 89       	ldd	r26, Y+16	; 0x10
    1e70:	b9 89       	ldd	r27, Y+17	; 0x11
    1e72:	8c 91       	ld	r24, X
    1e74:	86 fd       	sbrc	r24, 6
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	07 fc       	sbrc	r0, 7
    1e7c:	f5 cf       	rjmp	.-22     	; 0x1e68 <_ZN14HardwareSerial5flushEv+0x10>
    1e7e:	80 81       	ld	r24, Z
    1e80:	85 ff       	sbrs	r24, 5
    1e82:	f2 cf       	rjmp	.-28     	; 0x1e68 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1e84:	a8 89       	ldd	r26, Y+16	; 0x10
    1e86:	b9 89       	ldd	r27, Y+17	; 0x11
    1e88:	8c 91       	ld	r24, X
    1e8a:	85 ff       	sbrs	r24, 5
    1e8c:	ed cf       	rjmp	.-38     	; 0x1e68 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1e8e:	ce 01       	movw	r24, r28
    1e90:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e94:	e7 cf       	rjmp	.-50     	; 0x1e64 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	08 95       	ret

00001e9c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1e9c:	cf 92       	push	r12
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	ec 01       	movw	r28, r24
    1eac:	6a 01       	movw	r12, r20
    1eae:	7b 01       	movw	r14, r22
    1eb0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1eb2:	e8 89       	ldd	r30, Y+16	; 0x10
    1eb4:	f9 89       	ldd	r31, Y+17	; 0x11
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1eba:	41 15       	cp	r20, r1
    1ebc:	51 4e       	sbci	r21, 0xE1	; 225
    1ebe:	61 05       	cpc	r22, r1
    1ec0:	71 05       	cpc	r23, r1
    1ec2:	b1 f0       	breq	.+44     	; 0x1ef0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	79 e0       	ldi	r23, 0x09	; 9
    1ec8:	8d e3       	ldi	r24, 0x3D	; 61
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a7 01       	movw	r20, r14
    1ece:	96 01       	movw	r18, r12
    1ed0:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodsi4>
    1ed4:	da 01       	movw	r26, r20
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	a1 09       	sbc	r26, r1
    1edc:	b1 09       	sbc	r27, r1
    1ede:	b6 95       	lsr	r27
    1ee0:	a7 95       	ror	r26
    1ee2:	97 95       	ror	r25
    1ee4:	87 95       	ror	r24
    1ee6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ee8:	21 15       	cp	r18, r1
    1eea:	80 e1       	ldi	r24, 0x10	; 16
    1eec:	38 07       	cpc	r19, r24
    1eee:	a8 f0       	brcs	.+42     	; 0x1f1a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1ef0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ef2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ef4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ef6:	60 e8       	ldi	r22, 0x80	; 128
    1ef8:	74 e8       	ldi	r23, 0x84	; 132
    1efa:	8e e1       	ldi	r24, 0x1E	; 30
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a7 01       	movw	r20, r14
    1f00:	96 01       	movw	r18, r12
    1f02:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodsi4>
    1f06:	da 01       	movw	r26, r20
    1f08:	c9 01       	movw	r24, r18
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	a1 09       	sbc	r26, r1
    1f0e:	b1 09       	sbc	r27, r1
    1f10:	b6 95       	lsr	r27
    1f12:	a7 95       	ror	r26
    1f14:	97 95       	ror	r25
    1f16:	87 95       	ror	r24
    1f18:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1f1a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f1c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f1e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1f20:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f22:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f24:	20 83       	st	Z, r18

  _written = false;
    1f26:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1f28:	ec 89       	ldd	r30, Y+20	; 0x14
    1f2a:	fd 89       	ldd	r31, Y+21	; 0x15
    1f2c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1f2e:	ea 89       	ldd	r30, Y+18	; 0x12
    1f30:	fb 89       	ldd	r31, Y+19	; 0x13
    1f32:	80 81       	ld	r24, Z
    1f34:	80 61       	ori	r24, 0x10	; 16
    1f36:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1f38:	ea 89       	ldd	r30, Y+18	; 0x12
    1f3a:	fb 89       	ldd	r31, Y+19	; 0x13
    1f3c:	80 81       	ld	r24, Z
    1f3e:	88 60       	ori	r24, 0x08	; 8
    1f40:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1f42:	ea 89       	ldd	r30, Y+18	; 0x12
    1f44:	fb 89       	ldd	r31, Y+19	; 0x13
    1f46:	80 81       	ld	r24, Z
    1f48:	80 68       	ori	r24, 0x80	; 128
    1f4a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1f4c:	ea 89       	ldd	r30, Y+18	; 0x12
    1f4e:	fb 89       	ldd	r31, Y+19	; 0x13
    1f50:	80 81       	ld	r24, Z
    1f52:	8f 7d       	andi	r24, 0xDF	; 223
    1f54:	80 83       	st	Z, r24
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	df 90       	pop	r13
    1f62:	cf 90       	pop	r12
    1f64:	08 95       	ret

00001f66 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	08 95       	ret

00001f6c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	2f 93       	push	r18
    1f78:	8f 93       	push	r24
    1f7a:	9f 93       	push	r25
    1f7c:	ef 93       	push	r30
    1f7e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1f80:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <Serial+0x10>
    1f84:	f0 91 83 03 	lds	r31, 0x0383	; 0x800383 <Serial+0x11>
    1f88:	80 81       	ld	r24, Z
    1f8a:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <Serial+0x16>
    1f8e:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <Serial+0x17>
    1f92:	82 fd       	sbrc	r24, 2
    1f94:	12 c0       	rjmp	.+36     	; 0x1fba <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1f96:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1f98:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <Serial+0x19>
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1fa0:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <Serial+0x1a>
    1fa4:	82 17       	cp	r24, r18
    1fa6:	51 f0       	breq	.+20     	; 0x1fbc <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1fa8:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <Serial+0x19>
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	ee 58       	subi	r30, 0x8E	; 142
    1fb0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1fb4:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <Serial+0x19>
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1fba:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1fbc:	ff 91       	pop	r31
    1fbe:	ef 91       	pop	r30
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	2f 91       	pop	r18
    1fc6:	0f 90       	pop	r0
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	0f 90       	pop	r0
    1fcc:	1f 90       	pop	r1
    1fce:	18 95       	reti

00001fd0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1fd0:	1f 92       	push	r1
    1fd2:	0f 92       	push	r0
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	0f 92       	push	r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	2f 93       	push	r18
    1fdc:	3f 93       	push	r19
    1fde:	4f 93       	push	r20
    1fe0:	5f 93       	push	r21
    1fe2:	6f 93       	push	r22
    1fe4:	7f 93       	push	r23
    1fe6:	8f 93       	push	r24
    1fe8:	9f 93       	push	r25
    1fea:	af 93       	push	r26
    1fec:	bf 93       	push	r27
    1fee:	ef 93       	push	r30
    1ff0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ff2:	82 e7       	ldi	r24, 0x72	; 114
    1ff4:	93 e0       	ldi	r25, 0x03	; 3
    1ff6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1ffa:	ff 91       	pop	r31
    1ffc:	ef 91       	pop	r30
    1ffe:	bf 91       	pop	r27
    2000:	af 91       	pop	r26
    2002:	9f 91       	pop	r25
    2004:	8f 91       	pop	r24
    2006:	7f 91       	pop	r23
    2008:	6f 91       	pop	r22
    200a:	5f 91       	pop	r21
    200c:	4f 91       	pop	r20
    200e:	3f 91       	pop	r19
    2010:	2f 91       	pop	r18
    2012:	0f 90       	pop	r0
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	0f 90       	pop	r0
    2018:	1f 90       	pop	r1
    201a:	18 95       	reti

0000201c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    201c:	82 e7       	ldi	r24, 0x72	; 114
    201e:	93 e0       	ldi	r25, 0x03	; 3
    2020:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <_ZN14HardwareSerial9availableEv>
    2024:	21 e0       	ldi	r18, 0x01	; 1
    2026:	89 2b       	or	r24, r25
    2028:	09 f4       	brne	.+2      	; 0x202c <_Z17Serial0_availablev+0x10>
    202a:	20 e0       	ldi	r18, 0x00	; 0
}
    202c:	82 2f       	mov	r24, r18
    202e:	08 95       	ret

00002030 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2030:	e2 e7       	ldi	r30, 0x72	; 114
    2032:	f3 e0       	ldi	r31, 0x03	; 3
    2034:	13 82       	std	Z+3, r1	; 0x03
    2036:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2038:	88 ee       	ldi	r24, 0xE8	; 232
    203a:	93 e0       	ldi	r25, 0x03	; 3
    203c:	a0 e0       	ldi	r26, 0x00	; 0
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	84 83       	std	Z+4, r24	; 0x04
    2042:	95 83       	std	Z+5, r25	; 0x05
    2044:	a6 83       	std	Z+6, r26	; 0x06
    2046:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2048:	84 e8       	ldi	r24, 0x84	; 132
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
    2050:	85 ec       	ldi	r24, 0xC5	; 197
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	95 87       	std	Z+13, r25	; 0x0d
    2056:	84 87       	std	Z+12, r24	; 0x0c
    2058:	84 ec       	ldi	r24, 0xC4	; 196
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	97 87       	std	Z+15, r25	; 0x0f
    205e:	86 87       	std	Z+14, r24	; 0x0e
    2060:	80 ec       	ldi	r24, 0xC0	; 192
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	91 8b       	std	Z+17, r25	; 0x11
    2066:	80 8b       	std	Z+16, r24	; 0x10
    2068:	81 ec       	ldi	r24, 0xC1	; 193
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	93 8b       	std	Z+19, r25	; 0x13
    206e:	82 8b       	std	Z+18, r24	; 0x12
    2070:	82 ec       	ldi	r24, 0xC2	; 194
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	95 8b       	std	Z+21, r25	; 0x15
    2076:	84 8b       	std	Z+20, r24	; 0x14
    2078:	86 ec       	ldi	r24, 0xC6	; 198
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	97 8b       	std	Z+23, r25	; 0x17
    207e:	86 8b       	std	Z+22, r24	; 0x16
    2080:	11 8e       	std	Z+25, r1	; 0x19
    2082:	12 8e       	std	Z+26, r1	; 0x1a
    2084:	13 8e       	std	Z+27, r1	; 0x1b
    2086:	14 8e       	std	Z+28, r1	; 0x1c
    2088:	08 95       	ret

0000208a <initVariant>:
    208a:	08 95       	ret

0000208c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    208c:	0e 94 97 12 	call	0x252e	; 0x252e <init>

	initVariant();
    2090:	0e 94 45 10 	call	0x208a	; 0x208a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2094:	0e 94 63 09 	call	0x12c6	; 0x12c6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2098:	cf ea       	ldi	r28, 0xAF	; 175
    209a:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    209c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <loop>
		if (serialEventRun) serialEventRun();
    20a0:	20 97       	sbiw	r28, 0x00	; 0
    20a2:	e1 f3       	breq	.-8      	; 0x209c <main+0x10>
    20a4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <_Z14serialEventRunv>
    20a8:	f9 cf       	rjmp	.-14     	; 0x209c <main+0x10>

000020aa <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    20aa:	cf 92       	push	r12
    20ac:	df 92       	push	r13
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	6c 01       	movw	r12, r24
    20bc:	7a 01       	movw	r14, r20
    20be:	8b 01       	movw	r16, r22
    20c0:	c0 e0       	ldi	r28, 0x00	; 0
    20c2:	d0 e0       	ldi	r29, 0x00	; 0
    20c4:	ce 15       	cp	r28, r14
    20c6:	df 05       	cpc	r29, r15
    20c8:	81 f0       	breq	.+32     	; 0x20ea <_ZN5Print5writeEPKhj+0x40>
    20ca:	d8 01       	movw	r26, r16
    20cc:	6d 91       	ld	r22, X+
    20ce:	8d 01       	movw	r16, r26
    20d0:	d6 01       	movw	r26, r12
    20d2:	ed 91       	ld	r30, X+
    20d4:	fc 91       	ld	r31, X
    20d6:	01 90       	ld	r0, Z+
    20d8:	f0 81       	ld	r31, Z
    20da:	e0 2d       	mov	r30, r0
    20dc:	c6 01       	movw	r24, r12
    20de:	09 95       	icall
    20e0:	89 2b       	or	r24, r25
    20e2:	11 f0       	breq	.+4      	; 0x20e8 <_ZN5Print5writeEPKhj+0x3e>
    20e4:	21 96       	adiw	r28, 0x01	; 1
    20e6:	ee cf       	rjmp	.-36     	; 0x20c4 <_ZN5Print5writeEPKhj+0x1a>
    20e8:	7e 01       	movw	r14, r28
    20ea:	c7 01       	movw	r24, r14
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	ef 90       	pop	r14
    20f8:	df 90       	pop	r13
    20fa:	cf 90       	pop	r12
    20fc:	08 95       	ret

000020fe <_ZN5Print5writeEPKc>:
    20fe:	61 15       	cp	r22, r1
    2100:	71 05       	cpc	r23, r1
    2102:	79 f0       	breq	.+30     	; 0x2122 <_ZN5Print5writeEPKc+0x24>
    2104:	fb 01       	movw	r30, r22
    2106:	01 90       	ld	r0, Z+
    2108:	00 20       	and	r0, r0
    210a:	e9 f7       	brne	.-6      	; 0x2106 <_ZN5Print5writeEPKc+0x8>
    210c:	31 97       	sbiw	r30, 0x01	; 1
    210e:	af 01       	movw	r20, r30
    2110:	46 1b       	sub	r20, r22
    2112:	57 0b       	sbc	r21, r23
    2114:	dc 01       	movw	r26, r24
    2116:	ed 91       	ld	r30, X+
    2118:	fc 91       	ld	r31, X
    211a:	02 80       	ldd	r0, Z+2	; 0x02
    211c:	f3 81       	ldd	r31, Z+3	; 0x03
    211e:	e0 2d       	mov	r30, r0
    2120:	09 94       	ijmp
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	08 95       	ret

00002128 <_ZN5Print5printEPKc>:
    2128:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <_ZN5Print5writeEPKc>

0000212c <_ZN5Print5printEc>:
    212c:	dc 01       	movw	r26, r24
    212e:	ed 91       	ld	r30, X+
    2130:	fc 91       	ld	r31, X
    2132:	01 90       	ld	r0, Z+
    2134:	f0 81       	ld	r31, Z
    2136:	e0 2d       	mov	r30, r0
    2138:	09 94       	ijmp

0000213a <_ZN5Print7printlnEv>:
    213a:	62 e9       	ldi	r22, 0x92	; 146
    213c:	71 e0       	ldi	r23, 0x01	; 1
    213e:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <_ZN5Print5writeEPKc>

00002142 <_ZN5Print7printlnEPKc>:
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	ec 01       	movw	r28, r24
    214c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_ZN5Print5writeEPKc>
    2150:	8c 01       	movw	r16, r24
    2152:	ce 01       	movw	r24, r28
    2154:	0e 94 9d 10 	call	0x213a	; 0x213a <_ZN5Print7printlnEv>
    2158:	80 0f       	add	r24, r16
    215a:	91 1f       	adc	r25, r17
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	08 95       	ret

00002166 <_ZN5Print11printNumberEmh>:
    2166:	8f 92       	push	r8
    2168:	9f 92       	push	r9
    216a:	af 92       	push	r10
    216c:	bf 92       	push	r11
    216e:	ef 92       	push	r14
    2170:	ff 92       	push	r15
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	a1 97       	sbiw	r28, 0x21	; 33
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	7c 01       	movw	r14, r24
    218c:	fa 01       	movw	r30, r20
    218e:	cb 01       	movw	r24, r22
    2190:	19 a2       	std	Y+33, r1	; 0x21
    2192:	22 30       	cpi	r18, 0x02	; 2
    2194:	08 f4       	brcc	.+2      	; 0x2198 <_ZN5Print11printNumberEmh+0x32>
    2196:	2a e0       	ldi	r18, 0x0A	; 10
    2198:	8e 01       	movw	r16, r28
    219a:	0f 5d       	subi	r16, 0xDF	; 223
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	82 2e       	mov	r8, r18
    21a0:	91 2c       	mov	r9, r1
    21a2:	a1 2c       	mov	r10, r1
    21a4:	b1 2c       	mov	r11, r1
    21a6:	bf 01       	movw	r22, r30
    21a8:	a5 01       	movw	r20, r10
    21aa:	94 01       	movw	r18, r8
    21ac:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodsi4>
    21b0:	f9 01       	movw	r30, r18
    21b2:	ca 01       	movw	r24, r20
    21b4:	01 50       	subi	r16, 0x01	; 1
    21b6:	11 09       	sbc	r17, r1
    21b8:	6a 30       	cpi	r22, 0x0A	; 10
    21ba:	10 f4       	brcc	.+4      	; 0x21c0 <_ZN5Print11printNumberEmh+0x5a>
    21bc:	60 5d       	subi	r22, 0xD0	; 208
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <_ZN5Print11printNumberEmh+0x5c>
    21c0:	69 5c       	subi	r22, 0xC9	; 201
    21c2:	d8 01       	movw	r26, r16
    21c4:	6c 93       	st	X, r22
    21c6:	23 2b       	or	r18, r19
    21c8:	24 2b       	or	r18, r20
    21ca:	25 2b       	or	r18, r21
    21cc:	61 f7       	brne	.-40     	; 0x21a6 <_ZN5Print11printNumberEmh+0x40>
    21ce:	b8 01       	movw	r22, r16
    21d0:	c7 01       	movw	r24, r14
    21d2:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_ZN5Print5writeEPKc>
    21d6:	a1 96       	adiw	r28, 0x21	; 33
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	bf 90       	pop	r11
    21f0:	af 90       	pop	r10
    21f2:	9f 90       	pop	r9
    21f4:	8f 90       	pop	r8
    21f6:	08 95       	ret

000021f8 <_ZN5Print5printEmi>:
    21f8:	21 15       	cp	r18, r1
    21fa:	31 05       	cpc	r19, r1
    21fc:	41 f4       	brne	.+16     	; 0x220e <_ZN5Print5printEmi+0x16>
    21fe:	dc 01       	movw	r26, r24
    2200:	ed 91       	ld	r30, X+
    2202:	fc 91       	ld	r31, X
    2204:	01 90       	ld	r0, Z+
    2206:	f0 81       	ld	r31, Z
    2208:	e0 2d       	mov	r30, r0
    220a:	64 2f       	mov	r22, r20
    220c:	09 94       	ijmp
    220e:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <_ZN5Print11printNumberEmh>

00002212 <_ZN5Print5printEji>:
    2212:	9a 01       	movw	r18, r20
    2214:	ab 01       	movw	r20, r22
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_ZN5Print5printEmi>

0000221e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    221e:	7f 92       	push	r7
    2220:	8f 92       	push	r8
    2222:	9f 92       	push	r9
    2224:	af 92       	push	r10
    2226:	bf 92       	push	r11
    2228:	cf 92       	push	r12
    222a:	df 92       	push	r13
    222c:	ef 92       	push	r14
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	8c 01       	movw	r16, r24
    223a:	6a 01       	movw	r12, r20
    223c:	7b 01       	movw	r14, r22
    223e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2240:	9a 01       	movw	r18, r20
    2242:	ab 01       	movw	r20, r22
    2244:	c7 01       	movw	r24, r14
    2246:	b6 01       	movw	r22, r12
    2248:	0e 94 bc 28 	call	0x5178	; 0x5178 <__unordsf2>
    224c:	88 23       	and	r24, r24
    224e:	19 f0       	breq	.+6      	; 0x2256 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2250:	65 e9       	ldi	r22, 0x95	; 149
    2252:	71 e0       	ldi	r23, 0x01	; 1
    2254:	27 c0       	rjmp	.+78     	; 0x22a4 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2256:	46 01       	movw	r8, r12
    2258:	57 01       	movw	r10, r14
    225a:	e8 94       	clt
    225c:	b7 f8       	bld	r11, 7
    225e:	2f ef       	ldi	r18, 0xFF	; 255
    2260:	3f ef       	ldi	r19, 0xFF	; 255
    2262:	4f e7       	ldi	r20, 0x7F	; 127
    2264:	5f e7       	ldi	r21, 0x7F	; 127
    2266:	c5 01       	movw	r24, r10
    2268:	b4 01       	movw	r22, r8
    226a:	0e 94 bc 28 	call	0x5178	; 0x5178 <__unordsf2>
    226e:	81 11       	cpse	r24, r1
    2270:	0d c0       	rjmp	.+26     	; 0x228c <_ZN5Print10printFloatEdh+0x6e>
    2272:	2f ef       	ldi	r18, 0xFF	; 255
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	5f e7       	ldi	r21, 0x7F	; 127
    227a:	c5 01       	movw	r24, r10
    227c:	b4 01       	movw	r22, r8
    227e:	0e 94 4a 28 	call	0x5094	; 0x5094 <__cmpsf2>
    2282:	18 16       	cp	r1, r24
    2284:	1c f4       	brge	.+6      	; 0x228c <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2286:	69 e9       	ldi	r22, 0x99	; 153
    2288:	71 e0       	ldi	r23, 0x01	; 1
    228a:	0c c0       	rjmp	.+24     	; 0x22a4 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	3f ef       	ldi	r19, 0xFF	; 255
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	5f e4       	ldi	r21, 0x4F	; 79
    2294:	c7 01       	movw	r24, r14
    2296:	b6 01       	movw	r22, r12
    2298:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__gesf2>
    229c:	18 16       	cp	r1, r24
    229e:	94 f4       	brge	.+36     	; 0x22c4 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    22a0:	6d e9       	ldi	r22, 0x9D	; 157
    22a2:	71 e0       	ldi	r23, 0x01	; 1
    22a4:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ff 90       	pop	r15
    22b0:	ef 90       	pop	r14
    22b2:	df 90       	pop	r13
    22b4:	cf 90       	pop	r12
    22b6:	bf 90       	pop	r11
    22b8:	af 90       	pop	r10
    22ba:	9f 90       	pop	r9
    22bc:	8f 90       	pop	r8
    22be:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    22c0:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    22c4:	2f ef       	ldi	r18, 0xFF	; 255
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	5f ec       	ldi	r21, 0xCF	; 207
    22cc:	c7 01       	movw	r24, r14
    22ce:	b6 01       	movw	r22, r12
    22d0:	0e 94 4a 28 	call	0x5094	; 0x5094 <__cmpsf2>
    22d4:	87 fd       	sbrc	r24, 7
    22d6:	e4 cf       	rjmp	.-56     	; 0x22a0 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	a9 01       	movw	r20, r18
    22de:	c7 01       	movw	r24, r14
    22e0:	b6 01       	movw	r22, r12
    22e2:	0e 94 4a 28 	call	0x5094	; 0x5094 <__cmpsf2>
    22e6:	87 ff       	sbrs	r24, 7
    22e8:	0a c0       	rjmp	.+20     	; 0x22fe <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    22ea:	6d e2       	ldi	r22, 0x2D	; 45
    22ec:	c8 01       	movw	r24, r16
    22ee:	0e 94 96 10 	call	0x212c	; 0x212c <_ZN5Print5printEc>
    22f2:	ec 01       	movw	r28, r24
     number = -number;
    22f4:	f7 fa       	bst	r15, 7
    22f6:	f0 94       	com	r15
    22f8:	f7 f8       	bld	r15, 7
    22fa:	f0 94       	com	r15
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    22fe:	c0 e0       	ldi	r28, 0x00	; 0
    2300:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2302:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    230c:	7b 14       	cp	r7, r11
    230e:	41 f0       	breq	.+16     	; 0x2320 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    231c:	b3 94       	inc	r11
    231e:	f6 cf       	rjmp	.-20     	; 0x230c <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2320:	a7 01       	movw	r20, r14
    2322:	96 01       	movw	r18, r12
    2324:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    2328:	6b 01       	movw	r12, r22
    232a:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    232c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fixunssfsi>
    2330:	4b 01       	movw	r8, r22
    2332:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2334:	2a e0       	ldi	r18, 0x0A	; 10
    2336:	ab 01       	movw	r20, r22
    2338:	bc 01       	movw	r22, r24
    233a:	c8 01       	movw	r24, r16
    233c:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2340:	c8 0f       	add	r28, r24
    2342:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2344:	77 20       	and	r7, r7
    2346:	b9 f1       	breq	.+110    	; 0x23b6 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2348:	c5 01       	movw	r24, r10
    234a:	b4 01       	movw	r22, r8
    234c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
    2350:	9b 01       	movw	r18, r22
    2352:	ac 01       	movw	r20, r24
    2354:	c7 01       	movw	r24, r14
    2356:	b6 01       	movw	r22, r12
    2358:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    235c:	6b 01       	movw	r12, r22
    235e:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2360:	6e e2       	ldi	r22, 0x2E	; 46
    2362:	c8 01       	movw	r24, r16
    2364:	0e 94 96 10 	call	0x212c	; 0x212c <_ZN5Print5printEc>
    2368:	c8 0f       	add	r28, r24
    236a:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	c7 01       	movw	r24, r14
    2376:	b6 01       	movw	r22, r12
    2378:	0e 94 4f 28 	call	0x509e	; 0x509e <__mulsf3>
    237c:	4b 01       	movw	r8, r22
    237e:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2380:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fixunssfsi>
    2384:	6b 01       	movw	r12, r22
    2386:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2388:	4a e0       	ldi	r20, 0x0A	; 10
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	c8 01       	movw	r24, r16
    238e:	0e 94 09 11 	call	0x2212	; 0x2212 <_ZN5Print5printEji>
    2392:	c8 0f       	add	r28, r24
    2394:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2396:	b6 01       	movw	r22, r12
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
    23a0:	9b 01       	movw	r18, r22
    23a2:	ac 01       	movw	r20, r24
    23a4:	c5 01       	movw	r24, r10
    23a6:	b4 01       	movw	r22, r8
    23a8:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    23ac:	6b 01       	movw	r12, r22
    23ae:	7c 01       	movw	r14, r24
    23b0:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    23b2:	71 10       	cpse	r7, r1
    23b4:	db cf       	rjmp	.-74     	; 0x236c <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    23b6:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	ff 90       	pop	r15
    23c2:	ef 90       	pop	r14
    23c4:	df 90       	pop	r13
    23c6:	cf 90       	pop	r12
    23c8:	bf 90       	pop	r11
    23ca:	af 90       	pop	r10
    23cc:	9f 90       	pop	r9
    23ce:	8f 90       	pop	r8
    23d0:	7f 90       	pop	r7
    23d2:	08 95       	ret

000023d4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    23d4:	0c 94 0f 11 	jmp	0x221e	; 0x221e <_ZN5Print10printFloatEdh>

000023d8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    23d8:	1f 92       	push	r1
    23da:	0f 92       	push	r0
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	0f 92       	push	r0
    23e0:	11 24       	eor	r1, r1
    23e2:	2f 93       	push	r18
    23e4:	3f 93       	push	r19
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <timer0_millis>
    23f2:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <timer0_millis+0x1>
    23f6:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <timer0_millis+0x2>
    23fa:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <timer0_millis+0x3>
    23fe:	30 91 0f 04 	lds	r19, 0x040F	; 0x80040f <timer0_fract>
    2402:	23 e0       	ldi	r18, 0x03	; 3
    2404:	23 0f       	add	r18, r19
    2406:	2d 37       	cpi	r18, 0x7D	; 125
    2408:	20 f4       	brcc	.+8      	; 0x2412 <__vector_16+0x3a>
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	a1 1d       	adc	r26, r1
    240e:	b1 1d       	adc	r27, r1
    2410:	05 c0       	rjmp	.+10     	; 0x241c <__vector_16+0x44>
    2412:	26 e8       	ldi	r18, 0x86	; 134
    2414:	23 0f       	add	r18, r19
    2416:	02 96       	adiw	r24, 0x02	; 2
    2418:	a1 1d       	adc	r26, r1
    241a:	b1 1d       	adc	r27, r1
    241c:	20 93 0f 04 	sts	0x040F, r18	; 0x80040f <timer0_fract>
    2420:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <timer0_millis>
    2424:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <timer0_millis+0x1>
    2428:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <timer0_millis+0x2>
    242c:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <timer0_millis+0x3>
    2430:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <timer0_overflow_count>
    2434:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <timer0_overflow_count+0x1>
    2438:	a0 91 16 04 	lds	r26, 0x0416	; 0x800416 <timer0_overflow_count+0x2>
    243c:	b0 91 17 04 	lds	r27, 0x0417	; 0x800417 <timer0_overflow_count+0x3>
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	a1 1d       	adc	r26, r1
    2444:	b1 1d       	adc	r27, r1
    2446:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <timer0_overflow_count>
    244a:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <timer0_overflow_count+0x1>
    244e:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <timer0_overflow_count+0x2>
    2452:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <timer0_overflow_count+0x3>
    2456:	bf 91       	pop	r27
    2458:	af 91       	pop	r26
    245a:	9f 91       	pop	r25
    245c:	8f 91       	pop	r24
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	0f 90       	pop	r0
    2468:	1f 90       	pop	r1
    246a:	18 95       	reti

0000246c <micros>:
    246c:	3f b7       	in	r19, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <timer0_overflow_count>
    2474:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <timer0_overflow_count+0x1>
    2478:	a0 91 16 04 	lds	r26, 0x0416	; 0x800416 <timer0_overflow_count+0x2>
    247c:	b0 91 17 04 	lds	r27, 0x0417	; 0x800417 <timer0_overflow_count+0x3>
    2480:	26 b5       	in	r18, 0x26	; 38
    2482:	a8 9b       	sbis	0x15, 0	; 21
    2484:	05 c0       	rjmp	.+10     	; 0x2490 <micros+0x24>
    2486:	2f 3f       	cpi	r18, 0xFF	; 255
    2488:	19 f0       	breq	.+6      	; 0x2490 <micros+0x24>
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	a1 1d       	adc	r26, r1
    248e:	b1 1d       	adc	r27, r1
    2490:	3f bf       	out	0x3f, r19	; 63
    2492:	ba 2f       	mov	r27, r26
    2494:	a9 2f       	mov	r26, r25
    2496:	98 2f       	mov	r25, r24
    2498:	88 27       	eor	r24, r24
    249a:	82 0f       	add	r24, r18
    249c:	91 1d       	adc	r25, r1
    249e:	a1 1d       	adc	r26, r1
    24a0:	b1 1d       	adc	r27, r1
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	42 e0       	ldi	r20, 0x02	; 2
    24a8:	66 0f       	add	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	88 1f       	adc	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	4a 95       	dec	r20
    24b2:	d1 f7       	brne	.-12     	; 0x24a8 <micros+0x3c>
    24b4:	08 95       	ret

000024b6 <delay>:
    24b6:	8f 92       	push	r8
    24b8:	9f 92       	push	r9
    24ba:	af 92       	push	r10
    24bc:	bf 92       	push	r11
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	6b 01       	movw	r12, r22
    24c8:	7c 01       	movw	r14, r24
    24ca:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    24ce:	4b 01       	movw	r8, r22
    24d0:	5c 01       	movw	r10, r24
    24d2:	c1 14       	cp	r12, r1
    24d4:	d1 04       	cpc	r13, r1
    24d6:	e1 04       	cpc	r14, r1
    24d8:	f1 04       	cpc	r15, r1
    24da:	01 f1       	breq	.+64     	; 0x251c <delay+0x66>
    24dc:	0e 94 55 23 	call	0x46aa	; 0x46aa <yield>
    24e0:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	88 19       	sub	r24, r8
    24ea:	99 09       	sbc	r25, r9
    24ec:	aa 09       	sbc	r26, r10
    24ee:	bb 09       	sbc	r27, r11
    24f0:	88 3e       	cpi	r24, 0xE8	; 232
    24f2:	93 40       	sbci	r25, 0x03	; 3
    24f4:	a1 05       	cpc	r26, r1
    24f6:	b1 05       	cpc	r27, r1
    24f8:	60 f3       	brcs	.-40     	; 0x24d2 <delay+0x1c>
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	c2 1a       	sub	r12, r18
    24fe:	d1 08       	sbc	r13, r1
    2500:	e1 08       	sbc	r14, r1
    2502:	f1 08       	sbc	r15, r1
    2504:	88 ee       	ldi	r24, 0xE8	; 232
    2506:	88 0e       	add	r8, r24
    2508:	83 e0       	ldi	r24, 0x03	; 3
    250a:	98 1e       	adc	r9, r24
    250c:	a1 1c       	adc	r10, r1
    250e:	b1 1c       	adc	r11, r1
    2510:	c1 14       	cp	r12, r1
    2512:	d1 04       	cpc	r13, r1
    2514:	e1 04       	cpc	r14, r1
    2516:	f1 04       	cpc	r15, r1
    2518:	19 f7       	brne	.-58     	; 0x24e0 <delay+0x2a>
    251a:	db cf       	rjmp	.-74     	; 0x24d2 <delay+0x1c>
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	df 90       	pop	r13
    2522:	cf 90       	pop	r12
    2524:	bf 90       	pop	r11
    2526:	af 90       	pop	r10
    2528:	9f 90       	pop	r9
    252a:	8f 90       	pop	r8
    252c:	08 95       	ret

0000252e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    252e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2530:	84 b5       	in	r24, 0x24	; 36
    2532:	82 60       	ori	r24, 0x02	; 2
    2534:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2536:	84 b5       	in	r24, 0x24	; 36
    2538:	81 60       	ori	r24, 0x01	; 1
    253a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    253c:	85 b5       	in	r24, 0x25	; 37
    253e:	82 60       	ori	r24, 0x02	; 2
    2540:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2542:	85 b5       	in	r24, 0x25	; 37
    2544:	81 60       	ori	r24, 0x01	; 1
    2546:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2548:	ee e6       	ldi	r30, 0x6E	; 110
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	81 60       	ori	r24, 0x01	; 1
    2550:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2552:	e1 e8       	ldi	r30, 0x81	; 129
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2558:	80 81       	ld	r24, Z
    255a:	82 60       	ori	r24, 0x02	; 2
    255c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    255e:	80 81       	ld	r24, Z
    2560:	81 60       	ori	r24, 0x01	; 1
    2562:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2564:	e0 e8       	ldi	r30, 0x80	; 128
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	81 60       	ori	r24, 0x01	; 1
    256c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    256e:	e1 eb       	ldi	r30, 0xB1	; 177
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	84 60       	ori	r24, 0x04	; 4
    2576:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2578:	e0 eb       	ldi	r30, 0xB0	; 176
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	81 60       	ori	r24, 0x01	; 1
    2580:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2582:	ea e7       	ldi	r30, 0x7A	; 122
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	84 60       	ori	r24, 0x04	; 4
    258a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    258c:	80 81       	ld	r24, Z
    258e:	82 60       	ori	r24, 0x02	; 2
    2590:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2592:	80 81       	ld	r24, Z
    2594:	81 60       	ori	r24, 0x01	; 1
    2596:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2598:	80 81       	ld	r24, Z
    259a:	80 68       	ori	r24, 0x80	; 128
    259c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    259e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    25a2:	08 95       	ret

000025a4 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    25a4:	4f 92       	push	r4
    25a6:	5f 92       	push	r5
    25a8:	6f 92       	push	r6
    25aa:	7f 92       	push	r7
    25ac:	af 92       	push	r10
    25ae:	bf 92       	push	r11
    25b0:	cf 92       	push	r12
    25b2:	df 92       	push	r13
    25b4:	ef 92       	push	r14
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	29 01       	movw	r4, r18
    25c6:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    25c8:	9b 01       	movw	r18, r22
    25ca:	ac 01       	movw	r20, r24
    25cc:	24 19       	sub	r18, r4
    25ce:	35 09       	sbc	r19, r5
    25d0:	46 09       	sbc	r20, r6
    25d2:	57 09       	sbc	r21, r7
    25d4:	89 89       	ldd	r24, Y+17	; 0x11
    25d6:	9a 89       	ldd	r25, Y+18	; 0x12
    25d8:	ab 89       	ldd	r26, Y+19	; 0x13
    25da:	bc 89       	ldd	r27, Y+20	; 0x14
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	6a 19       	sub	r22, r10
    25e2:	7b 09       	sbc	r23, r11
    25e4:	8c 09       	sbc	r24, r12
    25e6:	9d 09       	sbc	r25, r13
    25e8:	0e 94 c1 28 	call	0x5182	; 0x5182 <__mulsi3>
    25ec:	a8 01       	movw	r20, r16
    25ee:	97 01       	movw	r18, r14
    25f0:	24 19       	sub	r18, r4
    25f2:	35 09       	sbc	r19, r5
    25f4:	46 09       	sbc	r20, r6
    25f6:	57 09       	sbc	r21, r7
    25f8:	0e 94 07 29 	call	0x520e	; 0x520e <__divmodsi4>
    25fc:	ca 01       	movw	r24, r20
    25fe:	b9 01       	movw	r22, r18
    2600:	6a 0d       	add	r22, r10
    2602:	7b 1d       	adc	r23, r11
    2604:	8c 1d       	adc	r24, r12
    2606:	9d 1d       	adc	r25, r13
}
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	ff 90       	pop	r15
    2612:	ef 90       	pop	r14
    2614:	df 90       	pop	r13
    2616:	cf 90       	pop	r12
    2618:	bf 90       	pop	r11
    261a:	af 90       	pop	r10
    261c:	7f 90       	pop	r7
    261e:	6f 90       	pop	r6
    2620:	5f 90       	pop	r5
    2622:	4f 90       	pop	r4
    2624:	08 95       	ret

00002626 <_ZNK6String14StringIfHelperEv>:
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
}
    2626:	08 95       	ret

00002628 <_ZN6StringD1Ev>:
    2628:	fc 01       	movw	r30, r24
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	11 f0       	breq	.+4      	; 0x2636 <_ZN6StringD1Ev+0xe>
    2632:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <free>
    2636:	08 95       	ret

00002638 <_ZN6String10invalidateEv>:
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	ec 01       	movw	r28, r24
    263e:	88 81       	ld	r24, Y
    2640:	99 81       	ldd	r25, Y+1	; 0x01
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	11 f0       	breq	.+4      	; 0x264a <_ZN6String10invalidateEv+0x12>
    2646:	0e 94 12 2a 	call	0x5424	; 0x5424 <free>
    264a:	19 82       	std	Y+1, r1	; 0x01
    264c:	18 82       	st	Y, r1
    264e:	1d 82       	std	Y+5, r1	; 0x05
    2650:	1c 82       	std	Y+4, r1	; 0x04
    2652:	1b 82       	std	Y+3, r1	; 0x03
    2654:	1a 82       	std	Y+2, r1	; 0x02
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	08 95       	ret

0000265c <_ZN6String12changeBufferEj>:
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	ec 01       	movw	r28, r24
    2666:	8b 01       	movw	r16, r22
    2668:	6f 5f       	subi	r22, 0xFF	; 255
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	88 81       	ld	r24, Y
    266e:	99 81       	ldd	r25, Y+1	; 0x01
    2670:	0e 94 9b 2a 	call	0x5536	; 0x5536 <realloc>
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	31 f0       	breq	.+12     	; 0x2684 <_ZN6String12changeBufferEj+0x28>
    2678:	99 83       	std	Y+1, r25	; 0x01
    267a:	88 83       	st	Y, r24
    267c:	1b 83       	std	Y+3, r17	; 0x03
    267e:	0a 83       	std	Y+2, r16	; 0x02
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	01 c0       	rjmp	.+2      	; 0x2686 <_ZN6String12changeBufferEj+0x2a>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <_ZN6String7reserveEj>:
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	ec 01       	movw	r28, r24
    2696:	88 81       	ld	r24, Y
    2698:	99 81       	ldd	r25, Y+1	; 0x01
    269a:	89 2b       	or	r24, r25
    269c:	29 f0       	breq	.+10     	; 0x26a8 <_ZN6String7reserveEj+0x18>
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	86 17       	cp	r24, r22
    26a4:	97 07       	cpc	r25, r23
    26a6:	60 f4       	brcc	.+24     	; 0x26c0 <_ZN6String7reserveEj+0x30>
    26a8:	ce 01       	movw	r24, r28
    26aa:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZN6String12changeBufferEj>
    26ae:	88 23       	and	r24, r24
    26b0:	41 f0       	breq	.+16     	; 0x26c2 <_ZN6String7reserveEj+0x32>
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	9d 81       	ldd	r25, Y+5	; 0x05
    26b6:	89 2b       	or	r24, r25
    26b8:	19 f4       	brne	.+6      	; 0x26c0 <_ZN6String7reserveEj+0x30>
    26ba:	e8 81       	ld	r30, Y
    26bc:	f9 81       	ldd	r31, Y+1	; 0x01
    26be:	10 82       	st	Z, r1
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <_ZN6String4copyEPKcj>:
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	ec 01       	movw	r28, r24
    26d6:	7b 01       	movw	r14, r22
    26d8:	8a 01       	movw	r16, r20
    26da:	ba 01       	movw	r22, r20
    26dc:	0e 94 48 13 	call	0x2690	; 0x2690 <_ZN6String7reserveEj>
    26e0:	81 11       	cpse	r24, r1
    26e2:	04 c0       	rjmp	.+8      	; 0x26ec <_ZN6String4copyEPKcj+0x24>
    26e4:	ce 01       	movw	r24, r28
    26e6:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN6String10invalidateEv>
    26ea:	07 c0       	rjmp	.+14     	; 0x26fa <_ZN6String4copyEPKcj+0x32>
    26ec:	1d 83       	std	Y+5, r17	; 0x05
    26ee:	0c 83       	std	Y+4, r16	; 0x04
    26f0:	b7 01       	movw	r22, r14
    26f2:	88 81       	ld	r24, Y
    26f4:	99 81       	ldd	r25, Y+1	; 0x01
    26f6:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strcpy>
    26fa:	ce 01       	movw	r24, r28
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	08 95       	ret

0000270a <_ZN6StringC1EPKc>:
    270a:	fc 01       	movw	r30, r24
    270c:	11 82       	std	Z+1, r1	; 0x01
    270e:	10 82       	st	Z, r1
    2710:	13 82       	std	Z+3, r1	; 0x03
    2712:	12 82       	std	Z+2, r1	; 0x02
    2714:	15 82       	std	Z+5, r1	; 0x05
    2716:	14 82       	std	Z+4, r1	; 0x04
    2718:	61 15       	cp	r22, r1
    271a:	71 05       	cpc	r23, r1
    271c:	51 f0       	breq	.+20     	; 0x2732 <_ZN6StringC1EPKc+0x28>
    271e:	fb 01       	movw	r30, r22
    2720:	01 90       	ld	r0, Z+
    2722:	00 20       	and	r0, r0
    2724:	e9 f7       	brne	.-6      	; 0x2720 <_ZN6StringC1EPKc+0x16>
    2726:	31 97       	sbiw	r30, 0x01	; 1
    2728:	af 01       	movw	r20, r30
    272a:	46 1b       	sub	r20, r22
    272c:	57 0b       	sbc	r21, r23
    272e:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <_ZN6String4copyEPKcj>
    2732:	08 95       	ret

00002734 <_ZN6String4moveERS_>:
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	8c 01       	movw	r16, r24
    273e:	eb 01       	movw	r28, r22
    2740:	fc 01       	movw	r30, r24
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	d1 f0       	breq	.+52     	; 0x277e <_ZN6String4moveERS_+0x4a>
    274a:	68 81       	ld	r22, Y
    274c:	79 81       	ldd	r23, Y+1	; 0x01
    274e:	61 15       	cp	r22, r1
    2750:	71 05       	cpc	r23, r1
    2752:	99 f0       	breq	.+38     	; 0x277a <_ZN6String4moveERS_+0x46>
    2754:	23 e1       	ldi	r18, 0x13	; 19
    2756:	33 e1       	ldi	r19, 0x13	; 19
    2758:	23 2b       	or	r18, r19
    275a:	79 f0       	breq	.+30     	; 0x277a <_ZN6String4moveERS_+0x46>
    275c:	42 81       	ldd	r20, Z+2	; 0x02
    275e:	53 81       	ldd	r21, Z+3	; 0x03
    2760:	2c 81       	ldd	r18, Y+4	; 0x04
    2762:	3d 81       	ldd	r19, Y+5	; 0x05
    2764:	42 17       	cp	r20, r18
    2766:	53 07       	cpc	r21, r19
    2768:	40 f0       	brcs	.+16     	; 0x277a <_ZN6String4moveERS_+0x46>
    276a:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strcpy>
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	9d 81       	ldd	r25, Y+5	; 0x05
    2772:	f8 01       	movw	r30, r16
    2774:	95 83       	std	Z+5, r25	; 0x05
    2776:	84 83       	std	Z+4, r24	; 0x04
    2778:	13 c0       	rjmp	.+38     	; 0x27a0 <_ZN6String4moveERS_+0x6c>
    277a:	0e 94 12 2a 	call	0x5424	; 0x5424 <free>
    277e:	88 81       	ld	r24, Y
    2780:	99 81       	ldd	r25, Y+1	; 0x01
    2782:	f8 01       	movw	r30, r16
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	80 83       	st	Z, r24
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	9b 81       	ldd	r25, Y+3	; 0x03
    278c:	93 83       	std	Z+3, r25	; 0x03
    278e:	82 83       	std	Z+2, r24	; 0x02
    2790:	8c 81       	ldd	r24, Y+4	; 0x04
    2792:	9d 81       	ldd	r25, Y+5	; 0x05
    2794:	95 83       	std	Z+5, r25	; 0x05
    2796:	84 83       	std	Z+4, r24	; 0x04
    2798:	19 82       	std	Y+1, r1	; 0x01
    279a:	18 82       	st	Y, r1
    279c:	1b 82       	std	Y+3, r1	; 0x03
    279e:	1a 82       	std	Y+2, r1	; 0x02
    27a0:	1d 82       	std	Y+5, r1	; 0x05
    27a2:	1c 82       	std	Y+4, r1	; 0x04
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	08 95       	ret

000027ae <_ZN6StringaSERKS_>:
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	ec 01       	movw	r28, r24
    27b4:	fb 01       	movw	r30, r22
    27b6:	86 17       	cp	r24, r22
    27b8:	97 07       	cpc	r25, r23
    27ba:	61 f0       	breq	.+24     	; 0x27d4 <_ZN6StringaSERKS_+0x26>
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	61 15       	cp	r22, r1
    27c2:	71 05       	cpc	r23, r1
    27c4:	29 f0       	breq	.+10     	; 0x27d0 <_ZN6StringaSERKS_+0x22>
    27c6:	44 81       	ldd	r20, Z+4	; 0x04
    27c8:	55 81       	ldd	r21, Z+5	; 0x05
    27ca:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN6String4copyEPKcj>
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <_ZN6StringaSERKS_+0x26>
    27d0:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN6String10invalidateEv>
    27d4:	ce 01       	movw	r24, r28
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	08 95       	ret

000027dc <_ZN6StringC1ERKS_>:
    27dc:	fc 01       	movw	r30, r24
    27de:	11 82       	std	Z+1, r1	; 0x01
    27e0:	10 82       	st	Z, r1
    27e2:	13 82       	std	Z+3, r1	; 0x03
    27e4:	12 82       	std	Z+2, r1	; 0x02
    27e6:	15 82       	std	Z+5, r1	; 0x05
    27e8:	14 82       	std	Z+4, r1	; 0x04
    27ea:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <_ZN6StringaSERKS_>

000027ee <_ZN6StringaSEOS_>:
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ec 01       	movw	r28, r24
    27f4:	86 17       	cp	r24, r22
    27f6:	97 07       	cpc	r25, r23
    27f8:	11 f0       	breq	.+4      	; 0x27fe <_ZN6StringaSEOS_+0x10>
    27fa:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN6String4moveERS_>
    27fe:	ce 01       	movw	r24, r28
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	08 95       	ret

00002806 <_ZN6StringaSEPKc>:
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	ec 01       	movw	r28, r24
    280c:	61 15       	cp	r22, r1
    280e:	71 05       	cpc	r23, r1
    2810:	59 f0       	breq	.+22     	; 0x2828 <_ZN6StringaSEPKc+0x22>
    2812:	fb 01       	movw	r30, r22
    2814:	01 90       	ld	r0, Z+
    2816:	00 20       	and	r0, r0
    2818:	e9 f7       	brne	.-6      	; 0x2814 <_ZN6StringaSEPKc+0xe>
    281a:	31 97       	sbiw	r30, 0x01	; 1
    281c:	af 01       	movw	r20, r30
    281e:	46 1b       	sub	r20, r22
    2820:	57 0b       	sbc	r21, r23
    2822:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN6String4copyEPKcj>
    2826:	02 c0       	rjmp	.+4      	; 0x282c <_ZN6StringaSEPKc+0x26>
    2828:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN6String10invalidateEv>
    282c:	ce 01       	movw	r24, r28
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	08 95       	ret

00002834 <_ZN6StringC1Efh>:
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	a1 97       	sbiw	r28, 0x21	; 33
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	7c 01       	movw	r14, r24
    2852:	cb 01       	movw	r24, r22
    2854:	ba 01       	movw	r22, r20
    2856:	f7 01       	movw	r30, r14
    2858:	11 82       	std	Z+1, r1	; 0x01
    285a:	10 82       	st	Z, r1
    285c:	13 82       	std	Z+3, r1	; 0x03
    285e:	12 82       	std	Z+2, r1	; 0x02
    2860:	15 82       	std	Z+5, r1	; 0x05
    2862:	14 82       	std	Z+4, r1	; 0x04
    2864:	42 e0       	ldi	r20, 0x02	; 2
    2866:	42 0f       	add	r20, r18
    2868:	8e 01       	movw	r16, r28
    286a:	0f 5f       	subi	r16, 0xFF	; 255
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <dtostrf>
    2872:	bc 01       	movw	r22, r24
    2874:	c7 01       	movw	r24, r14
    2876:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN6StringaSEPKc>
    287a:	a1 96       	adiw	r28, 0x21	; 33
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	ff 90       	pop	r15
    2890:	ef 90       	pop	r14
    2892:	08 95       	ret

00002894 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    2894:	fc 01       	movw	r30, r24
    2896:	24 81       	ldd	r18, Z+4	; 0x04
    2898:	35 81       	ldd	r19, Z+5	; 0x05
    289a:	62 17       	cp	r22, r18
    289c:	73 07       	cpc	r23, r19
    289e:	48 f4       	brcc	.+18     	; 0x28b2 <_ZNK6StringixEj+0x1e>
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	29 f0       	breq	.+10     	; 0x28b2 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    28a8:	fc 01       	movw	r30, r24
    28aa:	e6 0f       	add	r30, r22
    28ac:	f7 1f       	adc	r31, r23
    28ae:	80 81       	ld	r24, Z
    28b0:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    28b2:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    28b4:	08 95       	ret

000028b6 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    28b6:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <_ZNK6StringixEj>

000028ba <_ZN7AMS5812C1ER7TwoWirehNS_10TransducerE>:
}

/* returns the temperature value, C */
float AMS5812::getTemperature_C(){
  return _data.Temp_C;
}
    28ba:	4f 92       	push	r4
    28bc:	5f 92       	push	r5
    28be:	6f 92       	push	r6
    28c0:	7f 92       	push	r7
    28c2:	8f 92       	push	r8
    28c4:	9f 92       	push	r9
    28c6:	af 92       	push	r10
    28c8:	bf 92       	push	r11
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	fc 01       	movw	r30, r24
    28dc:	5b 01       	movw	r10, r22
    28de:	94 2e       	mov	r9, r20
    28e0:	82 2e       	mov	r8, r18
    28e2:	8a e0       	ldi	r24, 0x0A	; 10
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	93 8b       	std	Z+19, r25	; 0x13
    28e8:	82 8b       	std	Z+18, r24	; 0x12
    28ea:	80 e8       	ldi	r24, 0x80	; 128
    28ec:	9a e1       	ldi	r25, 0x1A	; 26
    28ee:	a6 e0       	ldi	r26, 0x06	; 6
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	82 a3       	std	Z+34, r24	; 0x22
    28f4:	93 a3       	std	Z+35, r25	; 0x23
    28f6:	a4 a3       	std	Z+36, r26	; 0x24
    28f8:	b5 a3       	std	Z+37, r27	; 0x25
    28fa:	80 e1       	ldi	r24, 0x10	; 16
    28fc:	96 e7       	ldi	r25, 0x76	; 118
    28fe:	a7 ed       	ldi	r26, 0xD7	; 215
    2900:	b5 e4       	ldi	r27, 0x45	; 69
    2902:	86 a3       	std	Z+38, r24	; 0x26
    2904:	97 a3       	std	Z+39, r25	; 0x27
    2906:	a0 a7       	std	Z+40, r26	; 0x28
    2908:	b1 a7       	std	Z+41, r27	; 0x29
    290a:	2d ec       	ldi	r18, 0xCD	; 205
    290c:	3c e0       	ldi	r19, 0x0C	; 12
    290e:	33 a7       	std	Z+43, r19	; 0x2b
    2910:	22 a7       	std	Z+42, r18	; 0x2a
    2912:	83 e3       	ldi	r24, 0x33	; 51
    2914:	93 e7       	ldi	r25, 0x73	; 115
    2916:	95 a7       	std	Z+45, r25	; 0x2d
    2918:	84 a7       	std	Z+44, r24	; 0x2c
    291a:	37 a7       	std	Z+47, r19	; 0x2f
    291c:	26 a7       	std	Z+46, r18	; 0x2e
    291e:	91 ab       	std	Z+49, r25	; 0x31
    2920:	80 ab       	std	Z+48, r24	; 0x30
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a8 ec       	ldi	r26, 0xC8	; 200
    2928:	b1 ec       	ldi	r27, 0xC1	; 193
    292a:	82 ab       	std	Z+50, r24	; 0x32
    292c:	93 ab       	std	Z+51, r25	; 0x33
    292e:	a4 ab       	std	Z+52, r26	; 0x34
    2930:	b5 ab       	std	Z+53, r27	; 0x35
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	aa ea       	ldi	r26, 0xAA	; 170
    2938:	b2 e4       	ldi	r27, 0x42	; 66
    293a:	86 ab       	std	Z+54, r24	; 0x36
    293c:	97 ab       	std	Z+55, r25	; 0x37
    293e:	a0 af       	std	Z+56, r26	; 0x38
    2940:	b1 af       	std	Z+57, r27	; 0x39
    2942:	12 ae       	std	Z+58, r1	; 0x3a
    2944:	13 ae       	std	Z+59, r1	; 0x3b
    2946:	14 ae       	std	Z+60, r1	; 0x3c
    2948:	15 ae       	std	Z+61, r1	; 0x3d
    294a:	df 01       	movw	r26, r30
    294c:	de 96       	adiw	r26, 0x3e	; 62
    294e:	4a e9       	ldi	r20, 0x9A	; 154
    2950:	59 e9       	ldi	r21, 0x99	; 153
    2952:	69 e9       	ldi	r22, 0x99	; 153
    2954:	7d e3       	ldi	r23, 0x3D	; 61
    2956:	4d 93       	st	X+, r20
    2958:	5d 93       	st	X+, r21
    295a:	6d 93       	st	X+, r22
    295c:	7c 93       	st	X, r23
    295e:	13 97       	sbiw	r26, 0x03	; 3
    2960:	14 96       	adiw	r26, 0x04	; 4
    2962:	1d 92       	st	X+, r1
    2964:	1d 92       	st	X+, r1
    2966:	1d 92       	st	X+, r1
    2968:	1c 92       	st	X, r1
    296a:	13 97       	sbiw	r26, 0x03	; 3
    296c:	ef 01       	movw	r28, r30
    296e:	ca 5b       	subi	r28, 0xBA	; 186
    2970:	df 4f       	sbci	r29, 0xFF	; 255
    2972:	8a e9       	ldi	r24, 0x9A	; 154
    2974:	99 e9       	ldi	r25, 0x99	; 153
    2976:	a9 e1       	ldi	r26, 0x19	; 25
    2978:	be e3       	ldi	r27, 0x3E	; 62
    297a:	88 83       	st	Y, r24
    297c:	99 83       	std	Y+1, r25	; 0x01
    297e:	aa 83       	std	Y+2, r26	; 0x02
    2980:	bb 83       	std	Y+3, r27	; 0x03
    2982:	24 96       	adiw	r28, 0x04	; 4
    2984:	0a e9       	ldi	r16, 0x9A	; 154
    2986:	19 e9       	ldi	r17, 0x99	; 153
    2988:	29 e9       	ldi	r18, 0x99	; 153
    298a:	3d eb       	ldi	r19, 0xBD	; 189
    298c:	08 83       	st	Y, r16
    298e:	19 83       	std	Y+1, r17	; 0x01
    2990:	2a 83       	std	Y+2, r18	; 0x02
    2992:	3b 83       	std	Y+3, r19	; 0x03
    2994:	24 96       	adiw	r28, 0x04	; 4
    2996:	48 83       	st	Y, r20
    2998:	59 83       	std	Y+1, r21	; 0x01
    299a:	6a 83       	std	Y+2, r22	; 0x02
    299c:	7b 83       	std	Y+3, r23	; 0x03
    299e:	24 96       	adiw	r28, 0x04	; 4
    29a0:	4a e9       	ldi	r20, 0x9A	; 154
    29a2:	59 e9       	ldi	r21, 0x99	; 153
    29a4:	69 e1       	ldi	r22, 0x19	; 25
    29a6:	7e eb       	ldi	r23, 0xBE	; 190
    29a8:	48 83       	st	Y, r20
    29aa:	59 83       	std	Y+1, r21	; 0x01
    29ac:	6a 83       	std	Y+2, r22	; 0x02
    29ae:	7b 83       	std	Y+3, r23	; 0x03
    29b0:	24 96       	adiw	r28, 0x04	; 4
    29b2:	88 83       	st	Y, r24
    29b4:	99 83       	std	Y+1, r25	; 0x01
    29b6:	aa 83       	std	Y+2, r26	; 0x02
    29b8:	bb 83       	std	Y+3, r27	; 0x03
    29ba:	df 01       	movw	r26, r30
    29bc:	a6 5a       	subi	r26, 0xA6	; 166
    29be:	bf 4f       	sbci	r27, 0xFF	; 255
    29c0:	1d 92       	st	X+, r1
    29c2:	1d 92       	st	X+, r1
    29c4:	1d 92       	st	X+, r1
    29c6:	1c 92       	st	X, r1
    29c8:	13 97       	sbiw	r26, 0x03	; 3
    29ca:	14 96       	adiw	r26, 0x04	; 4
    29cc:	0a e9       	ldi	r16, 0x9A	; 154
    29ce:	19 e9       	ldi	r17, 0x99	; 153
    29d0:	29 e9       	ldi	r18, 0x99	; 153
    29d2:	3e e3       	ldi	r19, 0x3E	; 62
    29d4:	0d 93       	st	X+, r16
    29d6:	1d 93       	st	X+, r17
    29d8:	2d 93       	st	X+, r18
    29da:	3c 93       	st	X, r19
    29dc:	13 97       	sbiw	r26, 0x03	; 3
    29de:	14 96       	adiw	r26, 0x04	; 4
    29e0:	1d 92       	st	X+, r1
    29e2:	1d 92       	st	X+, r1
    29e4:	1d 92       	st	X+, r1
    29e6:	1c 92       	st	X, r1
    29e8:	13 97       	sbiw	r26, 0x03	; 3
    29ea:	14 96       	adiw	r26, 0x04	; 4
    29ec:	4d ec       	ldi	r20, 0xCD	; 205
    29ee:	5c ec       	ldi	r21, 0xCC	; 204
    29f0:	6c e4       	ldi	r22, 0x4C	; 76
    29f2:	7f e3       	ldi	r23, 0x3F	; 63
    29f4:	4d 93       	st	X+, r20
    29f6:	5d 93       	st	X+, r21
    29f8:	6d 93       	st	X+, r22
    29fa:	7c 93       	st	X, r23
    29fc:	13 97       	sbiw	r26, 0x03	; 3
    29fe:	14 96       	adiw	r26, 0x04	; 4
    2a00:	1d 92       	st	X+, r1
    2a02:	1d 92       	st	X+, r1
    2a04:	1d 92       	st	X+, r1
    2a06:	1c 92       	st	X, r1
    2a08:	13 97       	sbiw	r26, 0x03	; 3
    2a0a:	68 96       	adiw	r28, 0x18	; 24
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a0 ec       	ldi	r26, 0xC0	; 192
    2a12:	bf e3       	ldi	r27, 0x3F	; 63
    2a14:	88 83       	st	Y, r24
    2a16:	99 83       	std	Y+1, r25	; 0x01
    2a18:	aa 83       	std	Y+2, r26	; 0x02
    2a1a:	bb 83       	std	Y+3, r27	; 0x03
    2a1c:	24 96       	adiw	r28, 0x04	; 4
    2a1e:	0f 2e       	mov	r0, r31
    2a20:	fa e9       	ldi	r31, 0x9A	; 154
    2a22:	cf 2e       	mov	r12, r31
    2a24:	f9 e9       	ldi	r31, 0x99	; 153
    2a26:	df 2e       	mov	r13, r31
    2a28:	ed 2c       	mov	r14, r13
    2a2a:	fe eb       	ldi	r31, 0xBE	; 190
    2a2c:	ff 2e       	mov	r15, r31
    2a2e:	f0 2d       	mov	r31, r0
    2a30:	c8 82       	st	Y, r12
    2a32:	d9 82       	std	Y+1, r13	; 0x01
    2a34:	ea 82       	std	Y+2, r14	; 0x02
    2a36:	fb 82       	std	Y+3, r15	; 0x03
    2a38:	24 96       	adiw	r28, 0x04	; 4
    2a3a:	08 83       	st	Y, r16
    2a3c:	19 83       	std	Y+1, r17	; 0x01
    2a3e:	2a 83       	std	Y+2, r18	; 0x02
    2a40:	3b 83       	std	Y+3, r19	; 0x03
    2a42:	24 96       	adiw	r28, 0x04	; 4
    2a44:	0d ec       	ldi	r16, 0xCD	; 205
    2a46:	1c ec       	ldi	r17, 0xCC	; 204
    2a48:	2c e4       	ldi	r18, 0x4C	; 76
    2a4a:	3f eb       	ldi	r19, 0xBF	; 191
    2a4c:	08 83       	st	Y, r16
    2a4e:	19 83       	std	Y+1, r17	; 0x01
    2a50:	2a 83       	std	Y+2, r18	; 0x02
    2a52:	3b 83       	std	Y+3, r19	; 0x03
    2a54:	24 96       	adiw	r28, 0x04	; 4
    2a56:	48 83       	st	Y, r20
    2a58:	59 83       	std	Y+1, r21	; 0x01
    2a5a:	6a 83       	std	Y+2, r22	; 0x02
    2a5c:	7b 83       	std	Y+3, r23	; 0x03
    2a5e:	24 96       	adiw	r28, 0x04	; 4
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	60 ec       	ldi	r22, 0xC0	; 192
    2a66:	7f eb       	ldi	r23, 0xBF	; 191
    2a68:	48 83       	st	Y, r20
    2a6a:	59 83       	std	Y+1, r21	; 0x01
    2a6c:	6a 83       	std	Y+2, r22	; 0x02
    2a6e:	7b 83       	std	Y+3, r23	; 0x03
    2a70:	24 96       	adiw	r28, 0x04	; 4
    2a72:	88 83       	st	Y, r24
    2a74:	99 83       	std	Y+1, r25	; 0x01
    2a76:	aa 83       	std	Y+2, r26	; 0x02
    2a78:	bb 83       	std	Y+3, r27	; 0x03
    2a7a:	df 01       	movw	r26, r30
    2a7c:	a6 57       	subi	r26, 0x76	; 118
    2a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a80:	1d 92       	st	X+, r1
    2a82:	1d 92       	st	X+, r1
    2a84:	1d 92       	st	X+, r1
    2a86:	1c 92       	st	X, r1
    2a88:	13 97       	sbiw	r26, 0x03	; 3
    2a8a:	14 96       	adiw	r26, 0x04	; 4
    2a8c:	00 e0       	ldi	r16, 0x00	; 0
    2a8e:	10 e0       	ldi	r17, 0x00	; 0
    2a90:	20 e4       	ldi	r18, 0x40	; 64
    2a92:	30 e4       	ldi	r19, 0x40	; 64
    2a94:	0d 93       	st	X+, r16
    2a96:	1d 93       	st	X+, r17
    2a98:	2d 93       	st	X+, r18
    2a9a:	3c 93       	st	X, r19
    2a9c:	13 97       	sbiw	r26, 0x03	; 3
    2a9e:	14 96       	adiw	r26, 0x04	; 4
    2aa0:	1d 92       	st	X+, r1
    2aa2:	1d 92       	st	X+, r1
    2aa4:	1d 92       	st	X+, r1
    2aa6:	1c 92       	st	X, r1
    2aa8:	13 97       	sbiw	r26, 0x03	; 3
    2aaa:	14 96       	adiw	r26, 0x04	; 4
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	60 ea       	ldi	r22, 0xA0	; 160
    2ab2:	70 e4       	ldi	r23, 0x40	; 64
    2ab4:	4d 93       	st	X+, r20
    2ab6:	5d 93       	st	X+, r21
    2ab8:	6d 93       	st	X+, r22
    2aba:	7c 93       	st	X, r23
    2abc:	13 97       	sbiw	r26, 0x03	; 3
    2abe:	14 96       	adiw	r26, 0x04	; 4
    2ac0:	1d 92       	st	X+, r1
    2ac2:	1d 92       	st	X+, r1
    2ac4:	1d 92       	st	X+, r1
    2ac6:	1c 92       	st	X, r1
    2ac8:	13 97       	sbiw	r26, 0x03	; 3
    2aca:	68 96       	adiw	r28, 0x18	; 24
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e7       	ldi	r26, 0x70	; 112
    2ad2:	b1 e4       	ldi	r27, 0x41	; 65
    2ad4:	88 83       	st	Y, r24
    2ad6:	99 83       	std	Y+1, r25	; 0x01
    2ad8:	aa 83       	std	Y+2, r26	; 0x02
    2ada:	bb 83       	std	Y+3, r27	; 0x03
    2adc:	24 96       	adiw	r28, 0x04	; 4
    2ade:	18 82       	st	Y, r1
    2ae0:	19 82       	std	Y+1, r1	; 0x01
    2ae2:	1a 82       	std	Y+2, r1	; 0x02
    2ae4:	1b 82       	std	Y+3, r1	; 0x03
    2ae6:	24 96       	adiw	r28, 0x04	; 4
    2ae8:	0f 2e       	mov	r0, r31
    2aea:	c1 2c       	mov	r12, r1
    2aec:	d1 2c       	mov	r13, r1
    2aee:	f0 ef       	ldi	r31, 0xF0	; 240
    2af0:	ef 2e       	mov	r14, r31
    2af2:	f1 e4       	ldi	r31, 0x41	; 65
    2af4:	ff 2e       	mov	r15, r31
    2af6:	f0 2d       	mov	r31, r0
    2af8:	c8 82       	st	Y, r12
    2afa:	d9 82       	std	Y+1, r13	; 0x01
    2afc:	ea 82       	std	Y+2, r14	; 0x02
    2afe:	fb 82       	std	Y+3, r15	; 0x03
    2b00:	24 96       	adiw	r28, 0x04	; 4
    2b02:	18 82       	st	Y, r1
    2b04:	19 82       	std	Y+1, r1	; 0x01
    2b06:	1a 82       	std	Y+2, r1	; 0x02
    2b08:	1b 82       	std	Y+3, r1	; 0x03
    2b0a:	24 96       	adiw	r28, 0x04	; 4
    2b0c:	0f 2e       	mov	r0, r31
    2b0e:	41 2c       	mov	r4, r1
    2b10:	51 2c       	mov	r5, r1
    2b12:	f0 e7       	ldi	r31, 0x70	; 112
    2b14:	6f 2e       	mov	r6, r31
    2b16:	f2 e4       	ldi	r31, 0x42	; 66
    2b18:	7f 2e       	mov	r7, r31
    2b1a:	f0 2d       	mov	r31, r0
    2b1c:	48 82       	st	Y, r4
    2b1e:	59 82       	std	Y+1, r5	; 0x01
    2b20:	6a 82       	std	Y+2, r6	; 0x02
    2b22:	7b 82       	std	Y+3, r7	; 0x03
    2b24:	24 96       	adiw	r28, 0x04	; 4
    2b26:	18 82       	st	Y, r1
    2b28:	19 82       	std	Y+1, r1	; 0x01
    2b2a:	1a 82       	std	Y+2, r1	; 0x02
    2b2c:	1b 82       	std	Y+3, r1	; 0x03
    2b2e:	24 96       	adiw	r28, 0x04	; 4
    2b30:	0f 2e       	mov	r0, r31
    2b32:	41 2c       	mov	r4, r1
    2b34:	51 2c       	mov	r5, r1
    2b36:	f8 ec       	ldi	r31, 0xC8	; 200
    2b38:	6f 2e       	mov	r6, r31
    2b3a:	f2 e4       	ldi	r31, 0x42	; 66
    2b3c:	7f 2e       	mov	r7, r31
    2b3e:	f0 2d       	mov	r31, r0
    2b40:	48 82       	st	Y, r4
    2b42:	59 82       	std	Y+1, r5	; 0x01
    2b44:	6a 82       	std	Y+2, r6	; 0x02
    2b46:	7b 82       	std	Y+3, r7	; 0x03
    2b48:	24 96       	adiw	r28, 0x04	; 4
    2b4a:	0f 2e       	mov	r0, r31
    2b4c:	41 2c       	mov	r4, r1
    2b4e:	51 2c       	mov	r5, r1
    2b50:	f0 e4       	ldi	r31, 0x40	; 64
    2b52:	6f 2e       	mov	r6, r31
    2b54:	f0 ec       	ldi	r31, 0xC0	; 192
    2b56:	7f 2e       	mov	r7, r31
    2b58:	f0 2d       	mov	r31, r0
    2b5a:	48 82       	st	Y, r4
    2b5c:	59 82       	std	Y+1, r5	; 0x01
    2b5e:	6a 82       	std	Y+2, r6	; 0x02
    2b60:	7b 82       	std	Y+3, r7	; 0x03
    2b62:	24 96       	adiw	r28, 0x04	; 4
    2b64:	08 83       	st	Y, r16
    2b66:	19 83       	std	Y+1, r17	; 0x01
    2b68:	2a 83       	std	Y+2, r18	; 0x02
    2b6a:	3b 83       	std	Y+3, r19	; 0x03
    2b6c:	24 96       	adiw	r28, 0x04	; 4
    2b6e:	00 e0       	ldi	r16, 0x00	; 0
    2b70:	10 e0       	ldi	r17, 0x00	; 0
    2b72:	20 ea       	ldi	r18, 0xA0	; 160
    2b74:	30 ec       	ldi	r19, 0xC0	; 192
    2b76:	08 83       	st	Y, r16
    2b78:	19 83       	std	Y+1, r17	; 0x01
    2b7a:	2a 83       	std	Y+2, r18	; 0x02
    2b7c:	3b 83       	std	Y+3, r19	; 0x03
    2b7e:	24 96       	adiw	r28, 0x04	; 4
    2b80:	48 83       	st	Y, r20
    2b82:	59 83       	std	Y+1, r21	; 0x01
    2b84:	6a 83       	std	Y+2, r22	; 0x02
    2b86:	7b 83       	std	Y+3, r23	; 0x03
    2b88:	24 96       	adiw	r28, 0x04	; 4
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	60 e7       	ldi	r22, 0x70	; 112
    2b90:	71 ec       	ldi	r23, 0xC1	; 193
    2b92:	48 83       	st	Y, r20
    2b94:	59 83       	std	Y+1, r21	; 0x01
    2b96:	6a 83       	std	Y+2, r22	; 0x02
    2b98:	7b 83       	std	Y+3, r23	; 0x03
    2b9a:	24 96       	adiw	r28, 0x04	; 4
    2b9c:	88 83       	st	Y, r24
    2b9e:	99 83       	std	Y+1, r25	; 0x01
    2ba0:	aa 83       	std	Y+2, r26	; 0x02
    2ba2:	bb 83       	std	Y+3, r27	; 0x03
    2ba4:	24 96       	adiw	r28, 0x04	; 4
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	60 e3       	ldi	r22, 0x30	; 48
    2bac:	71 e4       	ldi	r23, 0x41	; 65
    2bae:	48 83       	st	Y, r20
    2bb0:	59 83       	std	Y+1, r21	; 0x01
    2bb2:	6a 83       	std	Y+2, r22	; 0x02
    2bb4:	7b 83       	std	Y+3, r23	; 0x03
    2bb6:	24 96       	adiw	r28, 0x04	; 4
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	50 e0       	ldi	r21, 0x00	; 0
    2bbc:	6c e8       	ldi	r22, 0x8C	; 140
    2bbe:	71 e4       	ldi	r23, 0x41	; 65
    2bc0:	48 83       	st	Y, r20
    2bc2:	59 83       	std	Y+1, r21	; 0x01
    2bc4:	6a 83       	std	Y+2, r22	; 0x02
    2bc6:	7b 83       	std	Y+3, r23	; 0x03
    2bc8:	24 96       	adiw	r28, 0x04	; 4
    2bca:	18 82       	st	Y, r1
    2bcc:	19 82       	std	Y+1, r1	; 0x01
    2bce:	1a 82       	std	Y+2, r1	; 0x02
    2bd0:	1b 82       	std	Y+3, r1	; 0x03
    2bd2:	24 96       	adiw	r28, 0x04	; 4
    2bd4:	88 83       	st	Y, r24
    2bd6:	99 83       	std	Y+1, r25	; 0x01
    2bd8:	aa 83       	std	Y+2, r26	; 0x02
    2bda:	bb 83       	std	Y+3, r27	; 0x03
    2bdc:	df 01       	movw	r26, r30
    2bde:	ae 51       	subi	r26, 0x1E	; 30
    2be0:	bf 4f       	sbci	r27, 0xFF	; 255
    2be2:	1d 92       	st	X+, r1
    2be4:	1d 92       	st	X+, r1
    2be6:	1d 92       	st	X+, r1
    2be8:	1c 92       	st	X, r1
    2bea:	13 97       	sbiw	r26, 0x03	; 3
    2bec:	14 96       	adiw	r26, 0x04	; 4
    2bee:	cd 92       	st	X+, r12
    2bf0:	dd 92       	st	X+, r13
    2bf2:	ed 92       	st	X+, r14
    2bf4:	fc 92       	st	X, r15
    2bf6:	13 97       	sbiw	r26, 0x03	; 3
    2bf8:	b1 86       	std	Z+9, r11	; 0x09
    2bfa:	a0 86       	std	Z+8, r10	; 0x08
    2bfc:	92 86       	std	Z+10, r9	; 0x0a
    2bfe:	83 86       	std	Z+11, r8	; 0x0b
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	df 90       	pop	r13
    2c0e:	cf 90       	pop	r12
    2c10:	bf 90       	pop	r11
    2c12:	af 90       	pop	r10
    2c14:	9f 90       	pop	r9
    2c16:	8f 90       	pop	r8
    2c18:	7f 90       	pop	r7
    2c1a:	6f 90       	pop	r6
    2c1c:	5f 90       	pop	r5
    2c1e:	4f 90       	pop	r4
    2c20:	08 95       	ret

00002c22 <_ZN7AMS581214getPressure_PaEv>:
    2c22:	fc 01       	movw	r30, r24
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	08 95       	ret

00002c2e <_ZN7AMS581213getTransducerEv>:

/* sets the pressure and temperature range based on the chip */
void AMS5812::getTransducer(){
    2c2e:	dc 01       	movw	r26, r24
  // setting the min and max pressures based on which transducer it is
  switch(_type) {
    2c30:	1b 96       	adiw	r26, 0x0b	; 11
    2c32:	ec 91       	ld	r30, X
    2c34:	1b 97       	sbiw	r26, 0x0b	; 11
    2c36:	4e 2f       	mov	r20, r30
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	46 31       	cpi	r20, 0x16	; 22
    2c3c:	51 05       	cpc	r21, r1
    2c3e:	08 f0       	brcs	.+2      	; 0x2c42 <_ZN7AMS581213getTransducerEv+0x14>
    2c40:	7c c0       	rjmp	.+248    	; 0x2d3a <_ZN7AMS581213getTransducerEv+0x10c>
    2c42:	fa 01       	movw	r30, r20
    2c44:	ec 5c       	subi	r30, 0xCC	; 204
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	0c 94 26 29 	jmp	0x524c	; 0x524c <__tablejump2__>
    case AMS5812_0000_D:
      _pMin = AMS5812_0000_D_P_MIN;
    2c4c:	da 96       	adiw	r26, 0x3a	; 58
    2c4e:	4d 91       	ld	r20, X+
    2c50:	5d 91       	ld	r21, X+
    2c52:	6d 91       	ld	r22, X+
    2c54:	7c 91       	ld	r23, X
    2c56:	dd 97       	sbiw	r26, 0x3d	; 61
    2c58:	5a 96       	adiw	r26, 0x1a	; 26
    2c5a:	4d 93       	st	X+, r20
    2c5c:	5d 93       	st	X+, r21
    2c5e:	6d 93       	st	X+, r22
    2c60:	7c 93       	st	X, r23
    2c62:	5d 97       	sbiw	r26, 0x1d	; 29
      _pMax = AMS5812_0000_D_P_MAX;
    2c64:	fc 01       	movw	r30, r24
    2c66:	fe 96       	adiw	r30, 0x3e	; 62
    2c68:	5e c0       	rjmp	.+188    	; 0x2d26 <_ZN7AMS581213getTransducerEv+0xf8>
      break;
    case AMS5812_0001_D:  
      _pMin = AMS5812_0001_D_P_MIN;
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	ee 5b       	subi	r30, 0xBE	; 190
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	4f c0       	rjmp	.+158    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0001_D_P_MAX;
      break;
    case AMS5812_0000_D_B:
      _pMin = AMS5812_0000_D_B_P_MIN;
    2c72:	fc 01       	movw	r30, r24
    2c74:	e6 5b       	subi	r30, 0xB6	; 182
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	4b c0       	rjmp	.+150    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0000_D_B_P_MAX;
      break;
    case AMS5812_0001_D_B:
      _pMin = AMS5812_0001_D_B_P_MIN;
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	ee 5a       	subi	r30, 0xAE	; 174
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	47 c0       	rjmp	.+142    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0001_D_B_P_MAX;
      break;
    case AMS5812_0003_D:
      _pMin = AMS5812_0003_D_P_MIN;
    2c82:	fc 01       	movw	r30, r24
    2c84:	e6 5a       	subi	r30, 0xA6	; 166
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	43 c0       	rjmp	.+134    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0003_D_P_MAX;
      break;
    case AMS5812_0008_D:
      _pMin = AMS5812_0008_D_P_MIN;
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	ee 59       	subi	r30, 0x9E	; 158
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0008_D_P_MAX;
      break;
    case AMS5812_0015_D:
      _pMin = AMS5812_0015_D_P_MIN;
    2c92:	fc 01       	movw	r30, r24
    2c94:	e6 59       	subi	r30, 0x96	; 150
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	3b c0       	rjmp	.+118    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0015_D_P_MAX;
      break;
    case AMS5812_0003_D_B:
      _pMin = AMS5812_0003_D_B_P_MIN;
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	ee 58       	subi	r30, 0x8E	; 142
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	37 c0       	rjmp	.+110    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0003_D_B_P_MAX;
      break;
    case AMS5812_0008_D_B:
      _pMin = AMS5812_0008_D_B_P_MIN;
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	e6 58       	subi	r30, 0x86	; 134
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	33 c0       	rjmp	.+102    	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0008_D_B_P_MAX;
      break;
    case AMS5812_0015_D_B:
      _pMin = AMS5812_0015_D_B_P_MIN;
    2caa:	fc 01       	movw	r30, r24
    2cac:	ee 57       	subi	r30, 0x7E	; 126
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	2f c0       	rjmp	.+94     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0015_D_B_P_MAX;
      break;
    case AMS5812_0030_D:
      _pMin = AMS5812_0030_D_P_MIN;
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	e6 57       	subi	r30, 0x76	; 118
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	2b c0       	rjmp	.+86     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0030_D_P_MAX;
      break;
    case AMS5812_0050_D:
      _pMin = AMS5812_0050_D_P_MIN;
    2cba:	fc 01       	movw	r30, r24
    2cbc:	ee 56       	subi	r30, 0x6E	; 110
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	27 c0       	rjmp	.+78     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0050_D_P_MAX;
      break;
    case AMS5812_0150_D:
      _pMin = AMS5812_0150_D_P_MIN;
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e6 56       	subi	r30, 0x66	; 102
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	23 c0       	rjmp	.+70     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_D_P_MAX;
      break;
    case AMS5812_0300_D:
      _pMin = AMS5812_0300_D_P_MIN;
    2cca:	fc 01       	movw	r30, r24
    2ccc:	ee 55       	subi	r30, 0x5E	; 94
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	1f c0       	rjmp	.+62     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0300_D_P_MAX;
      break;
    case AMS5812_0600_D:
      _pMin = AMS5812_0600_D_P_MIN;
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	e6 55       	subi	r30, 0x56	; 86
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	1b c0       	rjmp	.+54     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0600_D_P_MAX;
      break;
    case AMS5812_1000_D:
      _pMin = AMS5812_1000_D_P_MIN;
    2cda:	fc 01       	movw	r30, r24
    2cdc:	ee 54       	subi	r30, 0x4E	; 78
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	17 c0       	rjmp	.+46     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_1000_D_P_MAX;
      break;
    case AMS5812_0030_D_B:
      _pMin = AMS5812_0030_D_B_P_MIN;
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e6 54       	subi	r30, 0x46	; 70
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	13 c0       	rjmp	.+38     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0030_D_B_P_MAX;
      break;
    case AMS5812_0050_D_B:
      _pMin = AMS5812_0050_D_B_P_MIN;
    2cea:	fc 01       	movw	r30, r24
    2cec:	ee 53       	subi	r30, 0x3E	; 62
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0050_D_B_P_MAX;
      break;
    case AMS5812_0150_D_B:
      _pMin = AMS5812_0150_D_B_P_MIN;
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e6 53       	subi	r30, 0x36	; 54
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	0b c0       	rjmp	.+22     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_D_B_P_MAX;
      break;
    case AMS5812_0150_B:
      _pMin = AMS5812_0150_B_P_MIN;
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	ee 52       	subi	r30, 0x2E	; 46
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	07 c0       	rjmp	.+14     	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_B_P_MAX;
      break;
    case AMS5812_0150_A:
      _pMin = AMS5812_0150_A_P_MIN;
    2d02:	fc 01       	movw	r30, r24
    2d04:	e6 52       	subi	r30, 0x26	; 38
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	03 c0       	rjmp	.+6      	; 0x2d10 <_ZN7AMS581213getTransducerEv+0xe2>
      _pMax = AMS5812_0150_A_P_MAX;
      break;
    case AMS5812_0300_A:
      _pMin = AMS5812_0300_A_P_MIN;
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	ee 51       	subi	r30, 0x1E	; 30
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	40 81       	ld	r20, Z
    2d12:	51 81       	ldd	r21, Z+1	; 0x01
    2d14:	62 81       	ldd	r22, Z+2	; 0x02
    2d16:	73 81       	ldd	r23, Z+3	; 0x03
    2d18:	5a 96       	adiw	r26, 0x1a	; 26
    2d1a:	4d 93       	st	X+, r20
    2d1c:	5d 93       	st	X+, r21
    2d1e:	6d 93       	st	X+, r22
    2d20:	7c 93       	st	X, r23
    2d22:	5d 97       	sbiw	r26, 0x1d	; 29
      _pMax = AMS5812_0300_A_P_MAX;
    2d24:	34 96       	adiw	r30, 0x04	; 4
    2d26:	40 81       	ld	r20, Z
    2d28:	51 81       	ldd	r21, Z+1	; 0x01
    2d2a:	62 81       	ldd	r22, Z+2	; 0x02
    2d2c:	73 81       	ldd	r23, Z+3	; 0x03
    2d2e:	5e 96       	adiw	r26, 0x1e	; 30
    2d30:	4d 93       	st	X+, r20
    2d32:	5d 93       	st	X+, r21
    2d34:	6d 93       	st	X+, r22
    2d36:	7c 93       	st	X, r23
    2d38:	91 97       	sbiw	r26, 0x21	; 33
    2d3a:	08 95       	ret

00002d3c <_ZN7AMS58129readBytesEPjS0_>:
      break;
  }
}

/* reads pressure and temperature and returns values in counts */
int AMS5812::readBytes(uint16_t* pressureCounts, uint16_t* temperatureCounts){
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	ec 01       	movw	r28, r24
    2d4a:	7b 01       	movw	r14, r22
    2d4c:	8a 01       	movw	r16, r20
  // read from sensor
  _numBytes = _bus->requestFrom(_address,sizeof(_buffer));
    2d4e:	44 e0       	ldi	r20, 0x04	; 4
    2d50:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d52:	88 85       	ldd	r24, Y+8	; 0x08
    2d54:	99 85       	ldd	r25, Y+9	; 0x09
    2d56:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN7TwoWire11requestFromEhh>
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	99 8b       	std	Y+17, r25	; 0x11
    2d5e:	88 8b       	std	Y+16, r24	; 0x10
  // put the data in buffer
  if (_numBytes == sizeof(_buffer)) {
    2d60:	04 97       	sbiw	r24, 0x04	; 4
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <_ZN7AMS58129readBytesEPjS0_+0x2a>
    2d64:	41 c0       	rjmp	.+130    	; 0x2de8 <_ZN7AMS58129readBytesEPjS0_+0xac>
    _buffer[0] = _bus->read(); 
    2d66:	88 85       	ldd	r24, Y+8	; 0x08
    2d68:	99 85       	ldd	r25, Y+9	; 0x09
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	ed 91       	ld	r30, X+
    2d6e:	fc 91       	ld	r31, X
    2d70:	02 84       	ldd	r0, Z+10	; 0x0a
    2d72:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d74:	e0 2d       	mov	r30, r0
    2d76:	09 95       	icall
    2d78:	8c 87       	std	Y+12, r24	; 0x0c
    _buffer[1] = _bus->read();
    2d7a:	88 85       	ldd	r24, Y+8	; 0x08
    2d7c:	99 85       	ldd	r25, Y+9	; 0x09
    2d7e:	dc 01       	movw	r26, r24
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	02 84       	ldd	r0, Z+10	; 0x0a
    2d86:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d88:	e0 2d       	mov	r30, r0
    2d8a:	09 95       	icall
    2d8c:	8d 87       	std	Y+13, r24	; 0x0d
    _buffer[2] = _bus->read();
    2d8e:	88 85       	ldd	r24, Y+8	; 0x08
    2d90:	99 85       	ldd	r25, Y+9	; 0x09
    2d92:	dc 01       	movw	r26, r24
    2d94:	ed 91       	ld	r30, X+
    2d96:	fc 91       	ld	r31, X
    2d98:	02 84       	ldd	r0, Z+10	; 0x0a
    2d9a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d9c:	e0 2d       	mov	r30, r0
    2d9e:	09 95       	icall
    2da0:	8e 87       	std	Y+14, r24	; 0x0e
    _buffer[3] = _bus->read();
    2da2:	88 85       	ldd	r24, Y+8	; 0x08
    2da4:	99 85       	ldd	r25, Y+9	; 0x09
    2da6:	dc 01       	movw	r26, r24
    2da8:	ed 91       	ld	r30, X+
    2daa:	fc 91       	ld	r31, X
    2dac:	02 84       	ldd	r0, Z+10	; 0x0a
    2dae:	f3 85       	ldd	r31, Z+11	; 0x0b
    2db0:	e0 2d       	mov	r30, r0
    2db2:	09 95       	icall
    2db4:	8f 87       	std	Y+15, r24	; 0x0f
    // assemble into a uint16_t
    *pressureCounts = (((uint16_t) (_buffer[0]&0x7F)) <<8) + (((uint16_t) _buffer[1]));
    2db6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db8:	8f 77       	andi	r24, 0x7F	; 127
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	88 27       	eor	r24, r24
    2dc0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2dc2:	82 0f       	add	r24, r18
    2dc4:	91 1d       	adc	r25, r1
    2dc6:	f7 01       	movw	r30, r14
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
    *temperatureCounts = (((uint16_t) (_buffer[2]&0x7F)) <<8) + (((uint16_t) _buffer[3]));
    2dcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dce:	8f 77       	andi	r24, 0x7F	; 127
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	98 2f       	mov	r25, r24
    2dd4:	88 27       	eor	r24, r24
    2dd6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2dd8:	82 0f       	add	r24, r18
    2dda:	91 1d       	adc	r25, r1
    2ddc:	d8 01       	movw	r26, r16
    2dde:	8d 93       	st	X+, r24
    2de0:	9c 93       	st	X, r25
    _status = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <_ZN7AMS58129readBytesEPjS0_+0xb0>
  } else {
    _status = -1;
    2de8:	8f ef       	ldi	r24, 0xFF	; 255
    2dea:	9f ef       	ldi	r25, 0xFF	; 255
    2dec:	9d 8b       	std	Y+21, r25	; 0x15
    2dee:	8c 8b       	std	Y+20, r24	; 0x14
  }
  return _status;
}
    2df0:	8c 89       	ldd	r24, Y+20	; 0x14
    2df2:	9d 89       	ldd	r25, Y+21	; 0x15
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	08 95       	ret

00002e02 <_ZN7AMS58125beginEv>:
  // transducer type
  _type = type; 
}

/* starts the I2C communication and sets the pressure and temperature ranges using getTransducer */
int AMS5812::begin(){
    2e02:	cf 92       	push	r12
    2e04:	df 92       	push	r13
    2e06:	ef 92       	push	r14
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	ec 01       	movw	r28, r24
  // starting the I2C bus
  _bus->begin();
    2e14:	88 85       	ldd	r24, Y+8	; 0x08
    2e16:	99 85       	ldd	r25, Y+9	; 0x09
    2e18:	0e 94 b7 22 	call	0x456e	; 0x456e <_ZN7TwoWire5beginEv>
  // setting the I2C clock
  _bus->setClock(_i2cRate);
    2e1c:	4a a1       	ldd	r20, Y+34	; 0x22
    2e1e:	5b a1       	ldd	r21, Y+35	; 0x23
    2e20:	6c a1       	ldd	r22, Y+36	; 0x24
    2e22:	7d a1       	ldd	r23, Y+37	; 0x25
    2e24:	88 85       	ldd	r24, Y+8	; 0x08
    2e26:	99 85       	ldd	r25, Y+9	; 0x09
    2e28:	0e 94 c9 22 	call	0x4592	; 0x4592 <_ZN7TwoWire8setClockEm>
  // setting the min and max pressure based on the chip
  getTransducer();
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN7AMS581213getTransducerEv>
  // checking to see if we can talk with the sensor
  for (size_t i=0; i < _maxAttempts; i++) {
    2e32:	00 e0       	ldi	r16, 0x00	; 0
    2e34:	10 e0       	ldi	r17, 0x00	; 0
    _status = readBytes(&_pressureCounts,&_temperatureCounts);
    2e36:	7e 01       	movw	r14, r28
    2e38:	88 e1       	ldi	r24, 0x18	; 24
    2e3a:	e8 0e       	add	r14, r24
    2e3c:	f1 1c       	adc	r15, r1
    2e3e:	6e 01       	movw	r12, r28
    2e40:	86 e1       	ldi	r24, 0x16	; 22
    2e42:	c8 0e       	add	r12, r24
    2e44:	d1 1c       	adc	r13, r1
  // setting the I2C clock
  _bus->setClock(_i2cRate);
  // setting the min and max pressure based on the chip
  getTransducer();
  // checking to see if we can talk with the sensor
  for (size_t i=0; i < _maxAttempts; i++) {
    2e46:	8a 89       	ldd	r24, Y+18	; 0x12
    2e48:	9b 89       	ldd	r25, Y+19	; 0x13
    2e4a:	08 17       	cp	r16, r24
    2e4c:	19 07       	cpc	r17, r25
    2e4e:	98 f4       	brcc	.+38     	; 0x2e76 <_ZN7AMS58125beginEv+0x74>
    _status = readBytes(&_pressureCounts,&_temperatureCounts);
    2e50:	a7 01       	movw	r20, r14
    2e52:	b6 01       	movw	r22, r12
    2e54:	ce 01       	movw	r24, r28
    2e56:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN7AMS58129readBytesEPjS0_>
    2e5a:	9d 8b       	std	Y+21, r25	; 0x15
    2e5c:	8c 8b       	std	Y+20, r24	; 0x14
    if (_status > 0) {break;}
    2e5e:	18 16       	cp	r1, r24
    2e60:	19 06       	cpc	r1, r25
    2e62:	4c f0       	brlt	.+18     	; 0x2e76 <_ZN7AMS58125beginEv+0x74>
    delay(10);
    2e64:	6a e0       	ldi	r22, 0x0A	; 10
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
  // setting the I2C clock
  _bus->setClock(_i2cRate);
  // setting the min and max pressure based on the chip
  getTransducer();
  // checking to see if we can talk with the sensor
  for (size_t i=0; i < _maxAttempts; i++) {
    2e70:	0f 5f       	subi	r16, 0xFF	; 255
    2e72:	1f 4f       	sbci	r17, 0xFF	; 255
    2e74:	e8 cf       	rjmp	.-48     	; 0x2e46 <_ZN7AMS58125beginEv+0x44>
    _status = readBytes(&_pressureCounts,&_temperatureCounts);
    if (_status > 0) {break;}
    delay(10);
  }
  return _status;
}
    2e76:	8c 89       	ldd	r24, Y+20	; 0x14
    2e78:	9d 89       	ldd	r25, Y+21	; 0x15
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    2e8a:	08 95       	ret

00002e8c <_ZN7AMS581210readSensorEv>:

/* reads data from the sensor */
int AMS5812::readSensor(){
    2e8c:	4f 92       	push	r4
    2e8e:	5f 92       	push	r5
    2e90:	6f 92       	push	r6
    2e92:	7f 92       	push	r7
    2e94:	8f 92       	push	r8
    2e96:	9f 92       	push	r9
    2e98:	af 92       	push	r10
    2e9a:	bf 92       	push	r11
    2e9c:	cf 92       	push	r12
    2e9e:	df 92       	push	r13
    2ea0:	ef 92       	push	r14
    2ea2:	ff 92       	push	r15
    2ea4:	0f 93       	push	r16
    2ea6:	1f 93       	push	r17
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	ec 01       	movw	r28, r24
  // get pressure and temperature off transducer
  _status = readBytes(&_pressureCounts, &_temperatureCounts);
    2eae:	ac 01       	movw	r20, r24
    2eb0:	48 5e       	subi	r20, 0xE8	; 232
    2eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	6a 5e       	subi	r22, 0xEA	; 234
    2eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eba:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN7AMS58129readBytesEPjS0_>
    2ebe:	8c 01       	movw	r16, r24
    2ec0:	9d 8b       	std	Y+21, r25	; 0x15
    2ec2:	8c 8b       	std	Y+20, r24	; 0x14
  // convert counts to pressure, PA
  _data.Pressure_Pa = ((_pressureCounts - _digOutPmin)/((_digOutPmax - _digOutPmin)/(_pMax - _pMin)) + _pMin) * _psi2pa;
    2ec4:	6a a4       	ldd	r6, Y+42	; 0x2a
    2ec6:	7b a4       	ldd	r7, Y+43	; 0x2b
    2ec8:	ca 8c       	ldd	r12, Y+26	; 0x1a
    2eca:	db 8c       	ldd	r13, Y+27	; 0x1b
    2ecc:	ec 8c       	ldd	r14, Y+28	; 0x1c
    2ece:	fd 8c       	ldd	r15, Y+29	; 0x1d
    2ed0:	6e 89       	ldd	r22, Y+22	; 0x16
    2ed2:	7f 89       	ldd	r23, Y+23	; 0x17
    2ed4:	66 19       	sub	r22, r6
    2ed6:	77 09       	sbc	r23, r7
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
    2ee0:	4b 01       	movw	r8, r22
    2ee2:	5c 01       	movw	r10, r24
    2ee4:	6c a5       	ldd	r22, Y+44	; 0x2c
    2ee6:	7d a5       	ldd	r23, Y+45	; 0x2d
    2ee8:	66 19       	sub	r22, r6
    2eea:	77 09       	sbc	r23, r7
    2eec:	07 2e       	mov	r0, r23
    2eee:	00 0c       	add	r0, r0
    2ef0:	88 0b       	sbc	r24, r24
    2ef2:	99 0b       	sbc	r25, r25
    2ef4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__floatsisf>
    2ef8:	2b 01       	movw	r4, r22
    2efa:	3c 01       	movw	r6, r24
    2efc:	a7 01       	movw	r20, r14
    2efe:	96 01       	movw	r18, r12
    2f00:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2f02:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2f04:	88 a1       	ldd	r24, Y+32	; 0x20
    2f06:	99 a1       	ldd	r25, Y+33	; 0x21
    2f08:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    2f0c:	9b 01       	movw	r18, r22
    2f0e:	ac 01       	movw	r20, r24
    2f10:	c3 01       	movw	r24, r6
    2f12:	b2 01       	movw	r22, r4
    2f14:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
    2f18:	9b 01       	movw	r18, r22
    2f1a:	ac 01       	movw	r20, r24
    2f1c:	c5 01       	movw	r24, r10
    2f1e:	b4 01       	movw	r22, r8
    2f20:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
    2f24:	a7 01       	movw	r20, r14
    2f26:	96 01       	movw	r18, r12
    2f28:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    2f2c:	2e a1       	ldd	r18, Y+38	; 0x26
    2f2e:	3f a1       	ldd	r19, Y+39	; 0x27
    2f30:	48 a5       	ldd	r20, Y+40	; 0x28
    2f32:	59 a5       	ldd	r21, Y+41	; 0x29
    2f34:	0e 94 4f 28 	call	0x509e	; 0x509e <__mulsf3>
    2f38:	68 83       	st	Y, r22
    2f3a:	79 83       	std	Y+1, r23	; 0x01
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
    2f3e:	9b 83       	std	Y+3, r25	; 0x03
  // convert counts to temperature, C
  _data.Temp_C = ((_temperatureCounts - _digOutTmin)/((_digOutTmax - _digOutTmin)/(_tMax - _tMin)) + _tMin);
    2f40:	6e a4       	ldd	r6, Y+46	; 0x2e
    2f42:	7f a4       	ldd	r7, Y+47	; 0x2f
    2f44:	ca a8       	ldd	r12, Y+50	; 0x32
    2f46:	db a8       	ldd	r13, Y+51	; 0x33
    2f48:	ec a8       	ldd	r14, Y+52	; 0x34
    2f4a:	fd a8       	ldd	r15, Y+53	; 0x35
    2f4c:	68 8d       	ldd	r22, Y+24	; 0x18
    2f4e:	79 8d       	ldd	r23, Y+25	; 0x19
    2f50:	66 19       	sub	r22, r6
    2f52:	77 09       	sbc	r23, r7
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatunsisf>
    2f5c:	4b 01       	movw	r8, r22
    2f5e:	5c 01       	movw	r10, r24
    2f60:	68 a9       	ldd	r22, Y+48	; 0x30
    2f62:	79 a9       	ldd	r23, Y+49	; 0x31
    2f64:	66 19       	sub	r22, r6
    2f66:	77 09       	sbc	r23, r7
    2f68:	07 2e       	mov	r0, r23
    2f6a:	00 0c       	add	r0, r0
    2f6c:	88 0b       	sbc	r24, r24
    2f6e:	99 0b       	sbc	r25, r25
    2f70:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__floatsisf>
    2f74:	2b 01       	movw	r4, r22
    2f76:	3c 01       	movw	r6, r24
    2f78:	a7 01       	movw	r20, r14
    2f7a:	96 01       	movw	r18, r12
    2f7c:	6e a9       	ldd	r22, Y+54	; 0x36
    2f7e:	7f a9       	ldd	r23, Y+55	; 0x37
    2f80:	88 ad       	ldd	r24, Y+56	; 0x38
    2f82:	99 ad       	ldd	r25, Y+57	; 0x39
    2f84:	0e 94 a6 0c 	call	0x194c	; 0x194c <__subsf3>
    2f88:	9b 01       	movw	r18, r22
    2f8a:	ac 01       	movw	r20, r24
    2f8c:	c3 01       	movw	r24, r6
    2f8e:	b2 01       	movw	r22, r4
    2f90:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
    2f94:	9b 01       	movw	r18, r22
    2f96:	ac 01       	movw	r20, r24
    2f98:	c5 01       	movw	r24, r10
    2f9a:	b4 01       	movw	r22, r8
    2f9c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__divsf3>
    2fa0:	a7 01       	movw	r20, r14
    2fa2:	96 01       	movw	r18, r12
    2fa4:	0e 94 a7 0c 	call	0x194e	; 0x194e <__addsf3>
    2fa8:	6c 83       	std	Y+4, r22	; 0x04
    2faa:	7d 83       	std	Y+5, r23	; 0x05
    2fac:	8e 83       	std	Y+6, r24	; 0x06
    2fae:	9f 83       	std	Y+7, r25	; 0x07
  return _status;
}
    2fb0:	c8 01       	movw	r24, r16
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	ff 90       	pop	r15
    2fbc:	ef 90       	pop	r14
    2fbe:	df 90       	pop	r13
    2fc0:	cf 90       	pop	r12
    2fc2:	bf 90       	pop	r11
    2fc4:	af 90       	pop	r10
    2fc6:	9f 90       	pop	r9
    2fc8:	8f 90       	pop	r8
    2fca:	7f 90       	pop	r7
    2fcc:	6f 90       	pop	r6
    2fce:	5f 90       	pop	r5
    2fd0:	4f 90       	pop	r4
    2fd2:	08 95       	ret

00002fd4 <_ZN14TFT_22_ILI9225C1Eaaaah>:
#endif
    for (uint16_t i = 0; i < h * w; ++i) {
        _spiWrite16(bitmap[i]);
    }
    SPI_CS_HIGH();
    endWrite();
    2fd4:	ef 92       	push	r14
    2fd6:	0f 93       	push	r16
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	ec 01       	movw	r28, r24
    2fde:	88 e1       	ldi	r24, 0x18	; 24
    2fe0:	e6 e0       	ldi	r30, 0x06	; 6
    2fe2:	f1 e0       	ldi	r31, 0x01	; 1
    2fe4:	de 01       	movw	r26, r28
    2fe6:	5c 96       	adiw	r26, 0x1c	; 28
    2fe8:	01 90       	ld	r0, Z+
    2fea:	0d 92       	st	X+, r0
    2fec:	8a 95       	dec	r24
    2fee:	e1 f7       	brne	.-8      	; 0x2fe8 <_ZN14TFT_22_ILI9225C1Eaaaah+0x14>
    2ff0:	6e 83       	std	Y+6, r22	; 0x06
    2ff2:	4f 83       	std	Y+7, r20	; 0x07
    2ff4:	28 87       	std	Y+8, r18	; 0x08
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	8a 87       	std	Y+10, r24	; 0x0a
    2ffa:	89 87       	std	Y+9, r24	; 0x09
    2ffc:	0b 87       	std	Y+11, r16	; 0x0b
    2ffe:	eb 8e       	std	Y+27, r14	; 0x1b
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	8c ab       	std	Y+52, r24	; 0x34
    3004:	fe 01       	movw	r30, r28
    3006:	fe 96       	adiw	r30, 0x3e	; 62
    3008:	10 82       	st	Z, r1
    300a:	11 82       	std	Z+1, r1	; 0x01
    300c:	12 82       	std	Z+2, r1	; 0x02
    300e:	13 82       	std	Z+3, r1	; 0x03
    3010:	ce 5b       	subi	r28, 0xBE	; 190
    3012:	df 4f       	sbci	r29, 0xFF	; 255
    3014:	19 82       	std	Y+1, r1	; 0x01
    3016:	18 82       	st	Y, r1
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	0f 91       	pop	r16
    301e:	ef 90       	pop	r14
    3020:	08 95       	ret

00003022 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>:
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	ec 01       	movw	r28, r24
    3028:	db 01       	movw	r26, r22
    302a:	fa 01       	movw	r30, r20
    302c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    302e:	82 30       	cpi	r24, 0x02	; 2
    3030:	a9 f0       	breq	.+42     	; 0x305c <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x3a>
    3032:	83 30       	cpi	r24, 0x03	; 3
    3034:	29 f1       	breq	.+74     	; 0x3080 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x5e>
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	a1 f5       	brne	.+104    	; 0x30a2 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x80>
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	9b 81       	ldd	r25, Y+3	; 0x03
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	20 81       	ld	r18, Z
    3042:	31 81       	ldd	r19, Z+1	; 0x01
    3044:	82 1b       	sub	r24, r18
    3046:	93 0b       	sbc	r25, r19
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	80 83       	st	Z, r24
    304c:	2d 91       	ld	r18, X+
    304e:	3c 91       	ld	r19, X
    3050:	11 97       	sbiw	r26, 0x01	; 1
    3052:	8d 93       	st	X+, r24
    3054:	9c 93       	st	X, r25
    3056:	31 83       	std	Z+1, r19	; 0x01
    3058:	20 83       	st	Z, r18
    305a:	23 c0       	rjmp	.+70     	; 0x30a2 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x80>
    305c:	88 81       	ld	r24, Y
    305e:	99 81       	ldd	r25, Y+1	; 0x01
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	2d 91       	ld	r18, X+
    3064:	3c 91       	ld	r19, X
    3066:	11 97       	sbiw	r26, 0x01	; 1
    3068:	82 1b       	sub	r24, r18
    306a:	93 0b       	sbc	r25, r19
    306c:	8d 93       	st	X+, r24
    306e:	9c 93       	st	X, r25
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	9b 81       	ldd	r25, Y+3	; 0x03
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	20 81       	ld	r18, Z
    3078:	31 81       	ldd	r19, Z+1	; 0x01
    307a:	82 1b       	sub	r24, r18
    307c:	93 0b       	sbc	r25, r19
    307e:	0f c0       	rjmp	.+30     	; 0x309e <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_+0x7c>
    3080:	88 81       	ld	r24, Y
    3082:	99 81       	ldd	r25, Y+1	; 0x01
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	2d 91       	ld	r18, X+
    3088:	3c 91       	ld	r19, X
    308a:	11 97       	sbiw	r26, 0x01	; 1
    308c:	82 1b       	sub	r24, r18
    308e:	93 0b       	sbc	r25, r19
    3090:	11 96       	adiw	r26, 0x01	; 1
    3092:	9c 93       	st	X, r25
    3094:	8e 93       	st	-X, r24
    3096:	20 81       	ld	r18, Z
    3098:	31 81       	ldd	r19, Z+1	; 0x01
    309a:	2d 93       	st	X+, r18
    309c:	3c 93       	st	X, r19
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	80 83       	st	Z, r24
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	08 95       	ret

000030a8 <_ZN14TFT_22_ILI922512setBacklightEb>:
    30a8:	fc 01       	movw	r30, r24
    30aa:	65 ab       	std	Z+53, r22	; 0x35
    30ac:	83 85       	ldd	r24, Z+11	; 0x0b
    30ae:	88 23       	and	r24, r24
    30b0:	49 f0       	breq	.+18     	; 0x30c4 <_ZN14TFT_22_ILI922512setBacklightEb+0x1c>
    30b2:	66 23       	and	r22, r22
    30b4:	19 f0       	breq	.+6      	; 0x30bc <_ZN14TFT_22_ILI922512setBacklightEb+0x14>
    30b6:	63 8d       	ldd	r22, Z+27	; 0x1b
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <_ZN14TFT_22_ILI922512setBacklightEb+0x18>
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	0c 94 56 23 	jmp	0x46ac	; 0x46ac <analogWrite>
    30c4:	08 95       	ret

000030c6 <_ZN14TFT_22_ILI922514setOrientationEh>:
    30c6:	fc 01       	movw	r30, r24
    30c8:	63 70       	andi	r22, 0x03	; 3
    30ca:	62 8f       	std	Z+26, r22	; 0x1a
    30cc:	62 30       	cpi	r22, 0x02	; 2
    30ce:	21 f0       	breq	.+8      	; 0x30d8 <_ZN14TFT_22_ILI922514setOrientationEh+0x12>
    30d0:	63 30       	cpi	r22, 0x03	; 3
    30d2:	49 f0       	breq	.+18     	; 0x30e6 <_ZN14TFT_22_ILI922514setOrientationEh+0x20>
    30d4:	61 30       	cpi	r22, 0x01	; 1
    30d6:	39 f0       	breq	.+14     	; 0x30e6 <_ZN14TFT_22_ILI922514setOrientationEh+0x20>
    30d8:	80 eb       	ldi	r24, 0xB0	; 176
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	80 83       	st	Z, r24
    30e0:	8c ed       	ldi	r24, 0xDC	; 220
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	06 c0       	rjmp	.+12     	; 0x30f2 <_ZN14TFT_22_ILI922514setOrientationEh+0x2c>
    30e6:	8c ed       	ldi	r24, 0xDC	; 220
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
    30ee:	80 eb       	ldi	r24, 0xB0	; 176
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	93 83       	std	Z+3, r25	; 0x03
    30f4:	82 83       	std	Z+2, r24	; 0x02
    30f6:	08 95       	ret

000030f8 <_ZN14TFT_22_ILI92254maxXEv>:
    30f8:	fc 01       	movw	r30, r24
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	08 95       	ret

00003100 <_ZN14TFT_22_ILI92254maxYEv>:
    3100:	fc 01       	movw	r30, r24
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	08 95       	ret

00003108 <_ZN14TFT_22_ILI922515_writeCommand16Ej>:
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	fc 01       	movw	r30, r24
    310e:	a0 89       	ldd	r26, Z+16	; 0x10
    3110:	b1 89       	ldd	r27, Z+17	; 0x11
    3112:	9c 91       	ld	r25, X
    3114:	81 8d       	ldd	r24, Z+25	; 0x19
    3116:	80 95       	com	r24
    3118:	89 23       	and	r24, r25
    311a:	8c 93       	st	X, r24
    311c:	a4 89       	ldd	r26, Z+20	; 0x14
    311e:	b5 89       	ldd	r27, Z+21	; 0x15
    3120:	9c 91       	ld	r25, X
    3122:	80 8d       	ldd	r24, Z+24	; 0x18
    3124:	80 95       	com	r24
    3126:	89 23       	and	r24, r25
    3128:	8c 93       	st	X, r24
    312a:	82 85       	ldd	r24, Z+10	; 0x0a
    312c:	87 ff       	sbrs	r24, 7
    312e:	11 c0       	rjmp	.+34     	; 0x3152 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x4a>
    3130:	7e bd       	out	0x2e, r23	; 46
    3132:	0d b4       	in	r0, 0x2d	; 45
    3134:	07 fe       	sbrs	r0, 7
    3136:	fd cf       	rjmp	.-6      	; 0x3132 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x2a>
    3138:	6e bd       	out	0x2e, r22	; 46
    313a:	0d b4       	in	r0, 0x2d	; 45
    313c:	07 fe       	sbrs	r0, 7
    313e:	fd cf       	rjmp	.-6      	; 0x313a <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x32>
    3140:	a4 89       	ldd	r26, Z+20	; 0x14
    3142:	b5 89       	ldd	r27, Z+21	; 0x15
    3144:	9c 91       	ld	r25, X
    3146:	80 8d       	ldd	r24, Z+24	; 0x18
    3148:	89 2b       	or	r24, r25
    314a:	8c 93       	st	X, r24
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	08 95       	ret
    3152:	20 e1       	ldi	r18, 0x10	; 16
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	50 e8       	ldi	r21, 0x80	; 128
    315a:	a4 85       	ldd	r26, Z+12	; 0x0c
    315c:	b5 85       	ldd	r27, Z+13	; 0x0d
    315e:	86 89       	ldd	r24, Z+22	; 0x16
    3160:	eb 01       	movw	r28, r22
    3162:	c4 23       	and	r28, r20
    3164:	d5 23       	and	r29, r21
    3166:	9c 91       	ld	r25, X
    3168:	cd 2b       	or	r28, r29
    316a:	11 f0       	breq	.+4      	; 0x3170 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x68>
    316c:	89 2b       	or	r24, r25
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x6c>
    3170:	80 95       	com	r24
    3172:	89 23       	and	r24, r25
    3174:	8c 93       	st	X, r24
    3176:	a6 85       	ldd	r26, Z+14	; 0x0e
    3178:	b7 85       	ldd	r27, Z+15	; 0x0f
    317a:	9c 91       	ld	r25, X
    317c:	87 89       	ldd	r24, Z+23	; 0x17
    317e:	89 2b       	or	r24, r25
    3180:	8c 93       	st	X, r24
    3182:	a6 85       	ldd	r26, Z+14	; 0x0e
    3184:	b7 85       	ldd	r27, Z+15	; 0x0f
    3186:	9c 91       	ld	r25, X
    3188:	87 89       	ldd	r24, Z+23	; 0x17
    318a:	80 95       	com	r24
    318c:	89 23       	and	r24, r25
    318e:	8c 93       	st	X, r24
    3190:	56 95       	lsr	r21
    3192:	47 95       	ror	r20
    3194:	21 50       	subi	r18, 0x01	; 1
    3196:	31 09       	sbc	r19, r1
    3198:	01 f7       	brne	.-64     	; 0x315a <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x52>
    319a:	d2 cf       	rjmp	.-92     	; 0x3140 <_ZN14TFT_22_ILI922515_writeCommand16Ej+0x38>

0000319c <_ZN14TFT_22_ILI922512_writeData16Ej>:
    319c:	cf 93       	push	r28
    319e:	df 93       	push	r29
    31a0:	fc 01       	movw	r30, r24
    31a2:	a0 89       	ldd	r26, Z+16	; 0x10
    31a4:	b1 89       	ldd	r27, Z+17	; 0x11
    31a6:	9c 91       	ld	r25, X
    31a8:	81 8d       	ldd	r24, Z+25	; 0x19
    31aa:	89 2b       	or	r24, r25
    31ac:	8c 93       	st	X, r24
    31ae:	a4 89       	ldd	r26, Z+20	; 0x14
    31b0:	b5 89       	ldd	r27, Z+21	; 0x15
    31b2:	9c 91       	ld	r25, X
    31b4:	80 8d       	ldd	r24, Z+24	; 0x18
    31b6:	80 95       	com	r24
    31b8:	89 23       	and	r24, r25
    31ba:	8c 93       	st	X, r24
    31bc:	82 85       	ldd	r24, Z+10	; 0x0a
    31be:	87 ff       	sbrs	r24, 7
    31c0:	11 c0       	rjmp	.+34     	; 0x31e4 <_ZN14TFT_22_ILI922512_writeData16Ej+0x48>
    31c2:	7e bd       	out	0x2e, r23	; 46
    31c4:	0d b4       	in	r0, 0x2d	; 45
    31c6:	07 fe       	sbrs	r0, 7
    31c8:	fd cf       	rjmp	.-6      	; 0x31c4 <_ZN14TFT_22_ILI922512_writeData16Ej+0x28>
    31ca:	6e bd       	out	0x2e, r22	; 46
    31cc:	0d b4       	in	r0, 0x2d	; 45
    31ce:	07 fe       	sbrs	r0, 7
    31d0:	fd cf       	rjmp	.-6      	; 0x31cc <_ZN14TFT_22_ILI922512_writeData16Ej+0x30>
    31d2:	a4 89       	ldd	r26, Z+20	; 0x14
    31d4:	b5 89       	ldd	r27, Z+21	; 0x15
    31d6:	9c 91       	ld	r25, X
    31d8:	80 8d       	ldd	r24, Z+24	; 0x18
    31da:	89 2b       	or	r24, r25
    31dc:	8c 93       	st	X, r24
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	08 95       	ret
    31e4:	20 e1       	ldi	r18, 0x10	; 16
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	50 e8       	ldi	r21, 0x80	; 128
    31ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    31ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    31f0:	86 89       	ldd	r24, Z+22	; 0x16
    31f2:	eb 01       	movw	r28, r22
    31f4:	c4 23       	and	r28, r20
    31f6:	d5 23       	and	r29, r21
    31f8:	9c 91       	ld	r25, X
    31fa:	cd 2b       	or	r28, r29
    31fc:	11 f0       	breq	.+4      	; 0x3202 <_ZN14TFT_22_ILI922512_writeData16Ej+0x66>
    31fe:	89 2b       	or	r24, r25
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <_ZN14TFT_22_ILI922512_writeData16Ej+0x6a>
    3202:	80 95       	com	r24
    3204:	89 23       	and	r24, r25
    3206:	8c 93       	st	X, r24
    3208:	a6 85       	ldd	r26, Z+14	; 0x0e
    320a:	b7 85       	ldd	r27, Z+15	; 0x0f
    320c:	9c 91       	ld	r25, X
    320e:	87 89       	ldd	r24, Z+23	; 0x17
    3210:	89 2b       	or	r24, r25
    3212:	8c 93       	st	X, r24
    3214:	a6 85       	ldd	r26, Z+14	; 0x0e
    3216:	b7 85       	ldd	r27, Z+15	; 0x0f
    3218:	9c 91       	ld	r25, X
    321a:	87 89       	ldd	r24, Z+23	; 0x17
    321c:	80 95       	com	r24
    321e:	89 23       	and	r24, r25
    3220:	8c 93       	st	X, r24
    3222:	56 95       	lsr	r21
    3224:	47 95       	ror	r20
    3226:	21 50       	subi	r18, 0x01	; 1
    3228:	31 09       	sbc	r19, r1
    322a:	01 f7       	brne	.-64     	; 0x31ec <_ZN14TFT_22_ILI922512_writeData16Ej+0x50>
    322c:	d2 cf       	rjmp	.-92     	; 0x31d2 <_ZN14TFT_22_ILI922512_writeData16Ej+0x36>

0000322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>:
    322e:	0f 93       	push	r16
    3230:	1f 93       	push	r17
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	ec 01       	movw	r28, r24
    3238:	8a 01       	movw	r16, r20
    323a:	0e 94 84 18 	call	0x3108	; 0x3108 <_ZN14TFT_22_ILI922515_writeCommand16Ej>
    323e:	b8 01       	movw	r22, r16
    3240:	ce 01       	movw	r24, r28
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <_ZN14TFT_22_ILI922512_writeData16Ej>

0000324e <_ZN14TFT_22_ILI922512_resetWindowEv>:
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	ec 01       	movw	r28, r24
    3254:	4f ea       	ldi	r20, 0xAF	; 175
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	66 e3       	ldi	r22, 0x36	; 54
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3260:	40 e0       	ldi	r20, 0x00	; 0
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	67 e3       	ldi	r22, 0x37	; 55
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	ce 01       	movw	r24, r28
    326a:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    326e:	4b ed       	ldi	r20, 0xDB	; 219
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	68 e3       	ldi	r22, 0x38	; 56
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	ce 01       	movw	r24, r28
    3278:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    327c:	40 e0       	ldi	r20, 0x00	; 0
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	69 e3       	ldi	r22, 0x39	; 57
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	ce 01       	movw	r24, r28
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	0c 94 17 19 	jmp	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>

0000328e <_ZN14TFT_22_ILI92257setFontEPhb>:
    328e:	dc 01       	movw	r26, r24
    3290:	d7 96       	adiw	r26, 0x37	; 55
    3292:	7c 93       	st	X, r23
    3294:	6e 93       	st	-X, r22
    3296:	d6 97       	sbiw	r26, 0x36	; 54
    3298:	fb 01       	movw	r30, r22
    329a:	84 91       	lpm	r24, Z
    329c:	d8 96       	adiw	r26, 0x38	; 56
    329e:	8c 93       	st	X, r24
    32a0:	d8 97       	sbiw	r26, 0x38	; 56
    32a2:	31 96       	adiw	r30, 0x01	; 1
    32a4:	84 91       	lpm	r24, Z
    32a6:	d9 96       	adiw	r26, 0x39	; 57
    32a8:	8c 93       	st	X, r24
    32aa:	d9 97       	sbiw	r26, 0x39	; 57
    32ac:	31 96       	adiw	r30, 0x01	; 1
    32ae:	e4 91       	lpm	r30, Z
    32b0:	da 96       	adiw	r26, 0x3a	; 58
    32b2:	ec 93       	st	X, r30
    32b4:	da 97       	sbiw	r26, 0x3a	; 58
    32b6:	fb 01       	movw	r30, r22
    32b8:	33 96       	adiw	r30, 0x03	; 3
    32ba:	64 91       	lpm	r22, Z
    32bc:	db 96       	adiw	r26, 0x3b	; 59
    32be:	6c 93       	st	X, r22
    32c0:	db 97       	sbiw	r26, 0x3b	; 59
    32c2:	98 2f       	mov	r25, r24
    32c4:	96 95       	lsr	r25
    32c6:	96 95       	lsr	r25
    32c8:	96 95       	lsr	r25
    32ca:	dc 96       	adiw	r26, 0x3c	; 60
    32cc:	9c 93       	st	X, r25
    32ce:	dc 97       	sbiw	r26, 0x3c	; 60
    32d0:	dd 96       	adiw	r26, 0x3d	; 61
    32d2:	4c 93       	st	X, r20
    32d4:	dd 97       	sbiw	r26, 0x3d	; 61
    32d6:	e8 2f       	mov	r30, r24
    32d8:	e7 70       	andi	r30, 0x07	; 7
    32da:	19 f0       	breq	.+6      	; 0x32e2 <_ZN14TFT_22_ILI92257setFontEPhb+0x54>
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	dc 96       	adiw	r26, 0x3c	; 60
    32e0:	9c 93       	st	X, r25
    32e2:	08 95       	ret

000032e4 <_ZN14TFT_22_ILI922510startWriteEv>:
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	fc 01       	movw	r30, r24
    32ea:	ec 01       	movw	r28, r24
    32ec:	ee 96       	adiw	r28, 0x3e	; 62
    32ee:	88 81       	ld	r24, Y
    32f0:	99 81       	ldd	r25, Y+1	; 0x01
    32f2:	aa 81       	ldd	r26, Y+2	; 0x02
    32f4:	bb 81       	ldd	r27, Y+3	; 0x03
    32f6:	ac 01       	movw	r20, r24
    32f8:	bd 01       	movw	r22, r26
    32fa:	4f 5f       	subi	r20, 0xFF	; 255
    32fc:	5f 4f       	sbci	r21, 0xFF	; 255
    32fe:	6f 4f       	sbci	r22, 0xFF	; 255
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	48 83       	st	Y, r20
    3304:	59 83       	std	Y+1, r21	; 0x01
    3306:	6a 83       	std	Y+2, r22	; 0x02
    3308:	7b 83       	std	Y+3, r23	; 0x03
    330a:	89 2b       	or	r24, r25
    330c:	8a 2b       	or	r24, r26
    330e:	8b 2b       	or	r24, r27
    3310:	29 f5       	brne	.+74     	; 0x335c <_ZN14TFT_22_ILI922510startWriteEv+0x78>
    3312:	82 85       	ldd	r24, Z+10	; 0x0a
    3314:	87 ff       	sbrs	r24, 7
    3316:	1b c0       	rjmp	.+54     	; 0x334e <_ZN14TFT_22_ILI922510startWriteEv+0x6a>
    3318:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZN8SPIClass13interruptModeE>
    331c:	88 23       	and	r24, r24
    331e:	99 f0       	breq	.+38     	; 0x3346 <_ZN14TFT_22_ILI922510startWriteEv+0x62>
    3320:	2f b7       	in	r18, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZN8SPIClass13interruptModeE>
    3328:	81 30       	cpi	r24, 0x01	; 1
    332a:	59 f4       	brne	.+22     	; 0x3342 <_ZN14TFT_22_ILI922510startWriteEv+0x5e>
    332c:	8d b3       	in	r24, 0x1d	; 29
    332e:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_ZN8SPIClass13interruptSaveE>
    3332:	9d b3       	in	r25, 0x1d	; 29
    3334:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <_ZN8SPIClass13interruptMaskE>
    3338:	80 95       	com	r24
    333a:	89 23       	and	r24, r25
    333c:	8d bb       	out	0x1d, r24	; 29
    333e:	2f bf       	out	0x3f, r18	; 63
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <_ZN14TFT_22_ILI922510startWriteEv+0x62>
    3342:	20 93 6e 04 	sts	0x046E, r18	; 0x80046e <_ZN8SPIClass13interruptSaveE>
    3346:	80 e5       	ldi	r24, 0x50	; 80
    3348:	8c bd       	out	0x2c, r24	; 44
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	8d bd       	out	0x2d, r24	; 45
    334e:	a4 89       	ldd	r26, Z+20	; 0x14
    3350:	b5 89       	ldd	r27, Z+21	; 0x15
    3352:	9c 91       	ld	r25, X
    3354:	80 8d       	ldd	r24, Z+24	; 0x18
    3356:	80 95       	com	r24
    3358:	89 23       	and	r24, r25
    335a:	8c 93       	st	X, r24
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <_ZN14TFT_22_ILI92258endWriteEv>:
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	fc 01       	movw	r30, r24
    3368:	ec 01       	movw	r28, r24
    336a:	ee 96       	adiw	r28, 0x3e	; 62
    336c:	88 81       	ld	r24, Y
    336e:	99 81       	ldd	r25, Y+1	; 0x01
    3370:	aa 81       	ldd	r26, Y+2	; 0x02
    3372:	bb 81       	ldd	r27, Y+3	; 0x03
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	a1 09       	sbc	r26, r1
    3378:	b1 09       	sbc	r27, r1
    337a:	88 83       	st	Y, r24
    337c:	99 83       	std	Y+1, r25	; 0x01
    337e:	aa 83       	std	Y+2, r26	; 0x02
    3380:	bb 83       	std	Y+3, r27	; 0x03
    3382:	89 2b       	or	r24, r25
    3384:	8a 2b       	or	r24, r26
    3386:	8b 2b       	or	r24, r27
    3388:	c9 f4       	brne	.+50     	; 0x33bc <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    338a:	a4 89       	ldd	r26, Z+20	; 0x14
    338c:	b5 89       	ldd	r27, Z+21	; 0x15
    338e:	9c 91       	ld	r25, X
    3390:	80 8d       	ldd	r24, Z+24	; 0x18
    3392:	89 2b       	or	r24, r25
    3394:	8c 93       	st	X, r24
    3396:	82 85       	ldd	r24, Z+10	; 0x0a
    3398:	87 ff       	sbrs	r24, 7
    339a:	10 c0       	rjmp	.+32     	; 0x33bc <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    339c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZN8SPIClass13interruptModeE>
    33a0:	88 23       	and	r24, r24
    33a2:	61 f0       	breq	.+24     	; 0x33bc <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    33a4:	9f b7       	in	r25, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <_ZN8SPIClass13interruptModeE>
    33ac:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <_ZN8SPIClass13interruptSaveE>
    33b0:	21 30       	cpi	r18, 0x01	; 1
    33b2:	19 f4       	brne	.+6      	; 0x33ba <_ZN14TFT_22_ILI92258endWriteEv+0x58>
    33b4:	8d bb       	out	0x1d, r24	; 29
    33b6:	9f bf       	out	0x3f, r25	; 63
    33b8:	01 c0       	rjmp	.+2      	; 0x33bc <_ZN14TFT_22_ILI92258endWriteEv+0x5a>
    33ba:	8f bf       	out	0x3f, r24	; 63
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	08 95       	ret

000033c2 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t>:
    33c2:	af 92       	push	r10
    33c4:	bf 92       	push	r11
    33c6:	cf 92       	push	r12
    33c8:	df 92       	push	r13
    33ca:	ef 92       	push	r14
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	c4 54       	subi	r28, 0x44	; 68
    33da:	d1 09       	sbc	r29, r1
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	6c 01       	movw	r12, r24
    33e8:	7e af       	std	Y+62, r23	; 0x3e
    33ea:	6d af       	std	Y+61, r22	; 0x3d
    33ec:	21 96       	adiw	r28, 0x01	; 1
    33ee:	5f af       	std	Y+63, r21	; 0x3f
    33f0:	4e af       	std	Y+62, r20	; 0x3e
    33f2:	21 97       	sbiw	r28, 0x01	; 1
    33f4:	23 96       	adiw	r28, 0x03	; 3
    33f6:	3f af       	std	Y+63, r19	; 0x3f
    33f8:	2e af       	std	Y+62, r18	; 0x3e
    33fa:	23 97       	sbiw	r28, 0x03	; 3
    33fc:	25 96       	adiw	r28, 0x05	; 5
    33fe:	1f af       	std	Y+63, r17	; 0x3f
    3400:	0e af       	std	Y+62, r16	; 0x3e
    3402:	25 97       	sbiw	r28, 0x05	; 5
    3404:	0e 2d       	mov	r16, r14
    3406:	10 e0       	ldi	r17, 0x00	; 0
    3408:	1f 92       	push	r1
    340a:	ef 92       	push	r14
    340c:	25 96       	adiw	r28, 0x05	; 5
    340e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3410:	25 97       	sbiw	r28, 0x05	; 5
    3412:	8f 93       	push	r24
    3414:	24 96       	adiw	r28, 0x04	; 4
    3416:	8f ad       	ldd	r24, Y+63	; 0x3f
    3418:	24 97       	sbiw	r28, 0x04	; 4
    341a:	8f 93       	push	r24
    341c:	23 96       	adiw	r28, 0x03	; 3
    341e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3420:	23 97       	sbiw	r28, 0x03	; 3
    3422:	8f 93       	push	r24
    3424:	22 96       	adiw	r28, 0x02	; 2
    3426:	8f ad       	ldd	r24, Y+63	; 0x3f
    3428:	22 97       	sbiw	r28, 0x02	; 2
    342a:	8f 93       	push	r24
    342c:	21 96       	adiw	r28, 0x01	; 1
    342e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3430:	21 97       	sbiw	r28, 0x01	; 1
    3432:	8f 93       	push	r24
    3434:	8f ad       	ldd	r24, Y+63	; 0x3f
    3436:	8f 93       	push	r24
    3438:	8e ad       	ldd	r24, Y+62	; 0x3e
    343a:	8f 93       	push	r24
    343c:	8d ad       	ldd	r24, Y+61	; 0x3d
    343e:	8f 93       	push	r24
    3440:	81 ea       	ldi	r24, 0xA1	; 161
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	9f 93       	push	r25
    3446:	8f 93       	push	r24
    3448:	9e 01       	movw	r18, r28
    344a:	2f 5f       	subi	r18, 0xFF	; 255
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	59 01       	movw	r10, r18
    3450:	3f 93       	push	r19
    3452:	2f 93       	push	r18
    3454:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <sprintf>
    3458:	b5 01       	movw	r22, r10
    345a:	82 e7       	ldi	r24, 0x72	; 114
    345c:	93 e0       	ldi	r25, 0x03	; 3
    345e:	0e 94 a1 10 	call	0x2142	; 0x2142 <_ZN5Print7printlnEPKc>
    3462:	f6 01       	movw	r30, r12
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	2d ad       	ldd	r18, Y+61	; 0x3d
    346c:	3e ad       	ldd	r19, Y+62	; 0x3e
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61
    3478:	82 17       	cp	r24, r18
    347a:	93 07       	cpc	r25, r19
    347c:	08 f4       	brcc	.+2      	; 0x3480 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0xbe>
    347e:	9c 01       	movw	r18, r24
    3480:	3e af       	std	Y+62, r19	; 0x3e
    3482:	2d af       	std	Y+61, r18	; 0x3d
    3484:	23 96       	adiw	r28, 0x03	; 3
    3486:	2e ad       	ldd	r18, Y+62	; 0x3e
    3488:	3f ad       	ldd	r19, Y+63	; 0x3f
    348a:	23 97       	sbiw	r28, 0x03	; 3
    348c:	82 17       	cp	r24, r18
    348e:	93 07       	cpc	r25, r19
    3490:	08 f4       	brcc	.+2      	; 0x3494 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0xd2>
    3492:	9c 01       	movw	r18, r24
    3494:	23 96       	adiw	r28, 0x03	; 3
    3496:	3f af       	std	Y+63, r19	; 0x3f
    3498:	2e af       	std	Y+62, r18	; 0x3e
    349a:	23 97       	sbiw	r28, 0x03	; 3
    349c:	f6 01       	movw	r30, r12
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	21 96       	adiw	r28, 0x01	; 1
    34a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    34a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    34aa:	21 97       	sbiw	r28, 0x01	; 1
    34ac:	82 17       	cp	r24, r18
    34ae:	93 07       	cpc	r25, r19
    34b0:	08 f4       	brcc	.+2      	; 0x34b4 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0xf2>
    34b2:	9c 01       	movw	r18, r24
    34b4:	21 96       	adiw	r28, 0x01	; 1
    34b6:	3f af       	std	Y+63, r19	; 0x3f
    34b8:	2e af       	std	Y+62, r18	; 0x3e
    34ba:	21 97       	sbiw	r28, 0x01	; 1
    34bc:	25 96       	adiw	r28, 0x05	; 5
    34be:	2e ad       	ldd	r18, Y+62	; 0x3e
    34c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    34c2:	25 97       	sbiw	r28, 0x05	; 5
    34c4:	82 17       	cp	r24, r18
    34c6:	93 07       	cpc	r25, r19
    34c8:	08 f4       	brcc	.+2      	; 0x34cc <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x10a>
    34ca:	9c 01       	movw	r18, r24
    34cc:	25 96       	adiw	r28, 0x05	; 5
    34ce:	3f af       	std	Y+63, r19	; 0x3f
    34d0:	2e af       	std	Y+62, r18	; 0x3e
    34d2:	25 97       	sbiw	r28, 0x05	; 5
    34d4:	ae 01       	movw	r20, r28
    34d6:	41 5c       	subi	r20, 0xC1	; 193
    34d8:	5f 4f       	sbci	r21, 0xFF	; 255
    34da:	be 01       	movw	r22, r28
    34dc:	63 5c       	subi	r22, 0xC3	; 195
    34de:	7f 4f       	sbci	r23, 0xFF	; 255
    34e0:	c6 01       	movw	r24, r12
    34e2:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>
    34e6:	ae 01       	movw	r20, r28
    34e8:	4d 5b       	subi	r20, 0xBD	; 189
    34ea:	5f 4f       	sbci	r21, 0xFF	; 255
    34ec:	be 01       	movw	r22, r28
    34ee:	6f 5b       	subi	r22, 0xBF	; 191
    34f0:	7f 4f       	sbci	r23, 0xFF	; 255
    34f2:	c6 01       	movw	r24, r12
    34f4:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>
    34f8:	23 96       	adiw	r28, 0x03	; 3
    34fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    34fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    34fe:	23 97       	sbiw	r28, 0x03	; 3
    3500:	8d ad       	ldd	r24, Y+61	; 0x3d
    3502:	9e ad       	ldd	r25, Y+62	; 0x3e
    3504:	28 17       	cp	r18, r24
    3506:	39 07       	cpc	r19, r25
    3508:	30 f4       	brcc	.+12     	; 0x3516 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x154>
    350a:	3e af       	std	Y+62, r19	; 0x3e
    350c:	2d af       	std	Y+61, r18	; 0x3d
    350e:	23 96       	adiw	r28, 0x03	; 3
    3510:	9f af       	std	Y+63, r25	; 0x3f
    3512:	8e af       	std	Y+62, r24	; 0x3e
    3514:	23 97       	sbiw	r28, 0x03	; 3
    3516:	25 96       	adiw	r28, 0x05	; 5
    3518:	2e ad       	ldd	r18, Y+62	; 0x3e
    351a:	3f ad       	ldd	r19, Y+63	; 0x3f
    351c:	25 97       	sbiw	r28, 0x05	; 5
    351e:	21 96       	adiw	r28, 0x01	; 1
    3520:	8e ad       	ldd	r24, Y+62	; 0x3e
    3522:	9f ad       	ldd	r25, Y+63	; 0x3f
    3524:	21 97       	sbiw	r28, 0x01	; 1
    3526:	28 17       	cp	r18, r24
    3528:	39 07       	cpc	r19, r25
    352a:	40 f4       	brcc	.+16     	; 0x353c <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x17a>
    352c:	21 96       	adiw	r28, 0x01	; 1
    352e:	3f af       	std	Y+63, r19	; 0x3f
    3530:	2e af       	std	Y+62, r18	; 0x3e
    3532:	21 97       	sbiw	r28, 0x01	; 1
    3534:	25 96       	adiw	r28, 0x05	; 5
    3536:	9f af       	std	Y+63, r25	; 0x3f
    3538:	8e af       	std	Y+62, r24	; 0x3e
    353a:	25 97       	sbiw	r28, 0x05	; 5
    353c:	c6 01       	movw	r24, r12
    353e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    3542:	f6 01       	movw	r30, r12
    3544:	82 8d       	ldd	r24, Z+26	; 0x1a
    3546:	88 23       	and	r24, r24
    3548:	51 f0       	breq	.+20     	; 0x355e <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x19c>
    354a:	96 01       	movw	r18, r12
    354c:	48 e0       	ldi	r20, 0x08	; 8
    354e:	84 9f       	mul	r24, r20
    3550:	20 0d       	add	r18, r0
    3552:	31 1d       	adc	r19, r1
    3554:	11 24       	eor	r1, r1
    3556:	f8 01       	movw	r30, r16
    3558:	e2 0f       	add	r30, r18
    355a:	f3 1f       	adc	r31, r19
    355c:	e4 88       	ldd	r14, Z+20	; 0x14
    355e:	0e 2d       	mov	r16, r14
    3560:	10 e0       	ldi	r17, 0x00	; 0
    3562:	a8 01       	movw	r20, r16
    3564:	83 e0       	ldi	r24, 0x03	; 3
    3566:	44 0f       	add	r20, r20
    3568:	55 1f       	adc	r21, r21
    356a:	8a 95       	dec	r24
    356c:	e1 f7       	brne	.-8      	; 0x3566 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x1a4>
    356e:	50 61       	ori	r21, 0x10	; 16
    3570:	63 e0       	ldi	r22, 0x03	; 3
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	c6 01       	movw	r24, r12
    3576:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    357a:	23 96       	adiw	r28, 0x03	; 3
    357c:	4e ad       	ldd	r20, Y+62	; 0x3e
    357e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3580:	23 97       	sbiw	r28, 0x03	; 3
    3582:	66 e3       	ldi	r22, 0x36	; 54
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	c6 01       	movw	r24, r12
    3588:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    358c:	4d ad       	ldd	r20, Y+61	; 0x3d
    358e:	5e ad       	ldd	r21, Y+62	; 0x3e
    3590:	67 e3       	ldi	r22, 0x37	; 55
    3592:	70 e0       	ldi	r23, 0x00	; 0
    3594:	c6 01       	movw	r24, r12
    3596:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    359a:	25 96       	adiw	r28, 0x05	; 5
    359c:	4e ad       	ldd	r20, Y+62	; 0x3e
    359e:	5f ad       	ldd	r21, Y+63	; 0x3f
    35a0:	25 97       	sbiw	r28, 0x05	; 5
    35a2:	68 e3       	ldi	r22, 0x38	; 56
    35a4:	70 e0       	ldi	r23, 0x00	; 0
    35a6:	c6 01       	movw	r24, r12
    35a8:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    35ac:	21 96       	adiw	r28, 0x01	; 1
    35ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    35b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    35b2:	21 97       	sbiw	r28, 0x01	; 1
    35b4:	69 e3       	ldi	r22, 0x39	; 57
    35b6:	70 e0       	ldi	r23, 0x00	; 0
    35b8:	c6 01       	movw	r24, r12
    35ba:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    35be:	1f 92       	push	r1
    35c0:	ef 92       	push	r14
    35c2:	25 96       	adiw	r28, 0x05	; 5
    35c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    35c6:	25 97       	sbiw	r28, 0x05	; 5
    35c8:	8f 93       	push	r24
    35ca:	24 96       	adiw	r28, 0x04	; 4
    35cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    35ce:	24 97       	sbiw	r28, 0x04	; 4
    35d0:	8f 93       	push	r24
    35d2:	23 96       	adiw	r28, 0x03	; 3
    35d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    35d6:	23 97       	sbiw	r28, 0x03	; 3
    35d8:	8f 93       	push	r24
    35da:	22 96       	adiw	r28, 0x02	; 2
    35dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    35de:	22 97       	sbiw	r28, 0x02	; 2
    35e0:	8f 93       	push	r24
    35e2:	21 96       	adiw	r28, 0x01	; 1
    35e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    35e6:	21 97       	sbiw	r28, 0x01	; 1
    35e8:	8f 93       	push	r24
    35ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    35ec:	8f 93       	push	r24
    35ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    35f0:	8f 93       	push	r24
    35f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    35f4:	8f 93       	push	r24
    35f6:	81 ed       	ldi	r24, 0xD1	; 209
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	9f 93       	push	r25
    35fc:	8f 93       	push	r24
    35fe:	bf 92       	push	r11
    3600:	af 92       	push	r10
    3602:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <sprintf>
    3606:	b5 01       	movw	r22, r10
    3608:	82 e7       	ldi	r24, 0x72	; 114
    360a:	93 e0       	ldi	r25, 0x03	; 3
    360c:	0e 94 a1 10 	call	0x2142	; 0x2142 <_ZN5Print7printlnEPKc>
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	c8 01       	movw	r24, r16
    361c:	95 95       	asr	r25
    361e:	87 95       	ror	r24
    3620:	81 30       	cpi	r24, 0x01	; 1
    3622:	91 05       	cpc	r25, r1
    3624:	81 f0       	breq	.+32     	; 0x3646 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x284>
    3626:	3c f4       	brge	.+14     	; 0x3636 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x274>
    3628:	89 2b       	or	r24, r25
    362a:	59 f5       	brne	.+86     	; 0x3682 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2c0>
    362c:	23 96       	adiw	r28, 0x03	; 3
    362e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3630:	5f ad       	ldd	r21, Y+63	; 0x3f
    3632:	23 97       	sbiw	r28, 0x03	; 3
    3634:	0a c0       	rjmp	.+20     	; 0x364a <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x288>
    3636:	82 30       	cpi	r24, 0x02	; 2
    3638:	91 05       	cpc	r25, r1
    363a:	89 f0       	breq	.+34     	; 0x365e <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x29c>
    363c:	03 97       	sbiw	r24, 0x03	; 3
    363e:	09 f5       	brne	.+66     	; 0x3682 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2c0>
    3640:	4d ad       	ldd	r20, Y+61	; 0x3d
    3642:	5e ad       	ldd	r21, Y+62	; 0x3e
    3644:	10 c0       	rjmp	.+32     	; 0x3666 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2a4>
    3646:	4d ad       	ldd	r20, Y+61	; 0x3d
    3648:	5e ad       	ldd	r21, Y+62	; 0x3e
    364a:	60 e2       	ldi	r22, 0x20	; 32
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	c6 01       	movw	r24, r12
    3650:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3654:	25 96       	adiw	r28, 0x05	; 5
    3656:	4e ad       	ldd	r20, Y+62	; 0x3e
    3658:	5f ad       	ldd	r21, Y+63	; 0x3f
    365a:	25 97       	sbiw	r28, 0x05	; 5
    365c:	0d c0       	rjmp	.+26     	; 0x3678 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t+0x2b6>
    365e:	23 96       	adiw	r28, 0x03	; 3
    3660:	4e ad       	ldd	r20, Y+62	; 0x3e
    3662:	5f ad       	ldd	r21, Y+63	; 0x3f
    3664:	23 97       	sbiw	r28, 0x03	; 3
    3666:	60 e2       	ldi	r22, 0x20	; 32
    3668:	70 e0       	ldi	r23, 0x00	; 0
    366a:	c6 01       	movw	r24, r12
    366c:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3670:	21 96       	adiw	r28, 0x01	; 1
    3672:	4e ad       	ldd	r20, Y+62	; 0x3e
    3674:	5f ad       	ldd	r21, Y+63	; 0x3f
    3676:	21 97       	sbiw	r28, 0x01	; 1
    3678:	61 e2       	ldi	r22, 0x21	; 33
    367a:	70 e0       	ldi	r23, 0x00	; 0
    367c:	c6 01       	movw	r24, r12
    367e:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3682:	62 e2       	ldi	r22, 0x22	; 34
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	c6 01       	movw	r24, r12
    3688:	0e 94 84 18 	call	0x3108	; 0x3108 <_ZN14TFT_22_ILI922515_writeCommand16Ej>
    368c:	c6 01       	movw	r24, r12
    368e:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    3692:	cc 5b       	subi	r28, 0xBC	; 188
    3694:	df 4f       	sbci	r29, 0xFF	; 255
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	ef 90       	pop	r14
    36aa:	df 90       	pop	r13
    36ac:	cf 90       	pop	r12
    36ae:	bf 90       	pop	r11
    36b0:	af 90       	pop	r10
    36b2:	08 95       	ret

000036b4 <_ZN14TFT_22_ILI922510_setWindowEjjjj>:
    36b4:	ef 92       	push	r14
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    36ba:	e7 e0       	ldi	r30, 0x07	; 7
    36bc:	ee 2e       	mov	r14, r30
    36be:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t>
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	ef 90       	pop	r14
    36c8:	08 95       	ret

000036ca <_ZN14TFT_22_ILI922513fillRectangleEjjjjj>:
    36ca:	6f 92       	push	r6
    36cc:	7f 92       	push	r7
    36ce:	8f 92       	push	r8
    36d0:	9f 92       	push	r9
    36d2:	af 92       	push	r10
    36d4:	bf 92       	push	r11
    36d6:	cf 92       	push	r12
    36d8:	df 92       	push	r13
    36da:	ef 92       	push	r14
    36dc:	ff 92       	push	r15
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	5c 01       	movw	r10, r24
    36e8:	4b 01       	movw	r8, r22
    36ea:	3a 01       	movw	r6, r20
    36ec:	e9 01       	movw	r28, r18
    36ee:	68 01       	movw	r12, r16
    36f0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <_ZN14TFT_22_ILI922510_setWindowEjjjj>
    36f4:	c5 01       	movw	r24, r10
    36f6:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    36fa:	8f ef       	ldi	r24, 0xFF	; 255
    36fc:	c8 1a       	sub	r12, r24
    36fe:	d8 0a       	sbc	r13, r24
    3700:	c6 18       	sub	r12, r6
    3702:	d7 08       	sbc	r13, r7
    3704:	21 96       	adiw	r28, 0x01	; 1
    3706:	c8 19       	sub	r28, r8
    3708:	d9 09       	sbc	r29, r9
    370a:	cc 9e       	mul	r12, r28
    370c:	40 01       	movw	r8, r0
    370e:	cd 9e       	mul	r12, r29
    3710:	90 0c       	add	r9, r0
    3712:	dc 9e       	mul	r13, r28
    3714:	90 0c       	add	r9, r0
    3716:	11 24       	eor	r1, r1
    3718:	81 14       	cp	r8, r1
    371a:	91 04       	cpc	r9, r1
    371c:	41 f0       	breq	.+16     	; 0x372e <_ZN14TFT_22_ILI922513fillRectangleEjjjjj+0x64>
    371e:	b7 01       	movw	r22, r14
    3720:	c5 01       	movw	r24, r10
    3722:	0e 94 ce 18 	call	0x319c	; 0x319c <_ZN14TFT_22_ILI922512_writeData16Ej>
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	88 1a       	sub	r8, r24
    372a:	91 08       	sbc	r9, r1
    372c:	f5 cf       	rjmp	.-22     	; 0x3718 <_ZN14TFT_22_ILI922513fillRectangleEjjjjj+0x4e>
    372e:	c5 01       	movw	r24, r10
    3730:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    3734:	c5 01       	movw	r24, r10
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	ff 90       	pop	r15
    3740:	ef 90       	pop	r14
    3742:	df 90       	pop	r13
    3744:	cf 90       	pop	r12
    3746:	bf 90       	pop	r11
    3748:	af 90       	pop	r10
    374a:	9f 90       	pop	r9
    374c:	8f 90       	pop	r8
    374e:	7f 90       	pop	r7
    3750:	6f 90       	pop	r6
    3752:	0c 94 27 19 	jmp	0x324e	; 0x324e <_ZN14TFT_22_ILI922512_resetWindowEv>

00003756 <_ZN14TFT_22_ILI92255clearEv>:
    3756:	df 92       	push	r13
    3758:	ef 92       	push	r14
    375a:	ff 92       	push	r15
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    3764:	ec 01       	movw	r28, r24
    3766:	da 8c       	ldd	r13, Y+26	; 0x1a
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <_ZN14TFT_22_ILI922514setOrientationEh>
    376e:	0a 81       	ldd	r16, Y+2	; 0x02
    3770:	1b 81       	ldd	r17, Y+3	; 0x03
    3772:	01 50       	subi	r16, 0x01	; 1
    3774:	11 09       	sbc	r17, r1
    3776:	28 81       	ld	r18, Y
    3778:	39 81       	ldd	r19, Y+1	; 0x01
    377a:	21 50       	subi	r18, 0x01	; 1
    377c:	31 09       	sbc	r19, r1
    377e:	e1 2c       	mov	r14, r1
    3780:	f1 2c       	mov	r15, r1
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	ce 01       	movw	r24, r28
    378c:	0e 94 65 1b 	call	0x36ca	; 0x36ca <_ZN14TFT_22_ILI922513fillRectangleEjjjjj>
    3790:	6d 2d       	mov	r22, r13
    3792:	ce 01       	movw	r24, r28
    3794:	0e 94 63 18 	call	0x30c6	; 0x30c6 <_ZN14TFT_22_ILI922514setOrientationEh>
    3798:	6a e0       	ldi	r22, 0x0A	; 10
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	df 91       	pop	r29
    37a2:	cf 91       	pop	r28
    37a4:	1f 91       	pop	r17
    37a6:	0f 91       	pop	r16
    37a8:	ff 90       	pop	r15
    37aa:	ef 90       	pop	r14
    37ac:	df 90       	pop	r13
    37ae:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <delay>

000037b2 <_ZN14TFT_22_ILI92255beginEv>:
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	ec 01       	movw	r28, r24
    37b8:	8e 81       	ldd	r24, Y+6	; 0x06
    37ba:	18 16       	cp	r1, r24
    37bc:	3c f4       	brge	.+14     	; 0x37cc <_ZN14TFT_22_ILI92255beginEv+0x1a>
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	8e 81       	ldd	r24, Y+6	; 0x06
    37c8:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    37cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    37ce:	18 16       	cp	r1, r24
    37d0:	3c f4       	brge	.+14     	; 0x37e0 <_ZN14TFT_22_ILI92255beginEv+0x2e>
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	ce 01       	movw	r24, r28
    37dc:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN14TFT_22_ILI922512setBacklightEb>
    37e0:	61 e0       	ldi	r22, 0x01	; 1
    37e2:	8f 81       	ldd	r24, Y+7	; 0x07
    37e4:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	8f 81       	ldd	r24, Y+7	; 0x07
    37ec:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	88 85       	ldd	r24, Y+8	; 0x08
    37f4:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	88 85       	ldd	r24, Y+8	; 0x08
    37fc:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    3800:	88 85       	ldd	r24, Y+8	; 0x08
    3802:	08 2e       	mov	r0, r24
    3804:	00 0c       	add	r0, r0
    3806:	99 0b       	sbc	r25, r25
    3808:	fc 01       	movw	r30, r24
    380a:	ee 5b       	subi	r30, 0xBE	; 190
    380c:	fd 4e       	sbci	r31, 0xED	; 237
    380e:	e4 91       	lpm	r30, Z
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	ee 0f       	add	r30, r30
    3814:	ff 1f       	adc	r31, r31
    3816:	ea 5a       	subi	r30, 0xAA	; 170
    3818:	fd 4e       	sbci	r31, 0xED	; 237
    381a:	25 91       	lpm	r18, Z+
    381c:	34 91       	lpm	r19, Z
    381e:	3d 8b       	std	Y+21, r19	; 0x15
    3820:	2c 8b       	std	Y+20, r18	; 0x14
    3822:	fc 01       	movw	r30, r24
    3824:	e2 5d       	subi	r30, 0xD2	; 210
    3826:	fd 4e       	sbci	r31, 0xED	; 237
    3828:	e4 91       	lpm	r30, Z
    382a:	e8 8f       	std	Y+24, r30	; 0x18
    382c:	8f 81       	ldd	r24, Y+7	; 0x07
    382e:	08 2e       	mov	r0, r24
    3830:	00 0c       	add	r0, r0
    3832:	99 0b       	sbc	r25, r25
    3834:	fc 01       	movw	r30, r24
    3836:	ee 5b       	subi	r30, 0xBE	; 190
    3838:	fd 4e       	sbci	r31, 0xED	; 237
    383a:	e4 91       	lpm	r30, Z
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	ee 0f       	add	r30, r30
    3840:	ff 1f       	adc	r31, r31
    3842:	ea 5a       	subi	r30, 0xAA	; 170
    3844:	fd 4e       	sbci	r31, 0xED	; 237
    3846:	25 91       	lpm	r18, Z+
    3848:	34 91       	lpm	r19, Z
    384a:	39 8b       	std	Y+17, r19	; 0x11
    384c:	28 8b       	std	Y+16, r18	; 0x10
    384e:	fc 01       	movw	r30, r24
    3850:	e2 5d       	subi	r30, 0xD2	; 210
    3852:	fd 4e       	sbci	r31, 0xED	; 237
    3854:	e4 91       	lpm	r30, Z
    3856:	e9 8f       	std	Y+25, r30	; 0x19
    3858:	8a 85       	ldd	r24, Y+10	; 0x0a
    385a:	87 fd       	sbrc	r24, 7
    385c:	49 c0       	rjmp	.+146    	; 0x38f0 <_ZN14TFT_22_ILI92255beginEv+0x13e>
    385e:	61 e0       	ldi	r22, 0x01	; 1
    3860:	89 85       	ldd	r24, Y+9	; 0x09
    3862:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
    3866:	60 e0       	ldi	r22, 0x00	; 0
    3868:	89 85       	ldd	r24, Y+9	; 0x09
    386a:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    386e:	61 e0       	ldi	r22, 0x01	; 1
    3870:	8a 85       	ldd	r24, Y+10	; 0x0a
    3872:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
    3876:	61 e0       	ldi	r22, 0x01	; 1
    3878:	8a 85       	ldd	r24, Y+10	; 0x0a
    387a:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    387e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3880:	08 2e       	mov	r0, r24
    3882:	00 0c       	add	r0, r0
    3884:	99 0b       	sbc	r25, r25
    3886:	fc 01       	movw	r30, r24
    3888:	ee 5b       	subi	r30, 0xBE	; 190
    388a:	fd 4e       	sbci	r31, 0xED	; 237
    388c:	e4 91       	lpm	r30, Z
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	ee 0f       	add	r30, r30
    3892:	ff 1f       	adc	r31, r31
    3894:	ea 5a       	subi	r30, 0xAA	; 170
    3896:	fd 4e       	sbci	r31, 0xED	; 237
    3898:	a5 91       	lpm	r26, Z+
    389a:	b4 91       	lpm	r27, Z
    389c:	bf 87       	std	Y+15, r27	; 0x0f
    389e:	ae 87       	std	Y+14, r26	; 0x0e
    38a0:	fc 01       	movw	r30, r24
    38a2:	e2 5d       	subi	r30, 0xD2	; 210
    38a4:	fd 4e       	sbci	r31, 0xED	; 237
    38a6:	84 91       	lpm	r24, Z
    38a8:	8f 8b       	std	Y+23, r24	; 0x17
    38aa:	29 85       	ldd	r18, Y+9	; 0x09
    38ac:	02 2e       	mov	r0, r18
    38ae:	00 0c       	add	r0, r0
    38b0:	33 0b       	sbc	r19, r19
    38b2:	f9 01       	movw	r30, r18
    38b4:	ee 5b       	subi	r30, 0xBE	; 190
    38b6:	fd 4e       	sbci	r31, 0xED	; 237
    38b8:	e4 91       	lpm	r30, Z
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	ee 0f       	add	r30, r30
    38be:	ff 1f       	adc	r31, r31
    38c0:	ea 5a       	subi	r30, 0xAA	; 170
    38c2:	fd 4e       	sbci	r31, 0xED	; 237
    38c4:	45 91       	lpm	r20, Z+
    38c6:	54 91       	lpm	r21, Z
    38c8:	5d 87       	std	Y+13, r21	; 0x0d
    38ca:	4c 87       	std	Y+12, r20	; 0x0c
    38cc:	f9 01       	movw	r30, r18
    38ce:	e2 5d       	subi	r30, 0xD2	; 210
    38d0:	fd 4e       	sbci	r31, 0xED	; 237
    38d2:	e4 91       	lpm	r30, Z
    38d4:	ee 8b       	std	Y+22, r30	; 0x16
    38d6:	9c 91       	ld	r25, X
    38d8:	e8 2f       	mov	r30, r24
    38da:	e0 95       	com	r30
    38dc:	e9 23       	and	r30, r25
    38de:	ec 93       	st	X, r30
    38e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    38e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    38e4:	90 81       	ld	r25, Z
    38e6:	8e 89       	ldd	r24, Y+22	; 0x16
    38e8:	80 95       	com	r24
    38ea:	89 23       	and	r24, r25
    38ec:	80 83       	st	Z, r24
    38ee:	06 c0       	rjmp	.+12     	; 0x38fc <_ZN14TFT_22_ILI92255beginEv+0x14a>
    38f0:	1f 86       	std	Y+15, r1	; 0x0f
    38f2:	1e 86       	std	Y+14, r1	; 0x0e
    38f4:	1f 8a       	std	Y+23, r1	; 0x17
    38f6:	1d 86       	std	Y+13, r1	; 0x0d
    38f8:	1c 86       	std	Y+12, r1	; 0x0c
    38fa:	1e 8a       	std	Y+22, r1	; 0x16
    38fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    38fe:	87 fd       	sbrc	r24, 7
    3900:	0e 94 49 24 	call	0x4892	; 0x4892 <_ZN8SPIClass5beginEv>
    3904:	8e 81       	ldd	r24, Y+6	; 0x06
    3906:	18 16       	cp	r1, r24
    3908:	ec f4       	brge	.+58     	; 0x3944 <_ZN14TFT_22_ILI92255beginEv+0x192>
    390a:	61 e0       	ldi	r22, 0x01	; 1
    390c:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    3910:	61 e0       	ldi	r22, 0x01	; 1
    3912:	70 e0       	ldi	r23, 0x00	; 0
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	8e 81       	ldd	r24, Y+6	; 0x06
    3920:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    3924:	6a e0       	ldi	r22, 0x0A	; 10
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    3930:	61 e0       	ldi	r22, 0x01	; 1
    3932:	8e 81       	ldd	r24, Y+6	; 0x06
    3934:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    3938:	62 e3       	ldi	r22, 0x32	; 50
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    3944:	ce 01       	movw	r24, r28
    3946:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	60 e1       	ldi	r22, 0x10	; 16
    3950:	70 e0       	ldi	r23, 0x00	; 0
    3952:	ce 01       	movw	r24, r28
    3954:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3958:	40 e0       	ldi	r20, 0x00	; 0
    395a:	50 e0       	ldi	r21, 0x00	; 0
    395c:	61 e1       	ldi	r22, 0x11	; 17
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	ce 01       	movw	r24, r28
    3962:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	50 e0       	ldi	r21, 0x00	; 0
    396a:	62 e1       	ldi	r22, 0x12	; 18
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	ce 01       	movw	r24, r28
    3970:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	50 e0       	ldi	r21, 0x00	; 0
    3978:	63 e1       	ldi	r22, 0x13	; 19
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	ce 01       	movw	r24, r28
    397e:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3982:	40 e0       	ldi	r20, 0x00	; 0
    3984:	50 e0       	ldi	r21, 0x00	; 0
    3986:	64 e1       	ldi	r22, 0x14	; 20
    3988:	70 e0       	ldi	r23, 0x00	; 0
    398a:	ce 01       	movw	r24, r28
    398c:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3990:	ce 01       	movw	r24, r28
    3992:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    3996:	68 e2       	ldi	r22, 0x28	; 40
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    39a2:	ce 01       	movw	r24, r28
    39a4:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    39a8:	48 e1       	ldi	r20, 0x18	; 24
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	61 e1       	ldi	r22, 0x11	; 17
    39ae:	70 e0       	ldi	r23, 0x00	; 0
    39b0:	ce 01       	movw	r24, r28
    39b2:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39b6:	41 e2       	ldi	r20, 0x21	; 33
    39b8:	51 e6       	ldi	r21, 0x61	; 97
    39ba:	62 e1       	ldi	r22, 0x12	; 18
    39bc:	70 e0       	ldi	r23, 0x00	; 0
    39be:	ce 01       	movw	r24, r28
    39c0:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39c4:	4f e6       	ldi	r20, 0x6F	; 111
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	63 e1       	ldi	r22, 0x13	; 19
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	ce 01       	movw	r24, r28
    39ce:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39d2:	4f e5       	ldi	r20, 0x5F	; 95
    39d4:	59 e4       	ldi	r21, 0x49	; 73
    39d6:	64 e1       	ldi	r22, 0x14	; 20
    39d8:	70 e0       	ldi	r23, 0x00	; 0
    39da:	ce 01       	movw	r24, r28
    39dc:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	58 e0       	ldi	r21, 0x08	; 8
    39e4:	60 e1       	ldi	r22, 0x10	; 16
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	ce 01       	movw	r24, r28
    39ea:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    39ee:	ce 01       	movw	r24, r28
    39f0:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    39f4:	6a e0       	ldi	r22, 0x0A	; 10
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    3a00:	ce 01       	movw	r24, r28
    3a02:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    3a06:	4b e3       	ldi	r20, 0x3B	; 59
    3a08:	50 e1       	ldi	r21, 0x10	; 16
    3a0a:	61 e1       	ldi	r22, 0x11	; 17
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	ce 01       	movw	r24, r28
    3a10:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a14:	ce 01       	movw	r24, r28
    3a16:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    3a1a:	62 e3       	ldi	r22, 0x32	; 50
    3a1c:	70 e0       	ldi	r23, 0x00	; 0
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    3a26:	ce 01       	movw	r24, r28
    3a28:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    3a2c:	4c e1       	ldi	r20, 0x1C	; 28
    3a2e:	51 e0       	ldi	r21, 0x01	; 1
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	ce 01       	movw	r24, r28
    3a36:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	51 e0       	ldi	r21, 0x01	; 1
    3a3e:	62 e0       	ldi	r22, 0x02	; 2
    3a40:	70 e0       	ldi	r23, 0x00	; 0
    3a42:	ce 01       	movw	r24, r28
    3a44:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a48:	48 e3       	ldi	r20, 0x38	; 56
    3a4a:	50 e1       	ldi	r21, 0x10	; 16
    3a4c:	63 e0       	ldi	r22, 0x03	; 3
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	ce 01       	movw	r24, r28
    3a52:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a56:	40 e0       	ldi	r20, 0x00	; 0
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	67 e0       	ldi	r22, 0x07	; 7
    3a5c:	70 e0       	ldi	r23, 0x00	; 0
    3a5e:	ce 01       	movw	r24, r28
    3a60:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a64:	48 e0       	ldi	r20, 0x08	; 8
    3a66:	58 e0       	ldi	r21, 0x08	; 8
    3a68:	68 e0       	ldi	r22, 0x08	; 8
    3a6a:	70 e0       	ldi	r23, 0x00	; 0
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	51 e1       	ldi	r21, 0x11	; 17
    3a76:	6b e0       	ldi	r22, 0x0B	; 11
    3a78:	70 e0       	ldi	r23, 0x00	; 0
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	50 e0       	ldi	r21, 0x00	; 0
    3a84:	6c e0       	ldi	r22, 0x0C	; 12
    3a86:	70 e0       	ldi	r23, 0x00	; 0
    3a88:	ce 01       	movw	r24, r28
    3a8a:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a8e:	41 e0       	ldi	r20, 0x01	; 1
    3a90:	5d e0       	ldi	r21, 0x0D	; 13
    3a92:	6f e0       	ldi	r22, 0x0F	; 15
    3a94:	70 e0       	ldi	r23, 0x00	; 0
    3a96:	ce 01       	movw	r24, r28
    3a98:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3a9c:	40 e2       	ldi	r20, 0x20	; 32
    3a9e:	50 e0       	ldi	r21, 0x00	; 0
    3aa0:	65 e1       	ldi	r22, 0x15	; 21
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3aaa:	40 e0       	ldi	r20, 0x00	; 0
    3aac:	50 e0       	ldi	r21, 0x00	; 0
    3aae:	60 e2       	ldi	r22, 0x20	; 32
    3ab0:	70 e0       	ldi	r23, 0x00	; 0
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	61 e2       	ldi	r22, 0x21	; 33
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3ac6:	40 e0       	ldi	r20, 0x00	; 0
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	60 e3       	ldi	r22, 0x30	; 48
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	ce 01       	movw	r24, r28
    3ad0:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3ad4:	4b ed       	ldi	r20, 0xDB	; 219
    3ad6:	50 e0       	ldi	r21, 0x00	; 0
    3ad8:	61 e3       	ldi	r22, 0x31	; 49
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	ce 01       	movw	r24, r28
    3ade:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	62 e3       	ldi	r22, 0x32	; 50
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	ce 01       	movw	r24, r28
    3aec:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3af0:	40 e0       	ldi	r20, 0x00	; 0
    3af2:	50 e0       	ldi	r21, 0x00	; 0
    3af4:	63 e3       	ldi	r22, 0x33	; 51
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	ce 01       	movw	r24, r28
    3afa:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3afe:	4b ed       	ldi	r20, 0xDB	; 219
    3b00:	50 e0       	ldi	r21, 0x00	; 0
    3b02:	64 e3       	ldi	r22, 0x34	; 52
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	ce 01       	movw	r24, r28
    3b08:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	65 e3       	ldi	r22, 0x35	; 53
    3b12:	70 e0       	ldi	r23, 0x00	; 0
    3b14:	ce 01       	movw	r24, r28
    3b16:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b1a:	4f ea       	ldi	r20, 0xAF	; 175
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	66 e3       	ldi	r22, 0x36	; 54
    3b20:	70 e0       	ldi	r23, 0x00	; 0
    3b22:	ce 01       	movw	r24, r28
    3b24:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	67 e3       	ldi	r22, 0x37	; 55
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	ce 01       	movw	r24, r28
    3b32:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b36:	4b ed       	ldi	r20, 0xDB	; 219
    3b38:	50 e0       	ldi	r21, 0x00	; 0
    3b3a:	68 e3       	ldi	r22, 0x38	; 56
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	ce 01       	movw	r24, r28
    3b40:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b44:	40 e0       	ldi	r20, 0x00	; 0
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	69 e3       	ldi	r22, 0x39	; 57
    3b4a:	70 e0       	ldi	r23, 0x00	; 0
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b52:	40 e0       	ldi	r20, 0x00	; 0
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	60 e5       	ldi	r22, 0x50	; 80
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b60:	48 e0       	ldi	r20, 0x08	; 8
    3b62:	58 e0       	ldi	r21, 0x08	; 8
    3b64:	61 e5       	ldi	r22, 0x51	; 81
    3b66:	70 e0       	ldi	r23, 0x00	; 0
    3b68:	ce 01       	movw	r24, r28
    3b6a:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b6e:	4a e0       	ldi	r20, 0x0A	; 10
    3b70:	58 e0       	ldi	r21, 0x08	; 8
    3b72:	62 e5       	ldi	r22, 0x52	; 82
    3b74:	70 e0       	ldi	r23, 0x00	; 0
    3b76:	ce 01       	movw	r24, r28
    3b78:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b7c:	4a e0       	ldi	r20, 0x0A	; 10
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	63 e5       	ldi	r22, 0x53	; 83
    3b82:	70 e0       	ldi	r23, 0x00	; 0
    3b84:	ce 01       	movw	r24, r28
    3b86:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b8a:	48 e0       	ldi	r20, 0x08	; 8
    3b8c:	5a e0       	ldi	r21, 0x0A	; 10
    3b8e:	64 e5       	ldi	r22, 0x54	; 84
    3b90:	70 e0       	ldi	r23, 0x00	; 0
    3b92:	ce 01       	movw	r24, r28
    3b94:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3b98:	48 e0       	ldi	r20, 0x08	; 8
    3b9a:	58 e0       	ldi	r21, 0x08	; 8
    3b9c:	65 e5       	ldi	r22, 0x55	; 85
    3b9e:	70 e0       	ldi	r23, 0x00	; 0
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3ba6:	40 e0       	ldi	r20, 0x00	; 0
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	66 e5       	ldi	r22, 0x56	; 86
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	ce 01       	movw	r24, r28
    3bb0:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	5a e0       	ldi	r21, 0x0A	; 10
    3bb8:	67 e5       	ldi	r22, 0x57	; 87
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3bc2:	40 e1       	ldi	r20, 0x10	; 16
    3bc4:	57 e0       	ldi	r21, 0x07	; 7
    3bc6:	68 e5       	ldi	r22, 0x58	; 88
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	ce 01       	movw	r24, r28
    3bcc:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3bd0:	40 e1       	ldi	r20, 0x10	; 16
    3bd2:	57 e0       	ldi	r21, 0x07	; 7
    3bd4:	69 e5       	ldi	r22, 0x59	; 89
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	ce 01       	movw	r24, r28
    3bda:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3bde:	42 e1       	ldi	r20, 0x12	; 18
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	67 e0       	ldi	r22, 0x07	; 7
    3be4:	70 e0       	ldi	r23, 0x00	; 0
    3be6:	ce 01       	movw	r24, r28
    3be8:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3bec:	ce 01       	movw	r24, r28
    3bee:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    3bf2:	62 e3       	ldi	r22, 0x32	; 50
    3bf4:	70 e0       	ldi	r23, 0x00	; 0
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <delay>
    3bfe:	ce 01       	movw	r24, r28
    3c00:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    3c04:	47 e1       	ldi	r20, 0x17	; 23
    3c06:	50 e1       	ldi	r21, 0x10	; 16
    3c08:	67 e0       	ldi	r22, 0x07	; 7
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3c12:	ce 01       	movw	r24, r28
    3c14:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    3c18:	61 e0       	ldi	r22, 0x01	; 1
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN14TFT_22_ILI922512setBacklightEb>
    3c20:	60 e0       	ldi	r22, 0x00	; 0
    3c22:	ce 01       	movw	r24, r28
    3c24:	0e 94 63 18 	call	0x30c6	; 0x30c6 <_ZN14TFT_22_ILI922514setOrientationEh>
    3c28:	1d 82       	std	Y+5, r1	; 0x05
    3c2a:	1c 82       	std	Y+4, r1	; 0x04
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <_ZN14TFT_22_ILI92255clearEv>

00003c36 <_ZN14TFT_22_ILI92259drawPixelEjjj>:
    3c36:	ef 92       	push	r14
    3c38:	ff 92       	push	r15
    3c3a:	0f 93       	push	r16
    3c3c:	1f 93       	push	r17
    3c3e:	cf 93       	push	r28
    3c40:	df 93       	push	r29
    3c42:	00 d0       	rcall	.+0      	; 0x3c44 <_ZN14TFT_22_ILI92259drawPixelEjjj+0xe>
    3c44:	00 d0       	rcall	.+0      	; 0x3c46 <_ZN14TFT_22_ILI92259drawPixelEjjj+0x10>
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
    3c4a:	7a 83       	std	Y+2, r23	; 0x02
    3c4c:	69 83       	std	Y+1, r22	; 0x01
    3c4e:	5c 83       	std	Y+4, r21	; 0x04
    3c50:	4b 83       	std	Y+3, r20	; 0x03
    3c52:	dc 01       	movw	r26, r24
    3c54:	4d 91       	ld	r20, X+
    3c56:	5c 91       	ld	r21, X
    3c58:	11 97       	sbiw	r26, 0x01	; 1
    3c5a:	64 17       	cp	r22, r20
    3c5c:	75 07       	cpc	r23, r21
    3c5e:	68 f5       	brcc	.+90     	; 0x3cba <_ZN14TFT_22_ILI92259drawPixelEjjj+0x84>
    3c60:	12 96       	adiw	r26, 0x02	; 2
    3c62:	6d 91       	ld	r22, X+
    3c64:	7c 91       	ld	r23, X
    3c66:	13 97       	sbiw	r26, 0x03	; 3
    3c68:	4b 81       	ldd	r20, Y+3	; 0x03
    3c6a:	5c 81       	ldd	r21, Y+4	; 0x04
    3c6c:	46 17       	cp	r20, r22
    3c6e:	57 07       	cpc	r21, r23
    3c70:	20 f5       	brcc	.+72     	; 0x3cba <_ZN14TFT_22_ILI92259drawPixelEjjj+0x84>
    3c72:	79 01       	movw	r14, r18
    3c74:	8c 01       	movw	r16, r24
    3c76:	ae 01       	movw	r20, r28
    3c78:	4d 5f       	subi	r20, 0xFD	; 253
    3c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7c:	be 01       	movw	r22, r28
    3c7e:	6f 5f       	subi	r22, 0xFF	; 255
    3c80:	7f 4f       	sbci	r23, 0xFF	; 255
    3c82:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN14TFT_22_ILI922518_orientCoordinatesERjS0_>
    3c86:	c8 01       	movw	r24, r16
    3c88:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    3c8c:	49 81       	ldd	r20, Y+1	; 0x01
    3c8e:	5a 81       	ldd	r21, Y+2	; 0x02
    3c90:	60 e2       	ldi	r22, 0x20	; 32
    3c92:	70 e0       	ldi	r23, 0x00	; 0
    3c94:	c8 01       	movw	r24, r16
    3c96:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3c9a:	4b 81       	ldd	r20, Y+3	; 0x03
    3c9c:	5c 81       	ldd	r21, Y+4	; 0x04
    3c9e:	61 e2       	ldi	r22, 0x21	; 33
    3ca0:	70 e0       	ldi	r23, 0x00	; 0
    3ca2:	c8 01       	movw	r24, r16
    3ca4:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3ca8:	a7 01       	movw	r20, r14
    3caa:	62 e2       	ldi	r22, 0x22	; 34
    3cac:	70 e0       	ldi	r23, 0x00	; 0
    3cae:	c8 01       	movw	r24, r16
    3cb0:	0e 94 17 19 	call	0x322e	; 0x322e <_ZN14TFT_22_ILI922514_writeRegisterEjj>
    3cb4:	c8 01       	movw	r24, r16
    3cb6:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	df 91       	pop	r29
    3cc4:	cf 91       	pop	r28
    3cc6:	1f 91       	pop	r17
    3cc8:	0f 91       	pop	r16
    3cca:	ff 90       	pop	r15
    3ccc:	ef 90       	pop	r14
    3cce:	08 95       	ret

00003cd0 <_ZN14TFT_22_ILI92258drawLineEjjjjj>:
    3cd0:	2f 92       	push	r2
    3cd2:	3f 92       	push	r3
    3cd4:	4f 92       	push	r4
    3cd6:	5f 92       	push	r5
    3cd8:	6f 92       	push	r6
    3cda:	7f 92       	push	r7
    3cdc:	8f 92       	push	r8
    3cde:	9f 92       	push	r9
    3ce0:	af 92       	push	r10
    3ce2:	bf 92       	push	r11
    3ce4:	cf 92       	push	r12
    3ce6:	df 92       	push	r13
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	cf 93       	push	r28
    3cf2:	df 93       	push	r29
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x26>
    3cf6:	00 d0       	rcall	.+0      	; 0x3cf8 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x28>
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x2a>
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    3cfe:	4c 01       	movw	r8, r24
    3d00:	7e 83       	std	Y+6, r23	; 0x06
    3d02:	6d 83       	std	Y+5, r22	; 0x05
    3d04:	6a 01       	movw	r12, r20
    3d06:	59 01       	movw	r10, r18
    3d08:	fc 82       	std	Y+4, r15	; 0x04
    3d0a:	eb 82       	std	Y+3, r14	; 0x03
    3d0c:	38 01       	movw	r6, r16
    3d0e:	64 1a       	sub	r6, r20
    3d10:	75 0a       	sbc	r7, r21
    3d12:	77 fe       	sbrs	r7, 7
    3d14:	03 c0       	rjmp	.+6      	; 0x3d1c <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x4c>
    3d16:	71 94       	neg	r7
    3d18:	61 94       	neg	r6
    3d1a:	71 08       	sbc	r7, r1
    3d1c:	75 01       	movw	r14, r10
    3d1e:	2d 81       	ldd	r18, Y+5	; 0x05
    3d20:	3e 81       	ldd	r19, Y+6	; 0x06
    3d22:	e2 1a       	sub	r14, r18
    3d24:	f3 0a       	sbc	r15, r19
    3d26:	f7 fe       	sbrs	r15, 7
    3d28:	03 c0       	rjmp	.+6      	; 0x3d30 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x60>
    3d2a:	f1 94       	neg	r15
    3d2c:	e1 94       	neg	r14
    3d2e:	f1 08       	sbc	r15, r1
    3d30:	e6 14       	cp	r14, r6
    3d32:	f7 04       	cpc	r15, r7
    3d34:	5c f4       	brge	.+22     	; 0x3d4c <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x7c>
    3d36:	9a 2d       	mov	r25, r10
    3d38:	8b 2d       	mov	r24, r11
    3d3a:	58 01       	movw	r10, r16
    3d3c:	09 2f       	mov	r16, r25
    3d3e:	18 2f       	mov	r17, r24
    3d40:	9d 81       	ldd	r25, Y+5	; 0x05
    3d42:	8e 81       	ldd	r24, Y+6	; 0x06
    3d44:	de 82       	std	Y+6, r13	; 0x06
    3d46:	cd 82       	std	Y+5, r12	; 0x05
    3d48:	c9 2e       	mov	r12, r25
    3d4a:	d8 2e       	mov	r13, r24
    3d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d50:	a8 16       	cp	r10, r24
    3d52:	b9 06       	cpc	r11, r25
    3d54:	58 f4       	brcc	.+22     	; 0x3d6c <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x9c>
    3d56:	9c 2d       	mov	r25, r12
    3d58:	8d 2d       	mov	r24, r13
    3d5a:	68 01       	movw	r12, r16
    3d5c:	09 2f       	mov	r16, r25
    3d5e:	18 2f       	mov	r17, r24
    3d60:	9d 81       	ldd	r25, Y+5	; 0x05
    3d62:	8e 81       	ldd	r24, Y+6	; 0x06
    3d64:	be 82       	std	Y+6, r11	; 0x06
    3d66:	ad 82       	std	Y+5, r10	; 0x05
    3d68:	a9 2e       	mov	r10, r25
    3d6a:	b8 2e       	mov	r11, r24
    3d6c:	95 01       	movw	r18, r10
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	9e 81       	ldd	r25, Y+6	; 0x06
    3d72:	28 1b       	sub	r18, r24
    3d74:	39 0b       	sbc	r19, r25
    3d76:	3a 83       	std	Y+2, r19	; 0x02
    3d78:	29 83       	std	Y+1, r18	; 0x01
    3d7a:	18 01       	movw	r2, r16
    3d7c:	2c 18       	sub	r2, r12
    3d7e:	3d 08       	sbc	r3, r13
    3d80:	37 fe       	sbrs	r3, 7
    3d82:	03 c0       	rjmp	.+6      	; 0x3d8a <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xba>
    3d84:	31 94       	neg	r3
    3d86:	21 94       	neg	r2
    3d88:	31 08       	sbc	r3, r1
    3d8a:	49 80       	ldd	r4, Y+1	; 0x01
    3d8c:	5a 80       	ldd	r5, Y+2	; 0x02
    3d8e:	57 fe       	sbrs	r5, 7
    3d90:	03 c0       	rjmp	.+6      	; 0x3d98 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xc8>
    3d92:	9f ef       	ldi	r25, 0xFF	; 255
    3d94:	49 1a       	sub	r4, r25
    3d96:	59 0a       	sbc	r5, r25
    3d98:	55 94       	asr	r5
    3d9a:	47 94       	ror	r4
    3d9c:	c0 16       	cp	r12, r16
    3d9e:	d1 06       	cpc	r13, r17
    3da0:	18 f0       	brcs	.+6      	; 0x3da8 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xd8>
    3da2:	0f ef       	ldi	r16, 0xFF	; 255
    3da4:	1f ef       	ldi	r17, 0xFF	; 255
    3da6:	02 c0       	rjmp	.+4      	; 0x3dac <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xdc>
    3da8:	01 e0       	ldi	r16, 0x01	; 1
    3daa:	10 e0       	ldi	r17, 0x00	; 0
    3dac:	c4 01       	movw	r24, r8
    3dae:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    3db2:	2d 81       	ldd	r18, Y+5	; 0x05
    3db4:	3e 81       	ldd	r19, Y+6	; 0x06
    3db6:	a2 16       	cp	r10, r18
    3db8:	b3 06       	cpc	r11, r19
    3dba:	00 f1       	brcs	.+64     	; 0x3dfc <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x12c>
    3dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    3dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    3dc0:	e6 14       	cp	r14, r6
    3dc2:	f7 04       	cpc	r15, r7
    3dc4:	24 f4       	brge	.+8      	; 0x3dce <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xfe>
    3dc6:	4d 81       	ldd	r20, Y+5	; 0x05
    3dc8:	5e 81       	ldd	r21, Y+6	; 0x06
    3dca:	b6 01       	movw	r22, r12
    3dcc:	03 c0       	rjmp	.+6      	; 0x3dd4 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x104>
    3dce:	a6 01       	movw	r20, r12
    3dd0:	6d 81       	ldd	r22, Y+5	; 0x05
    3dd2:	7e 81       	ldd	r23, Y+6	; 0x06
    3dd4:	c4 01       	movw	r24, r8
    3dd6:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    3dda:	42 18       	sub	r4, r2
    3ddc:	53 08       	sbc	r5, r3
    3dde:	57 fe       	sbrs	r5, 7
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <_ZN14TFT_22_ILI92258drawLineEjjjjj+0x11e>
    3de2:	c0 0e       	add	r12, r16
    3de4:	d1 1e       	adc	r13, r17
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dea:	48 0e       	add	r4, r24
    3dec:	59 1e       	adc	r5, r25
    3dee:	2d 81       	ldd	r18, Y+5	; 0x05
    3df0:	3e 81       	ldd	r19, Y+6	; 0x06
    3df2:	2f 5f       	subi	r18, 0xFF	; 255
    3df4:	3f 4f       	sbci	r19, 0xFF	; 255
    3df6:	3e 83       	std	Y+6, r19	; 0x06
    3df8:	2d 83       	std	Y+5, r18	; 0x05
    3dfa:	db cf       	rjmp	.-74     	; 0x3db2 <_ZN14TFT_22_ILI92258drawLineEjjjjj+0xe2>
    3dfc:	c4 01       	movw	r24, r8
    3dfe:	26 96       	adiw	r28, 0x06	; 6
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	de bf       	out	0x3e, r29	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	ef 90       	pop	r14
    3e16:	df 90       	pop	r13
    3e18:	cf 90       	pop	r12
    3e1a:	bf 90       	pop	r11
    3e1c:	af 90       	pop	r10
    3e1e:	9f 90       	pop	r9
    3e20:	8f 90       	pop	r8
    3e22:	7f 90       	pop	r7
    3e24:	6f 90       	pop	r6
    3e26:	5f 90       	pop	r5
    3e28:	4f 90       	pop	r4
    3e2a:	3f 90       	pop	r3
    3e2c:	2f 90       	pop	r2
    3e2e:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>

00003e32 <_ZN14TFT_22_ILI922513drawRectangleEjjjjj>:
    3e32:	4f 92       	push	r4
    3e34:	5f 92       	push	r5
    3e36:	6f 92       	push	r6
    3e38:	7f 92       	push	r7
    3e3a:	8f 92       	push	r8
    3e3c:	9f 92       	push	r9
    3e3e:	af 92       	push	r10
    3e40:	bf 92       	push	r11
    3e42:	cf 92       	push	r12
    3e44:	df 92       	push	r13
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	ec 01       	movw	r28, r24
    3e54:	4b 01       	movw	r8, r22
    3e56:	3a 01       	movw	r6, r20
    3e58:	29 01       	movw	r4, r18
    3e5a:	68 01       	movw	r12, r16
    3e5c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    3e60:	94 01       	movw	r18, r8
    3e62:	a3 01       	movw	r20, r6
    3e64:	b4 01       	movw	r22, r8
    3e66:	ce 01       	movw	r24, r28
    3e68:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3e6c:	83 01       	movw	r16, r6
    3e6e:	92 01       	movw	r18, r4
    3e70:	a3 01       	movw	r20, r6
    3e72:	b4 01       	movw	r22, r8
    3e74:	ce 01       	movw	r24, r28
    3e76:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3e7a:	86 01       	movw	r16, r12
    3e7c:	92 01       	movw	r18, r4
    3e7e:	a6 01       	movw	r20, r12
    3e80:	b4 01       	movw	r22, r8
    3e82:	ce 01       	movw	r24, r28
    3e84:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3e88:	92 01       	movw	r18, r4
    3e8a:	a3 01       	movw	r20, r6
    3e8c:	b2 01       	movw	r22, r4
    3e8e:	ce 01       	movw	r24, r28
    3e90:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZN14TFT_22_ILI92258drawLineEjjjjj>
    3e94:	ce 01       	movw	r24, r28
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	1f 91       	pop	r17
    3e9c:	0f 91       	pop	r16
    3e9e:	ff 90       	pop	r15
    3ea0:	ef 90       	pop	r14
    3ea2:	df 90       	pop	r13
    3ea4:	cf 90       	pop	r12
    3ea6:	bf 90       	pop	r11
    3ea8:	af 90       	pop	r10
    3eaa:	9f 90       	pop	r9
    3eac:	8f 90       	pop	r8
    3eae:	7f 90       	pop	r7
    3eb0:	6f 90       	pop	r6
    3eb2:	5f 90       	pop	r5
    3eb4:	4f 90       	pop	r4
    3eb6:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>

00003eba <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb>:
    3eba:	2f 92       	push	r2
    3ebc:	3f 92       	push	r3
    3ebe:	4f 92       	push	r4
    3ec0:	5f 92       	push	r5
    3ec2:	6f 92       	push	r6
    3ec4:	7f 92       	push	r7
    3ec6:	8f 92       	push	r8
    3ec8:	9f 92       	push	r9
    3eca:	af 92       	push	r10
    3ecc:	bf 92       	push	r11
    3ece:	cf 92       	push	r12
    3ed0:	df 92       	push	r13
    3ed2:	ef 92       	push	r14
    3ed4:	ff 92       	push	r15
    3ed6:	0f 93       	push	r16
    3ed8:	1f 93       	push	r17
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	cd b7       	in	r28, 0x3d	; 61
    3ee0:	de b7       	in	r29, 0x3e	; 62
    3ee2:	c2 55       	subi	r28, 0x52	; 82
    3ee4:	d1 09       	sbc	r29, r1
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	cd bf       	out	0x3d, r28	; 61
    3ef0:	3c 01       	movw	r6, r24
    3ef2:	7e af       	std	Y+62, r23	; 0x3e
    3ef4:	6d af       	std	Y+61, r22	; 0x3d
    3ef6:	2a 01       	movw	r4, r20
    3ef8:	28 96       	adiw	r28, 0x08	; 8
    3efa:	3f af       	std	Y+63, r19	; 0x3f
    3efc:	2e af       	std	Y+62, r18	; 0x3e
    3efe:	28 97       	sbiw	r28, 0x08	; 8
    3f00:	18 01       	movw	r2, r16
    3f02:	2a 96       	adiw	r28, 0x0a	; 10
    3f04:	df ae       	std	Y+63, r13	; 0x3f
    3f06:	ce ae       	std	Y+62, r12	; 0x3e
    3f08:	2a 97       	sbiw	r28, 0x0a	; 10
    3f0a:	2e 96       	adiw	r28, 0x0e	; 14
    3f0c:	bf ae       	std	Y+63, r11	; 0x3f
    3f0e:	ae ae       	std	Y+62, r10	; 0x3e
    3f10:	2e 97       	sbiw	r28, 0x0e	; 14
    3f12:	2f 96       	adiw	r28, 0x0f	; 15
    3f14:	8f ae       	std	Y+63, r8	; 0x3f
    3f16:	2f 97       	sbiw	r28, 0x0f	; 15
    3f18:	c8 01       	movw	r24, r16
    3f1a:	07 96       	adiw	r24, 0x07	; 7
    3f1c:	97 fd       	sbrc	r25, 7
    3f1e:	07 96       	adiw	r24, 0x07	; 7
    3f20:	9c 01       	movw	r18, r24
    3f22:	73 e0       	ldi	r23, 0x03	; 3
    3f24:	35 95       	asr	r19
    3f26:	27 95       	ror	r18
    3f28:	7a 95       	dec	r23
    3f2a:	e1 f7       	brne	.-8      	; 0x3f24 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x6a>
    3f2c:	24 96       	adiw	r28, 0x04	; 4
    3f2e:	3f af       	std	Y+63, r19	; 0x3f
    3f30:	2e af       	std	Y+62, r18	; 0x3e
    3f32:	24 97       	sbiw	r28, 0x04	; 4
    3f34:	a9 96       	adiw	r28, 0x29	; 41
    3f36:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f38:	a9 97       	sbiw	r28, 0x29	; 41
    3f3a:	31 11       	cpse	r19, r1
    3f3c:	05 c0       	rjmp	.+10     	; 0x3f48 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x8e>
    3f3e:	80 e8       	ldi	r24, 0x80	; 128
    3f40:	22 96       	adiw	r28, 0x02	; 2
    3f42:	8f af       	std	Y+63, r24	; 0x3f
    3f44:	22 97       	sbiw	r28, 0x02	; 2
    3f46:	04 c0       	rjmp	.+8      	; 0x3f50 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x96>
    3f48:	91 e0       	ldi	r25, 0x01	; 1
    3f4a:	22 96       	adiw	r28, 0x02	; 2
    3f4c:	9f af       	std	Y+63, r25	; 0x3f
    3f4e:	22 97       	sbiw	r28, 0x02	; 2
    3f50:	f3 01       	movw	r30, r6
    3f52:	83 81       	ldd	r24, Z+3	; 0x03
    3f54:	8f 93       	push	r24
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	8f 93       	push	r24
    3f5a:	81 81       	ldd	r24, Z+1	; 0x01
    3f5c:	8f 93       	push	r24
    3f5e:	80 81       	ld	r24, Z
    3f60:	8f 93       	push	r24
    3f62:	8e ef       	ldi	r24, 0xFE	; 254
    3f64:	91 e0       	ldi	r25, 0x01	; 1
    3f66:	9f 93       	push	r25
    3f68:	8f 93       	push	r24
    3f6a:	8e 01       	movw	r16, r28
    3f6c:	0f 5f       	subi	r16, 0xFF	; 255
    3f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f70:	1f 93       	push	r17
    3f72:	0f 93       	push	r16
    3f74:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <sprintf>
    3f78:	b8 01       	movw	r22, r16
    3f7a:	82 e7       	ldi	r24, 0x72	; 114
    3f7c:	93 e0       	ldi	r25, 0x03	; 3
    3f7e:	0e 94 a1 10 	call	0x2142	; 0x2142 <_ZN5Print7printlnEPKc>
    3f82:	2d ad       	ldd	r18, Y+61	; 0x3d
    3f84:	3e ad       	ldd	r19, Y+62	; 0x3e
    3f86:	21 96       	adiw	r28, 0x01	; 1
    3f88:	3f af       	std	Y+63, r19	; 0x3f
    3f8a:	2e af       	std	Y+62, r18	; 0x3e
    3f8c:	21 97       	sbiw	r28, 0x01	; 1
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	37 ff       	sbrs	r19, 7
    3f9a:	04 c0       	rjmp	.+8      	; 0x3fa4 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0xea>
    3f9c:	21 96       	adiw	r28, 0x01	; 1
    3f9e:	1f ae       	std	Y+63, r1	; 0x3f
    3fa0:	1e ae       	std	Y+62, r1	; 0x3e
    3fa2:	21 97       	sbiw	r28, 0x01	; 1
    3fa4:	a2 01       	movw	r20, r4
    3fa6:	57 fe       	sbrs	r5, 7
    3fa8:	02 c0       	rjmp	.+4      	; 0x3fae <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0xf4>
    3faa:	40 e0       	ldi	r20, 0x00	; 0
    3fac:	50 e0       	ldi	r21, 0x00	; 0
    3fae:	f3 01       	movw	r30, r6
    3fb0:	20 81       	ld	r18, Z
    3fb2:	31 81       	ldd	r19, Z+1	; 0x01
    3fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fb8:	82 0d       	add	r24, r2
    3fba:	93 1d       	adc	r25, r3
    3fbc:	28 17       	cp	r18, r24
    3fbe:	39 07       	cpc	r19, r25
    3fc0:	08 f4       	brcc	.+2      	; 0x3fc4 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x10a>
    3fc2:	c9 01       	movw	r24, r18
    3fc4:	9c 01       	movw	r18, r24
    3fc6:	21 50       	subi	r18, 0x01	; 1
    3fc8:	31 09       	sbc	r19, r1
    3fca:	26 96       	adiw	r28, 0x06	; 6
    3fcc:	3f af       	std	Y+63, r19	; 0x3f
    3fce:	2e af       	std	Y+62, r18	; 0x3e
    3fd0:	26 97       	sbiw	r28, 0x06	; 6
    3fd2:	f3 01       	movw	r30, r6
    3fd4:	82 81       	ldd	r24, Z+2	; 0x02
    3fd6:	93 81       	ldd	r25, Z+3	; 0x03
    3fd8:	92 01       	movw	r18, r4
    3fda:	2e 0d       	add	r18, r14
    3fdc:	3f 1d       	adc	r19, r15
    3fde:	82 17       	cp	r24, r18
    3fe0:	93 07       	cpc	r25, r19
    3fe2:	08 f4       	brcc	.+2      	; 0x3fe6 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x12c>
    3fe4:	9c 01       	movw	r18, r24
    3fe6:	89 01       	movw	r16, r18
    3fe8:	01 50       	subi	r16, 0x01	; 1
    3fea:	11 09       	sbc	r17, r1
    3fec:	69 01       	movw	r12, r18
    3fee:	c4 1a       	sub	r12, r20
    3ff0:	d5 0a       	sbc	r13, r21
    3ff2:	66 e0       	ldi	r22, 0x06	; 6
    3ff4:	e6 2e       	mov	r14, r22
    3ff6:	26 96       	adiw	r28, 0x06	; 6
    3ff8:	2e ad       	ldd	r18, Y+62	; 0x3e
    3ffa:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ffc:	26 97       	sbiw	r28, 0x06	; 6
    3ffe:	21 96       	adiw	r28, 0x01	; 1
    4000:	6e ad       	ldd	r22, Y+62	; 0x3e
    4002:	7f ad       	ldd	r23, Y+63	; 0x3f
    4004:	21 97       	sbiw	r28, 0x01	; 1
    4006:	c3 01       	movw	r24, r6
    4008:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN14TFT_22_ILI922510_setWindowEjjjj13autoIncMode_t>
    400c:	c3 01       	movw	r24, r6
    400e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    4012:	57 fe       	sbrs	r5, 7
    4014:	05 c0       	rjmp	.+10     	; 0x4020 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x166>
    4016:	aa 24       	eor	r10, r10
    4018:	bb 24       	eor	r11, r11
    401a:	a4 18       	sub	r10, r4
    401c:	b5 08       	sbc	r11, r5
    401e:	02 c0       	rjmp	.+4      	; 0x4024 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x16a>
    4020:	a1 2c       	mov	r10, r1
    4022:	b1 2c       	mov	r11, r1
    4024:	57 fe       	sbrs	r5, 7
    4026:	05 c0       	rjmp	.+10     	; 0x4032 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x178>
    4028:	ee 24       	eor	r14, r14
    402a:	ff 24       	eor	r15, r15
    402c:	e4 18       	sub	r14, r4
    402e:	f5 08       	sbc	r15, r5
    4030:	02 c0       	rjmp	.+4      	; 0x4036 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x17c>
    4032:	e1 2c       	mov	r14, r1
    4034:	f1 2c       	mov	r15, r1
    4036:	97 01       	movw	r18, r14
    4038:	2c 0d       	add	r18, r12
    403a:	3d 1d       	adc	r19, r13
    403c:	2c 96       	adiw	r28, 0x0c	; 12
    403e:	3f af       	std	Y+63, r19	; 0x3f
    4040:	2e af       	std	Y+62, r18	; 0x3e
    4042:	2c 97       	sbiw	r28, 0x0c	; 12
    4044:	24 96       	adiw	r28, 0x04	; 4
    4046:	8e ad       	ldd	r24, Y+62	; 0x3e
    4048:	9f ad       	ldd	r25, Y+63	; 0x3f
    404a:	24 97       	sbiw	r28, 0x04	; 4
    404c:	a8 9e       	mul	r10, r24
    404e:	40 01       	movw	r8, r0
    4050:	a9 9e       	mul	r10, r25
    4052:	90 0c       	add	r9, r0
    4054:	b8 9e       	mul	r11, r24
    4056:	90 0c       	add	r9, r0
    4058:	11 24       	eor	r1, r1
    405a:	f1 2c       	mov	r15, r1
    405c:	e1 2c       	mov	r14, r1
    405e:	2c 96       	adiw	r28, 0x0c	; 12
    4060:	ee ad       	ldd	r30, Y+62	; 0x3e
    4062:	ff ad       	ldd	r31, Y+63	; 0x3f
    4064:	2c 97       	sbiw	r28, 0x0c	; 12
    4066:	ae 16       	cp	r10, r30
    4068:	bf 06       	cpc	r11, r31
    406a:	0c f0       	brlt	.+2      	; 0x406e <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1b4>
    406c:	94 c0       	rjmp	.+296    	; 0x4196 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2dc>
    406e:	cd ac       	ldd	r12, Y+61	; 0x3d
    4070:	de ac       	ldd	r13, Y+62	; 0x3e
    4072:	00 e0       	ldi	r16, 0x00	; 0
    4074:	10 e0       	ldi	r17, 0x00	; 0
    4076:	28 96       	adiw	r28, 0x08	; 8
    4078:	2e ad       	ldd	r18, Y+62	; 0x3e
    407a:	3f ad       	ldd	r19, Y+63	; 0x3f
    407c:	28 97       	sbiw	r28, 0x08	; 8
    407e:	28 0d       	add	r18, r8
    4080:	39 1d       	adc	r19, r9
    4082:	61 96       	adiw	r28, 0x11	; 17
    4084:	3f af       	std	Y+63, r19	; 0x3f
    4086:	2e af       	std	Y+62, r18	; 0x3e
    4088:	61 97       	sbiw	r28, 0x11	; 17
    408a:	c5 01       	movw	r24, r10
    408c:	84 0d       	add	r24, r4
    408e:	95 1d       	adc	r25, r5
    4090:	63 96       	adiw	r28, 0x13	; 19
    4092:	9f af       	std	Y+63, r25	; 0x3f
    4094:	8e af       	std	Y+62, r24	; 0x3e
    4096:	63 97       	sbiw	r28, 0x13	; 19
    4098:	02 15       	cp	r16, r2
    409a:	13 05       	cpc	r17, r3
    409c:	0c f0       	brlt	.+2      	; 0x40a0 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1e6>
    409e:	71 c0       	rjmp	.+226    	; 0x4182 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2c8>
    40a0:	c8 01       	movw	r24, r16
    40a2:	87 70       	andi	r24, 0x07	; 7
    40a4:	99 27       	eor	r25, r25
    40a6:	89 2b       	or	r24, r25
    40a8:	49 f0       	breq	.+18     	; 0x40bc <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x202>
    40aa:	a9 96       	adiw	r28, 0x29	; 41
    40ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    40ae:	a9 97       	sbiw	r28, 0x29	; 41
    40b0:	99 23       	and	r25, r25
    40b2:	11 f0       	breq	.+4      	; 0x40b8 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1fe>
    40b4:	f6 94       	lsr	r15
    40b6:	28 c0       	rjmp	.+80     	; 0x4108 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x24e>
    40b8:	ff 0c       	add	r15, r15
    40ba:	26 c0       	rjmp	.+76     	; 0x4108 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x24e>
    40bc:	a8 96       	adiw	r28, 0x28	; 40
    40be:	ef ad       	ldd	r30, Y+63	; 0x3f
    40c0:	a8 97       	sbiw	r28, 0x28	; 40
    40c2:	ee 23       	and	r30, r30
    40c4:	91 f0       	breq	.+36     	; 0x40ea <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x230>
    40c6:	f8 01       	movw	r30, r16
    40c8:	17 fd       	sbrc	r17, 7
    40ca:	37 96       	adiw	r30, 0x07	; 7
    40cc:	33 e0       	ldi	r19, 0x03	; 3
    40ce:	f5 95       	asr	r31
    40d0:	e7 95       	ror	r30
    40d2:	3a 95       	dec	r19
    40d4:	e1 f7       	brne	.-8      	; 0x40ce <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x214>
    40d6:	e8 0d       	add	r30, r8
    40d8:	f9 1d       	adc	r31, r9
    40da:	28 96       	adiw	r28, 0x08	; 8
    40dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    40de:	3f ad       	ldd	r19, Y+63	; 0x3f
    40e0:	28 97       	sbiw	r28, 0x08	; 8
    40e2:	e2 0f       	add	r30, r18
    40e4:	f3 1f       	adc	r31, r19
    40e6:	f4 90       	lpm	r15, Z
    40e8:	0f c0       	rjmp	.+30     	; 0x4108 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x24e>
    40ea:	c8 01       	movw	r24, r16
    40ec:	17 fd       	sbrc	r17, 7
    40ee:	07 96       	adiw	r24, 0x07	; 7
    40f0:	23 e0       	ldi	r18, 0x03	; 3
    40f2:	95 95       	asr	r25
    40f4:	87 95       	ror	r24
    40f6:	2a 95       	dec	r18
    40f8:	e1 f7       	brne	.-8      	; 0x40f2 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x238>
    40fa:	61 96       	adiw	r28, 0x11	; 17
    40fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    40fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    4100:	61 97       	sbiw	r28, 0x11	; 17
    4102:	e8 0f       	add	r30, r24
    4104:	f9 1f       	adc	r31, r25
    4106:	f0 80       	ld	r15, Z
    4108:	21 96       	adiw	r28, 0x01	; 1
    410a:	8e ad       	ldd	r24, Y+62	; 0x3e
    410c:	9f ad       	ldd	r25, Y+63	; 0x3f
    410e:	21 97       	sbiw	r28, 0x01	; 1
    4110:	c8 16       	cp	r12, r24
    4112:	d9 06       	cpc	r13, r25
    4114:	84 f1       	brlt	.+96     	; 0x4176 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
    4116:	26 96       	adiw	r28, 0x06	; 6
    4118:	ee ad       	ldd	r30, Y+62	; 0x3e
    411a:	ff ad       	ldd	r31, Y+63	; 0x3f
    411c:	26 97       	sbiw	r28, 0x06	; 6
    411e:	ec 15       	cp	r30, r12
    4120:	fd 05       	cpc	r31, r13
    4122:	4c f1       	brlt	.+82     	; 0x4176 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
    4124:	22 96       	adiw	r28, 0x02	; 2
    4126:	8f ad       	ldd	r24, Y+63	; 0x3f
    4128:	22 97       	sbiw	r28, 0x02	; 2
    412a:	8f 21       	and	r24, r15
    412c:	a9 f0       	breq	.+42     	; 0x4158 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x29e>
    412e:	ee 20       	and	r14, r14
    4130:	71 f0       	breq	.+28     	; 0x414e <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x294>
    4132:	2a 96       	adiw	r28, 0x0a	; 10
    4134:	2e ad       	ldd	r18, Y+62	; 0x3e
    4136:	3f ad       	ldd	r19, Y+63	; 0x3f
    4138:	2a 97       	sbiw	r28, 0x0a	; 10
    413a:	63 96       	adiw	r28, 0x13	; 19
    413c:	4e ad       	ldd	r20, Y+62	; 0x3e
    413e:	5f ad       	ldd	r21, Y+63	; 0x3f
    4140:	63 97       	sbiw	r28, 0x13	; 19
    4142:	b6 01       	movw	r22, r12
    4144:	c3 01       	movw	r24, r6
    4146:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_ZN14TFT_22_ILI92259drawPixelEjjj>
    414a:	e1 2c       	mov	r14, r1
    414c:	14 c0       	rjmp	.+40     	; 0x4176 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
    414e:	2a 96       	adiw	r28, 0x0a	; 10
    4150:	6e ad       	ldd	r22, Y+62	; 0x3e
    4152:	7f ad       	ldd	r23, Y+63	; 0x3f
    4154:	2a 97       	sbiw	r28, 0x0a	; 10
    4156:	09 c0       	rjmp	.+18     	; 0x416a <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2b0>
    4158:	2f 96       	adiw	r28, 0x0f	; 15
    415a:	ff ad       	ldd	r31, Y+63	; 0x3f
    415c:	2f 97       	sbiw	r28, 0x0f	; 15
    415e:	f1 11       	cpse	r31, r1
    4160:	08 c0       	rjmp	.+16     	; 0x4172 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2b8>
    4162:	2e 96       	adiw	r28, 0x0e	; 14
    4164:	6e ad       	ldd	r22, Y+62	; 0x3e
    4166:	7f ad       	ldd	r23, Y+63	; 0x3f
    4168:	2e 97       	sbiw	r28, 0x0e	; 14
    416a:	c3 01       	movw	r24, r6
    416c:	0e 94 ce 18 	call	0x319c	; 0x319c <_ZN14TFT_22_ILI922512_writeData16Ej>
    4170:	02 c0       	rjmp	.+4      	; 0x4176 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x2bc>
    4172:	ee 24       	eor	r14, r14
    4174:	e3 94       	inc	r14
    4176:	0f 5f       	subi	r16, 0xFF	; 255
    4178:	1f 4f       	sbci	r17, 0xFF	; 255
    417a:	2f ef       	ldi	r18, 0xFF	; 255
    417c:	c2 1a       	sub	r12, r18
    417e:	d2 0a       	sbc	r13, r18
    4180:	8b cf       	rjmp	.-234    	; 0x4098 <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1de>
    4182:	3f ef       	ldi	r19, 0xFF	; 255
    4184:	a3 1a       	sub	r10, r19
    4186:	b3 0a       	sbc	r11, r19
    4188:	24 96       	adiw	r28, 0x04	; 4
    418a:	8e ad       	ldd	r24, Y+62	; 0x3e
    418c:	9f ad       	ldd	r25, Y+63	; 0x3f
    418e:	24 97       	sbiw	r28, 0x04	; 4
    4190:	88 0e       	add	r8, r24
    4192:	99 1e       	adc	r9, r25
    4194:	64 cf       	rjmp	.-312    	; 0x405e <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb+0x1a4>
    4196:	c3 01       	movw	r24, r6
    4198:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>
    419c:	ce 5a       	subi	r28, 0xAE	; 174
    419e:	df 4f       	sbci	r29, 0xFF	; 255
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	f8 94       	cli
    41a4:	de bf       	out	0x3e, r29	; 62
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	cd bf       	out	0x3d, r28	; 61
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	1f 91       	pop	r17
    41b0:	0f 91       	pop	r16
    41b2:	ff 90       	pop	r15
    41b4:	ef 90       	pop	r14
    41b6:	df 90       	pop	r13
    41b8:	cf 90       	pop	r12
    41ba:	bf 90       	pop	r11
    41bc:	af 90       	pop	r10
    41be:	9f 90       	pop	r9
    41c0:	8f 90       	pop	r8
    41c2:	7f 90       	pop	r7
    41c4:	6f 90       	pop	r6
    41c6:	5f 90       	pop	r5
    41c8:	4f 90       	pop	r4
    41ca:	3f 90       	pop	r3
    41cc:	2f 90       	pop	r2
    41ce:	08 95       	ret

000041d0 <_ZN14TFT_22_ILI922510drawBitmapEiiPKhiij>:
    41d0:	8f 92       	push	r8
    41d2:	af 92       	push	r10
    41d4:	bf 92       	push	r11
    41d6:	cf 92       	push	r12
    41d8:	df 92       	push	r13
    41da:	ef 92       	push	r14
    41dc:	ff 92       	push	r15
    41de:	0f 93       	push	r16
    41e0:	1f 93       	push	r17
    41e2:	1f 92       	push	r1
    41e4:	e1 e0       	ldi	r30, 0x01	; 1
    41e6:	ef 93       	push	r30
    41e8:	88 24       	eor	r8, r8
    41ea:	83 94       	inc	r8
    41ec:	a1 2c       	mov	r10, r1
    41ee:	b1 2c       	mov	r11, r1
    41f0:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <_ZN14TFT_22_ILI922511_drawBitmapEiiPKhiijjbbb>
    41f4:	0f 90       	pop	r0
    41f6:	0f 90       	pop	r0
    41f8:	1f 91       	pop	r17
    41fa:	0f 91       	pop	r16
    41fc:	ff 90       	pop	r15
    41fe:	ef 90       	pop	r14
    4200:	df 90       	pop	r13
    4202:	cf 90       	pop	r12
    4204:	bf 90       	pop	r11
    4206:	af 90       	pop	r10
    4208:	8f 90       	pop	r8
    420a:	08 95       	ret

0000420c <_ZN14TFT_22_ILI922510setGFXFontEPK7GFXfont>:


// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

void TFT_22_ILI9225::setGFXFont(const GFXfont *f) {
    gfxFont = (GFXfont *)f;
    420c:	8e 5b       	subi	r24, 0xBE	; 190
    420e:	9f 4f       	sbci	r25, 0xFF	; 255
    4210:	fc 01       	movw	r30, r24
    4212:	71 83       	std	Z+1, r23	; 0x01
    4214:	60 83       	st	Z, r22
    4216:	08 95       	ret

00004218 <_ZN14TFT_22_ILI922511drawGFXCharEiihj>:
    }
}


// Draw a character
uint16_t TFT_22_ILI9225::drawGFXChar(int16_t x, int16_t y, unsigned char c, uint16_t color) {
    4218:	2f 92       	push	r2
    421a:	3f 92       	push	r3
    421c:	4f 92       	push	r4
    421e:	5f 92       	push	r5
    4220:	6f 92       	push	r6
    4222:	7f 92       	push	r7
    4224:	8f 92       	push	r8
    4226:	9f 92       	push	r9
    4228:	af 92       	push	r10
    422a:	bf 92       	push	r11
    422c:	cf 92       	push	r12
    422e:	df 92       	push	r13
    4230:	ef 92       	push	r14
    4232:	ff 92       	push	r15
    4234:	0f 93       	push	r16
    4236:	1f 93       	push	r17
    4238:	cf 93       	push	r28
    423a:	df 93       	push	r29
    423c:	00 d0       	rcall	.+0      	; 0x423e <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0x26>
    423e:	00 d0       	rcall	.+0      	; 0x4240 <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0x28>
    4240:	00 d0       	rcall	.+0      	; 0x4242 <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0x2a>
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
    4246:	6c 01       	movw	r12, r24
    4248:	5b 01       	movw	r10, r22
    424a:	7a 01       	movw	r14, r20

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    424c:	fc 01       	movw	r30, r24
    424e:	ee 5b       	subi	r30, 0xBE	; 190
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	40 81       	ld	r20, Z
    4254:	51 81       	ldd	r21, Z+1	; 0x01
    4256:	fa 01       	movw	r30, r20
    4258:	34 96       	adiw	r30, 0x04	; 4
    425a:	e4 91       	lpm	r30, Z
    425c:	2e 1b       	sub	r18, r30
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    425e:	fa 01       	movw	r30, r20
    4260:	32 96       	adiw	r30, 0x02	; 2
    4262:	85 91       	lpm	r24, Z+
    4264:	94 91       	lpm	r25, Z
    4266:	37 e0       	ldi	r19, 0x07	; 7
    4268:	23 9f       	mul	r18, r19
    426a:	80 0d       	add	r24, r0
    426c:	91 1d       	adc	r25, r1
    426e:	11 24       	eor	r1, r1
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    4270:	fa 01       	movw	r30, r20
    4272:	25 90       	lpm	r2, Z+
    4274:	34 90       	lpm	r3, Z

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    4276:	fc 01       	movw	r30, r24
    4278:	25 91       	lpm	r18, Z+
    427a:	34 91       	lpm	r19, Z
    427c:	3e 83       	std	Y+6, r19	; 0x06
    427e:	2d 83       	std	Y+5, r18	; 0x05
    uint8_t  w  = pgm_read_byte(&glyph->width),
    4280:	fc 01       	movw	r30, r24
    4282:	32 96       	adiw	r30, 0x02	; 2
    4284:	34 91       	lpm	r19, Z
    4286:	3a 83       	std	Y+2, r19	; 0x02
             h  = pgm_read_byte(&glyph->height),
    4288:	31 96       	adiw	r30, 0x01	; 1
    428a:	24 91       	lpm	r18, Z
    428c:	2b 83       	std	Y+3, r18	; 0x03
             xa = pgm_read_byte(&glyph->xAdvance);
    428e:	31 96       	adiw	r30, 0x01	; 1
    4290:	34 91       	lpm	r19, Z
    4292:	3c 83       	std	Y+4, r19	; 0x04
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
    4294:	31 96       	adiw	r30, 0x01	; 1
    4296:	84 90       	lpm	r8, Z
             yo = pgm_read_byte(&glyph->yOffset);
    4298:	31 96       	adiw	r30, 0x01	; 1
    429a:	94 90       	lpm	r9, Z
    uint8_t  xx, yy, bits = 0, bit = 0;

    // Add character clipping here one day

    startWrite();
    429c:	c6 01       	movw	r24, r12
    429e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <_ZN14TFT_22_ILI922510startWriteEv>
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
             yo = pgm_read_byte(&glyph->yOffset);
    uint8_t  xx, yy, bits = 0, bit = 0;
    42a2:	19 82       	std	Y+1, r1	; 0x01
    42a4:	71 2c       	mov	r7, r1

    // Add character clipping here one day

    startWrite();
    for(yy=0; yy<h; yy++) {
    42a6:	61 2c       	mov	r6, r1
        for(xx=0; xx<w; xx++) {
            if(!(bit++ & 7)) {
                bits = pgm_read_byte(&bitmap[bo++]);
            }
            if(bits & 0x80) {
                drawPixel(x+xo+xx, y+yo+yy, color);
    42a8:	27 01       	movw	r4, r14
    42aa:	49 0c       	add	r4, r9
    42ac:	51 1c       	adc	r5, r1
    42ae:	97 fc       	sbrc	r9, 7
    42b0:	5a 94       	dec	r5
    42b2:	a8 0c       	add	r10, r8
    42b4:	b1 1c       	adc	r11, r1
    42b6:	87 fc       	sbrc	r8, 7
    42b8:	ba 94       	dec	r11
    uint8_t  xx, yy, bits = 0, bit = 0;

    // Add character clipping here one day

    startWrite();
    for(yy=0; yy<h; yy++) {
    42ba:	8b 81       	ldd	r24, Y+3	; 0x03
    42bc:	68 16       	cp	r6, r24
    42be:	59 f1       	breq	.+86     	; 0x4316 <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0xfe>
    42c0:	e1 2c       	mov	r14, r1
    42c2:	f1 2c       	mov	r15, r1
        for(xx=0; xx<w; xx++) {
            if(!(bit++ & 7)) {
                bits = pgm_read_byte(&bitmap[bo++]);
            }
            if(bits & 0x80) {
                drawPixel(x+xo+xx, y+yo+yy, color);
    42c4:	42 01       	movw	r8, r4
    42c6:	86 0c       	add	r8, r6
    42c8:	91 1c       	adc	r9, r1
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	8e 0d       	add	r24, r14

    // Add character clipping here one day

    startWrite();
    for(yy=0; yy<h; yy++) {
        for(xx=0; xx<w; xx++) {
    42ce:	9a 81       	ldd	r25, Y+2	; 0x02
    42d0:	e9 16       	cp	r14, r25
    42d2:	d8 f4       	brcc	.+54     	; 0x430a <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0xf2>
            if(!(bit++ & 7)) {
    42d4:	87 70       	andi	r24, 0x07	; 7
    42d6:	51 f4       	brne	.+20     	; 0x42ec <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0xd4>
                bits = pgm_read_byte(&bitmap[bo++]);
    42d8:	8d 81       	ldd	r24, Y+5	; 0x05
    42da:	9e 81       	ldd	r25, Y+6	; 0x06
    42dc:	01 96       	adiw	r24, 0x01	; 1
    42de:	ed 81       	ldd	r30, Y+5	; 0x05
    42e0:	fe 81       	ldd	r31, Y+6	; 0x06
    42e2:	e2 0d       	add	r30, r2
    42e4:	f3 1d       	adc	r31, r3
    42e6:	74 90       	lpm	r7, Z
    42e8:	9e 83       	std	Y+6, r25	; 0x06
    42ea:	8d 83       	std	Y+5, r24	; 0x05
            }
            if(bits & 0x80) {
    42ec:	77 fe       	sbrs	r7, 7
    42ee:	08 c0       	rjmp	.+16     	; 0x4300 <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0xe8>
                drawPixel(x+xo+xx, y+yo+yy, color);
    42f0:	98 01       	movw	r18, r16
    42f2:	a4 01       	movw	r20, r8
    42f4:	b5 01       	movw	r22, r10
    42f6:	6e 0d       	add	r22, r14
    42f8:	7f 1d       	adc	r23, r15
    42fa:	c6 01       	movw	r24, r12
    42fc:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_ZN14TFT_22_ILI92259drawPixelEjjj>
            }
            bits <<= 1;
    4300:	77 0c       	add	r7, r7
    4302:	2f ef       	ldi	r18, 0xFF	; 255
    4304:	e2 1a       	sub	r14, r18
    4306:	f2 0a       	sbc	r15, r18

    // Add character clipping here one day

    startWrite();
    for(yy=0; yy<h; yy++) {
        for(xx=0; xx<w; xx++) {
    4308:	e0 cf       	rjmp	.-64     	; 0x42ca <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0xb2>
    430a:	39 81       	ldd	r19, Y+1	; 0x01
    430c:	8a 81       	ldd	r24, Y+2	; 0x02
    430e:	38 0f       	add	r19, r24
    4310:	39 83       	std	Y+1, r19	; 0x01
    uint8_t  xx, yy, bits = 0, bit = 0;

    // Add character clipping here one day

    startWrite();
    for(yy=0; yy<h; yy++) {
    4312:	63 94       	inc	r6
    4314:	d2 cf       	rjmp	.-92     	; 0x42ba <_ZN14TFT_22_ILI922511drawGFXCharEiihj+0xa2>
                drawPixel(x+xo+xx, y+yo+yy, color);
            }
            bits <<= 1;
        }
    }
    endWrite();
    4316:	c6 01       	movw	r24, r12
    4318:	0e 94 b1 19 	call	0x3362	; 0x3362 <_ZN14TFT_22_ILI92258endWriteEv>

    return (uint16_t)xa;
}
    431c:	2c 81       	ldd	r18, Y+4	; 0x04
    431e:	82 2f       	mov	r24, r18
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	26 96       	adiw	r28, 0x06	; 6
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	f8 94       	cli
    4328:	de bf       	out	0x3e, r29	; 62
    432a:	0f be       	out	0x3f, r0	; 63
    432c:	cd bf       	out	0x3d, r28	; 61
    432e:	df 91       	pop	r29
    4330:	cf 91       	pop	r28
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	bf 90       	pop	r11
    4340:	af 90       	pop	r10
    4342:	9f 90       	pop	r9
    4344:	8f 90       	pop	r8
    4346:	7f 90       	pop	r7
    4348:	6f 90       	pop	r6
    434a:	5f 90       	pop	r5
    434c:	4f 90       	pop	r4
    434e:	3f 90       	pop	r3
    4350:	2f 90       	pop	r2
    4352:	08 95       	ret

00004354 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj>:
    gfxFont = (GFXfont *)f;
}


// Draw a string
void TFT_22_ILI9225::drawGFXText(int16_t x, int16_t y, STRING s, uint16_t color) {
    4354:	6f 92       	push	r6
    4356:	7f 92       	push	r7
    4358:	8f 92       	push	r8
    435a:	9f 92       	push	r9
    435c:	af 92       	push	r10
    435e:	bf 92       	push	r11
    4360:	cf 92       	push	r12
    4362:	df 92       	push	r13
    4364:	ff 92       	push	r15
    4366:	0f 93       	push	r16
    4368:	1f 93       	push	r17
    436a:	cf 93       	push	r28
    436c:	df 93       	push	r29
    436e:	6c 01       	movw	r12, r24
    4370:	eb 01       	movw	r28, r22
    4372:	5a 01       	movw	r10, r20
    4374:	39 01       	movw	r6, r18
    4376:	48 01       	movw	r8, r16

    int16_t currx = x;

    if(gfxFont) {
    4378:	fc 01       	movw	r30, r24
    437a:	ee 5b       	subi	r30, 0xBE	; 190
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	80 81       	ld	r24, Z
    4380:	91 81       	ldd	r25, Z+1	; 0x01
    4382:	89 2b       	or	r24, r25
    4384:	c1 f0       	breq	.+48     	; 0x43b6 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj+0x62>
    4386:	f1 2c       	mov	r15, r1
        // Print every character in string
#ifdef USE_STRING_CLASS
        for (uint8_t k = 0; k < s.length(); k++) {
    4388:	6f 2d       	mov	r22, r15
    438a:	70 e0       	ldi	r23, 0x00	; 0
    438c:	f3 01       	movw	r30, r6
    438e:	84 81       	ldd	r24, Z+4	; 0x04
    4390:	95 81       	ldd	r25, Z+5	; 0x05
    4392:	68 17       	cp	r22, r24
    4394:	79 07       	cpc	r23, r25
    4396:	78 f4       	brcc	.+30     	; 0x43b6 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj+0x62>
            currx += drawGFXChar(currx, y, s.charAt(k), color) + 1;
    4398:	c3 01       	movw	r24, r6
    439a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZNK6String6charAtEj>
    439e:	84 01       	movw	r16, r8
    43a0:	28 2f       	mov	r18, r24
    43a2:	a5 01       	movw	r20, r10
    43a4:	be 01       	movw	r22, r28
    43a6:	c6 01       	movw	r24, r12
    43a8:	0e 94 0c 21 	call	0x4218	; 0x4218 <_ZN14TFT_22_ILI922511drawGFXCharEiihj>
    43ac:	21 96       	adiw	r28, 0x01	; 1
    43ae:	c8 0f       	add	r28, r24
    43b0:	d9 1f       	adc	r29, r25
    int16_t currx = x;

    if(gfxFont) {
        // Print every character in string
#ifdef USE_STRING_CLASS
        for (uint8_t k = 0; k < s.length(); k++) {
    43b2:	f3 94       	inc	r15
    43b4:	e9 cf       	rjmp	.-46     	; 0x4388 <_ZN14TFT_22_ILI922511drawGFXTextEii6Stringj+0x34>
        for (uint8_t k = 0; k < strlen(s); k++) {
            currx += drawGFXChar(currx, y, s[k], color) + 1;
        }
#endif
    }
}
    43b6:	df 91       	pop	r29
    43b8:	cf 91       	pop	r28
    43ba:	1f 91       	pop	r17
    43bc:	0f 91       	pop	r16
    43be:	ff 90       	pop	r15
    43c0:	df 90       	pop	r13
    43c2:	cf 90       	pop	r12
    43c4:	bf 90       	pop	r11
    43c6:	af 90       	pop	r10
    43c8:	9f 90       	pop	r9
    43ca:	8f 90       	pop	r8
    43cc:	7f 90       	pop	r7
    43ce:	6f 90       	pop	r6
    43d0:	08 95       	ret

000043d2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    43d2:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZN7TwoWire14rxBufferLengthE>
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    43dc:	82 1b       	sub	r24, r18
    43de:	91 09       	sbc	r25, r1
    43e0:	08 95       	ret

000043e2 <_ZN7TwoWire4readEv>:
    43e2:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    43e6:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZN7TwoWire14rxBufferLengthE>
    43ea:	98 17       	cp	r25, r24
    43ec:	50 f4       	brcc	.+20     	; 0x4402 <_ZN7TwoWire4readEv+0x20>
    43ee:	e9 2f       	mov	r30, r25
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	e2 5b       	subi	r30, 0xB2	; 178
    43f4:	fb 4f       	sbci	r31, 0xFB	; 251
    43f6:	20 81       	ld	r18, Z
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	9f 5f       	subi	r25, 0xFF	; 255
    43fc:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    4400:	02 c0       	rjmp	.+4      	; 0x4406 <_ZN7TwoWire4readEv+0x24>
    4402:	2f ef       	ldi	r18, 0xFF	; 255
    4404:	3f ef       	ldi	r19, 0xFF	; 255
    4406:	c9 01       	movw	r24, r18
    4408:	08 95       	ret

0000440a <_ZN7TwoWire4peekEv>:
    440a:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    440e:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZN7TwoWire14rxBufferLengthE>
    4412:	e8 17       	cp	r30, r24
    4414:	30 f4       	brcc	.+12     	; 0x4422 <_ZN7TwoWire4peekEv+0x18>
    4416:	f0 e0       	ldi	r31, 0x00	; 0
    4418:	e2 5b       	subi	r30, 0xB2	; 178
    441a:	fb 4f       	sbci	r31, 0xFB	; 251
    441c:	80 81       	ld	r24, Z
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	08 95       	ret
    4422:	8f ef       	ldi	r24, 0xFF	; 255
    4424:	9f ef       	ldi	r25, 0xFF	; 255
    4426:	08 95       	ret

00004428 <_ZN7TwoWire5flushEv>:
    4428:	08 95       	ret

0000442a <_ZN7TwoWire16onReceiveServiceEPhi>:
    442a:	cf 93       	push	r28
    442c:	df 93       	push	r29
    442e:	ec 01       	movw	r28, r24
    4430:	e0 91 24 04 	lds	r30, 0x0424	; 0x800424 <_ZN7TwoWire14user_onReceiveE>
    4434:	f0 91 25 04 	lds	r31, 0x0425	; 0x800425 <_ZN7TwoWire14user_onReceiveE+0x1>
    4438:	30 97       	sbiw	r30, 0x00	; 0
    443a:	f1 f0       	breq	.+60     	; 0x4478 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    443c:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    4440:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZN7TwoWire14rxBufferLengthE>
    4444:	98 17       	cp	r25, r24
    4446:	c0 f0       	brcs	.+48     	; 0x4478 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	29 2f       	mov	r18, r25
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	26 17       	cp	r18, r22
    4450:	37 07       	cpc	r19, r23
    4452:	54 f4       	brge	.+20     	; 0x4468 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    4454:	de 01       	movw	r26, r28
    4456:	a2 0f       	add	r26, r18
    4458:	b3 1f       	adc	r27, r19
    445a:	4c 91       	ld	r20, X
    445c:	d9 01       	movw	r26, r18
    445e:	a2 5b       	subi	r26, 0xB2	; 178
    4460:	bb 4f       	sbci	r27, 0xFB	; 251
    4462:	4c 93       	st	X, r20
    4464:	9f 5f       	subi	r25, 0xFF	; 255
    4466:	f1 cf       	rjmp	.-30     	; 0x444a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    4468:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    446c:	60 93 4c 04 	sts	0x044C, r22	; 0x80044c <_ZN7TwoWire14rxBufferLengthE>
    4470:	cb 01       	movw	r24, r22
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	09 94       	ijmp
    4478:	df 91       	pop	r29
    447a:	cf 91       	pop	r28
    447c:	08 95       	ret

0000447e <_ZN7TwoWire16onRequestServiceEv>:
    447e:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <_ZN7TwoWire14user_onRequestE>
    4482:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <_ZN7TwoWire14user_onRequestE+0x1>
    4486:	30 97       	sbiw	r30, 0x00	; 0
    4488:	29 f0       	breq	.+10     	; 0x4494 <_ZN7TwoWire16onRequestServiceEv+0x16>
    448a:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <_ZN7TwoWire13txBufferIndexE>
    448e:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZN7TwoWire14txBufferLengthE>
    4492:	09 94       	ijmp
    4494:	08 95       	ret

00004496 <_ZN7TwoWire5writeEPKhj>:
    4496:	cf 92       	push	r12
    4498:	df 92       	push	r13
    449a:	ef 92       	push	r14
    449c:	ff 92       	push	r15
    449e:	0f 93       	push	r16
    44a0:	1f 93       	push	r17
    44a2:	cf 93       	push	r28
    44a4:	df 93       	push	r29
    44a6:	7c 01       	movw	r14, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	8a 01       	movw	r16, r20
    44ac:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <_ZN7TwoWire12transmittingE>
    44b0:	22 23       	and	r18, r18
    44b2:	89 f0       	breq	.+34     	; 0x44d6 <_ZN7TwoWire5writeEPKhj+0x40>
    44b4:	eb 01       	movw	r28, r22
    44b6:	6b 01       	movw	r12, r22
    44b8:	c4 0e       	add	r12, r20
    44ba:	d5 1e       	adc	r13, r21
    44bc:	cc 15       	cp	r28, r12
    44be:	dd 05       	cpc	r29, r13
    44c0:	69 f0       	breq	.+26     	; 0x44dc <_ZN7TwoWire5writeEPKhj+0x46>
    44c2:	69 91       	ld	r22, Y+
    44c4:	d7 01       	movw	r26, r14
    44c6:	ed 91       	ld	r30, X+
    44c8:	fc 91       	ld	r31, X
    44ca:	01 90       	ld	r0, Z+
    44cc:	f0 81       	ld	r31, Z
    44ce:	e0 2d       	mov	r30, r0
    44d0:	c7 01       	movw	r24, r14
    44d2:	09 95       	icall
    44d4:	f3 cf       	rjmp	.-26     	; 0x44bc <_ZN7TwoWire5writeEPKhj+0x26>
    44d6:	64 2f       	mov	r22, r20
    44d8:	0e 94 be 24 	call	0x497c	; 0x497c <twi_transmit>
    44dc:	c8 01       	movw	r24, r16
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	1f 91       	pop	r17
    44e4:	0f 91       	pop	r16
    44e6:	ff 90       	pop	r15
    44e8:	ef 90       	pop	r14
    44ea:	df 90       	pop	r13
    44ec:	cf 90       	pop	r12
    44ee:	08 95       	ret

000044f0 <_ZN7TwoWire5writeEh>:
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	1f 92       	push	r1
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62
    44fa:	69 83       	std	Y+1, r22	; 0x01
    44fc:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <_ZN7TwoWire12transmittingE>
    4500:	22 23       	and	r18, r18
    4502:	d1 f0       	breq	.+52     	; 0x4538 <_ZN7TwoWire5writeEh+0x48>
    4504:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <_ZN7TwoWire14txBufferLengthE>
    4508:	20 32       	cpi	r18, 0x20	; 32
    450a:	40 f0       	brcs	.+16     	; 0x451c <_ZN7TwoWire5writeEh+0x2c>
    450c:	21 e0       	ldi	r18, 0x01	; 1
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	fc 01       	movw	r30, r24
    4512:	33 83       	std	Z+3, r19	; 0x03
    4514:	22 83       	std	Z+2, r18	; 0x02
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	15 c0       	rjmp	.+42     	; 0x4546 <_ZN7TwoWire5writeEh+0x56>
    451c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <_ZN7TwoWire13txBufferIndexE>
    4520:	e8 2f       	mov	r30, r24
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	e5 5d       	subi	r30, 0xD5	; 213
    4526:	fb 4f       	sbci	r31, 0xFB	; 251
    4528:	99 81       	ldd	r25, Y+1	; 0x01
    452a:	90 83       	st	Z, r25
    452c:	8f 5f       	subi	r24, 0xFF	; 255
    452e:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_ZN7TwoWire13txBufferIndexE>
    4532:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <_ZN7TwoWire14txBufferLengthE>
    4536:	05 c0       	rjmp	.+10     	; 0x4542 <_ZN7TwoWire5writeEh+0x52>
    4538:	61 e0       	ldi	r22, 0x01	; 1
    453a:	ce 01       	movw	r24, r28
    453c:	01 96       	adiw	r24, 0x01	; 1
    453e:	0e 94 be 24 	call	0x497c	; 0x497c <twi_transmit>
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	0f 90       	pop	r0
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	08 95       	ret

0000454e <_ZN7TwoWireC1Ev>:
    454e:	fc 01       	movw	r30, r24
    4550:	13 82       	std	Z+3, r1	; 0x03
    4552:	12 82       	std	Z+2, r1	; 0x02
    4554:	88 ee       	ldi	r24, 0xE8	; 232
    4556:	93 e0       	ldi	r25, 0x03	; 3
    4558:	a0 e0       	ldi	r26, 0x00	; 0
    455a:	b0 e0       	ldi	r27, 0x00	; 0
    455c:	84 83       	std	Z+4, r24	; 0x04
    455e:	95 83       	std	Z+5, r25	; 0x05
    4560:	a6 83       	std	Z+6, r26	; 0x06
    4562:	b7 83       	std	Z+7, r27	; 0x07
    4564:	80 e2       	ldi	r24, 0x20	; 32
    4566:	92 e0       	ldi	r25, 0x02	; 2
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    456c:	08 95       	ret

0000456e <_ZN7TwoWire5beginEv>:
    456e:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    4572:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZN7TwoWire14rxBufferLengthE>
    4576:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <_ZN7TwoWire13txBufferIndexE>
    457a:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZN7TwoWire14txBufferLengthE>
    457e:	0e 94 7f 24 	call	0x48fe	; 0x48fe <twi_init>
    4582:	8f e3       	ldi	r24, 0x3F	; 63
    4584:	92 e2       	ldi	r25, 0x22	; 34
    4586:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <twi_attachSlaveTxEvent>
    458a:	85 e1       	ldi	r24, 0x15	; 21
    458c:	92 e2       	ldi	r25, 0x22	; 34
    458e:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <twi_attachSlaveRxEvent>

00004592 <_ZN7TwoWire8setClockEm>:
    4592:	cb 01       	movw	r24, r22
    4594:	ba 01       	movw	r22, r20
    4596:	0c 94 aa 24 	jmp	0x4954	; 0x4954 <twi_setFrequency>

0000459a <_ZN7TwoWire17beginTransmissionEh>:
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <_ZN7TwoWire12transmittingE>
    45a0:	60 93 4b 04 	sts	0x044B, r22	; 0x80044b <_ZN7TwoWire9txAddressE>
    45a4:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <_ZN7TwoWire13txBufferIndexE>
    45a8:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZN7TwoWire14txBufferLengthE>
    45ac:	08 95       	ret

000045ae <_ZN7TwoWire15endTransmissionEh>:
    45ae:	0f 93       	push	r16
    45b0:	06 2f       	mov	r16, r22
    45b2:	21 e0       	ldi	r18, 0x01	; 1
    45b4:	40 91 29 04 	lds	r20, 0x0429	; 0x800429 <_ZN7TwoWire14txBufferLengthE>
    45b8:	6b e2       	ldi	r22, 0x2B	; 43
    45ba:	74 e0       	ldi	r23, 0x04	; 4
    45bc:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZN7TwoWire9txAddressE>
    45c0:	0e 94 f5 25 	call	0x4bea	; 0x4bea <twi_writeTo>
    45c4:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <_ZN7TwoWire13txBufferIndexE>
    45c8:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZN7TwoWire14txBufferLengthE>
    45cc:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <_ZN7TwoWire12transmittingE>
    45d0:	0f 91       	pop	r16
    45d2:	08 95       	ret

000045d4 <_ZN7TwoWire11requestFromEhhmhh>:
    45d4:	4f 92       	push	r4
    45d6:	5f 92       	push	r5
    45d8:	6f 92       	push	r6
    45da:	7f 92       	push	r7
    45dc:	af 92       	push	r10
    45de:	bf 92       	push	r11
    45e0:	cf 92       	push	r12
    45e2:	ef 92       	push	r14
    45e4:	ff 92       	push	r15
    45e6:	0f 93       	push	r16
    45e8:	1f 93       	push	r17
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	5c 01       	movw	r10, r24
    45f0:	f6 2e       	mov	r15, r22
    45f2:	d4 2f       	mov	r29, r20
    45f4:	28 01       	movw	r4, r16
    45f6:	39 01       	movw	r6, r18
    45f8:	ee 20       	and	r14, r14
    45fa:	21 f1       	breq	.+72     	; 0x4644 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    45fc:	0e 94 cd 22 	call	0x459a	; 0x459a <_ZN7TwoWire17beginTransmissionEh>
    4600:	ce 2d       	mov	r28, r14
    4602:	c4 30       	cpi	r28, 0x04	; 4
    4604:	08 f0       	brcs	.+2      	; 0x4608 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    4606:	c3 e0       	ldi	r28, 0x03	; 3
    4608:	c1 50       	subi	r28, 0x01	; 1
    460a:	c0 f0       	brcs	.+48     	; 0x463c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    460c:	28 e0       	ldi	r18, 0x08	; 8
    460e:	c2 9f       	mul	r28, r18
    4610:	c0 01       	movw	r24, r0
    4612:	11 24       	eor	r1, r1
    4614:	a3 01       	movw	r20, r6
    4616:	92 01       	movw	r18, r4
    4618:	04 c0       	rjmp	.+8      	; 0x4622 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    461a:	56 95       	lsr	r21
    461c:	47 95       	ror	r20
    461e:	37 95       	ror	r19
    4620:	27 95       	ror	r18
    4622:	8a 95       	dec	r24
    4624:	d2 f7       	brpl	.-12     	; 0x461a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    4626:	ca 01       	movw	r24, r20
    4628:	b9 01       	movw	r22, r18
    462a:	d5 01       	movw	r26, r10
    462c:	ed 91       	ld	r30, X+
    462e:	fc 91       	ld	r31, X
    4630:	01 90       	ld	r0, Z+
    4632:	f0 81       	ld	r31, Z
    4634:	e0 2d       	mov	r30, r0
    4636:	c5 01       	movw	r24, r10
    4638:	09 95       	icall
    463a:	e6 cf       	rjmp	.-52     	; 0x4608 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    463c:	60 e0       	ldi	r22, 0x00	; 0
    463e:	c5 01       	movw	r24, r10
    4640:	0e 94 d7 22 	call	0x45ae	; 0x45ae <_ZN7TwoWire15endTransmissionEh>
    4644:	4d 2f       	mov	r20, r29
    4646:	d1 32       	cpi	r29, 0x21	; 33
    4648:	08 f0       	brcs	.+2      	; 0x464c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    464a:	40 e2       	ldi	r20, 0x20	; 32
    464c:	2c 2d       	mov	r18, r12
    464e:	6e e4       	ldi	r22, 0x4E	; 78
    4650:	74 e0       	ldi	r23, 0x04	; 4
    4652:	8f 2d       	mov	r24, r15
    4654:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <twi_readFrom>
    4658:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZN7TwoWire13rxBufferIndexE>
    465c:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZN7TwoWire14rxBufferLengthE>
    4660:	df 91       	pop	r29
    4662:	cf 91       	pop	r28
    4664:	1f 91       	pop	r17
    4666:	0f 91       	pop	r16
    4668:	ff 90       	pop	r15
    466a:	ef 90       	pop	r14
    466c:	cf 90       	pop	r12
    466e:	bf 90       	pop	r11
    4670:	af 90       	pop	r10
    4672:	7f 90       	pop	r7
    4674:	6f 90       	pop	r6
    4676:	5f 90       	pop	r5
    4678:	4f 90       	pop	r4
    467a:	08 95       	ret

0000467c <_ZN7TwoWire11requestFromEhhh>:
    467c:	cf 92       	push	r12
    467e:	ef 92       	push	r14
    4680:	0f 93       	push	r16
    4682:	1f 93       	push	r17
    4684:	c2 2e       	mov	r12, r18
    4686:	e1 2c       	mov	r14, r1
    4688:	00 e0       	ldi	r16, 0x00	; 0
    468a:	10 e0       	ldi	r17, 0x00	; 0
    468c:	98 01       	movw	r18, r16
    468e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <_ZN7TwoWire11requestFromEhhmhh>
    4692:	1f 91       	pop	r17
    4694:	0f 91       	pop	r16
    4696:	ef 90       	pop	r14
    4698:	cf 90       	pop	r12
    469a:	08 95       	ret

0000469c <_ZN7TwoWire11requestFromEhh>:
    469c:	21 e0       	ldi	r18, 0x01	; 1
    469e:	0c 94 3e 23 	jmp	0x467c	; 0x467c <_ZN7TwoWire11requestFromEhhh>

000046a2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    46a2:	88 e1       	ldi	r24, 0x18	; 24
    46a4:	94 e0       	ldi	r25, 0x04	; 4
    46a6:	0c 94 a7 22 	jmp	0x454e	; 0x454e <_ZN7TwoWireC1Ev>

000046aa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    46aa:	08 95       	ret

000046ac <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    46ac:	1f 93       	push	r17
    46ae:	cf 93       	push	r28
    46b0:	df 93       	push	r29
    46b2:	18 2f       	mov	r17, r24
    46b4:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    46b6:	61 e0       	ldi	r22, 0x01	; 1
    46b8:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
	if (val == 0)
    46bc:	20 97       	sbiw	r28, 0x00	; 0
    46be:	11 f4       	brne	.+4      	; 0x46c4 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    46c0:	60 e0       	ldi	r22, 0x00	; 0
    46c2:	04 c0       	rjmp	.+8      	; 0x46cc <analogWrite+0x20>
	}
	else if (val == 255)
    46c4:	cf 3f       	cpi	r28, 0xFF	; 255
    46c6:	d1 05       	cpc	r29, r1
    46c8:	39 f4       	brne	.+14     	; 0x46d8 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    46ca:	61 e0       	ldi	r22, 0x01	; 1
    46cc:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    46d4:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    46d8:	e1 2f       	mov	r30, r17
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	e6 5e       	subi	r30, 0xE6	; 230
    46de:	fd 4e       	sbci	r31, 0xED	; 237
    46e0:	e4 91       	lpm	r30, Z
    46e2:	e3 30       	cpi	r30, 0x03	; 3
    46e4:	f9 f0       	breq	.+62     	; 0x4724 <analogWrite+0x78>
    46e6:	48 f4       	brcc	.+18     	; 0x46fa <analogWrite+0x4e>
    46e8:	e1 30       	cpi	r30, 0x01	; 1
    46ea:	b9 f0       	breq	.+46     	; 0x471a <analogWrite+0x6e>
    46ec:	e2 30       	cpi	r30, 0x02	; 2
    46ee:	a1 f5       	brne	.+104    	; 0x4758 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    46f0:	84 b5       	in	r24, 0x24	; 36
    46f2:	80 62       	ori	r24, 0x20	; 32
    46f4:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    46f6:	c8 bd       	out	0x28, r28	; 40
				break;
    46f8:	34 c0       	rjmp	.+104    	; 0x4762 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    46fa:	e7 30       	cpi	r30, 0x07	; 7
    46fc:	e9 f0       	breq	.+58     	; 0x4738 <analogWrite+0x8c>
    46fe:	e8 30       	cpi	r30, 0x08	; 8
    4700:	19 f1       	breq	.+70     	; 0x4748 <analogWrite+0x9c>
    4702:	e4 30       	cpi	r30, 0x04	; 4
    4704:	49 f5       	brne	.+82     	; 0x4758 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    4706:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    470a:	80 62       	ori	r24, 0x20	; 32
    470c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1B = val; // set pwm duty
    4710:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    4714:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				break;
    4718:	24 c0       	rjmp	.+72     	; 0x4762 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    471a:	84 b5       	in	r24, 0x24	; 36
    471c:	80 68       	ori	r24, 0x80	; 128
    471e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    4720:	c7 bd       	out	0x27, r28	; 39
				break;
    4722:	1f c0       	rjmp	.+62     	; 0x4762 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    4724:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    4728:	80 68       	ori	r24, 0x80	; 128
    472a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
				OCR1A = val; // set pwm duty
    472e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    4732:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
    4736:	15 c0       	rjmp	.+42     	; 0x4762 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    4738:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    473c:	80 68       	ori	r24, 0x80	; 128
    473e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2A = val; // set pwm duty
    4742:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				break;
    4746:	0d c0       	rjmp	.+26     	; 0x4762 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    4748:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    474c:	80 62       	ori	r24, 0x20	; 32
    474e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				OCR2B = val; // set pwm duty
    4752:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				break;
    4756:	05 c0       	rjmp	.+10     	; 0x4762 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    4758:	c0 38       	cpi	r28, 0x80	; 128
    475a:	d1 05       	cpc	r29, r1
    475c:	0c f0       	brlt	.+2      	; 0x4760 <analogWrite+0xb4>
    475e:	b5 cf       	rjmp	.-150    	; 0x46ca <analogWrite+0x1e>
    4760:	af cf       	rjmp	.-162    	; 0x46c0 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	1f 91       	pop	r17
    4768:	08 95       	ret

0000476a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    476a:	83 30       	cpi	r24, 0x03	; 3
    476c:	81 f0       	breq	.+32     	; 0x478e <turnOffPWM+0x24>
    476e:	28 f4       	brcc	.+10     	; 0x477a <turnOffPWM+0x10>
    4770:	81 30       	cpi	r24, 0x01	; 1
    4772:	99 f0       	breq	.+38     	; 0x479a <turnOffPWM+0x30>
    4774:	82 30       	cpi	r24, 0x02	; 2
    4776:	a1 f0       	breq	.+40     	; 0x47a0 <turnOffPWM+0x36>
    4778:	08 95       	ret
    477a:	87 30       	cpi	r24, 0x07	; 7
    477c:	a9 f0       	breq	.+42     	; 0x47a8 <turnOffPWM+0x3e>
    477e:	88 30       	cpi	r24, 0x08	; 8
    4780:	b9 f0       	breq	.+46     	; 0x47b0 <turnOffPWM+0x46>
    4782:	84 30       	cpi	r24, 0x04	; 4
    4784:	d1 f4       	brne	.+52     	; 0x47ba <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4786:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    478a:	8f 7d       	andi	r24, 0xDF	; 223
    478c:	03 c0       	rjmp	.+6      	; 0x4794 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    478e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    4792:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4794:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    4798:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    479a:	84 b5       	in	r24, 0x24	; 36
    479c:	8f 77       	andi	r24, 0x7F	; 127
    479e:	02 c0       	rjmp	.+4      	; 0x47a4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    47a0:	84 b5       	in	r24, 0x24	; 36
    47a2:	8f 7d       	andi	r24, 0xDF	; 223
    47a4:	84 bd       	out	0x24, r24	; 36
    47a6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    47a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    47ac:	8f 77       	andi	r24, 0x7F	; 127
    47ae:	03 c0       	rjmp	.+6      	; 0x47b6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    47b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    47b4:	8f 7d       	andi	r24, 0xDF	; 223
    47b6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    47ba:	08 95       	ret

000047bc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    47bc:	cf 93       	push	r28
    47be:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	fc 01       	movw	r30, r24
    47c4:	e2 5d       	subi	r30, 0xD2	; 210
    47c6:	fd 4e       	sbci	r31, 0xED	; 237
    47c8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    47ca:	fc 01       	movw	r30, r24
    47cc:	ee 5b       	subi	r30, 0xBE	; 190
    47ce:	fd 4e       	sbci	r31, 0xED	; 237
    47d0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    47d2:	88 23       	and	r24, r24
    47d4:	61 f1       	breq	.+88     	; 0x482e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	88 0f       	add	r24, r24
    47da:	99 1f       	adc	r25, r25
    47dc:	fc 01       	movw	r30, r24
    47de:	e0 5a       	subi	r30, 0xA0	; 160
    47e0:	fd 4e       	sbci	r31, 0xED	; 237
    47e2:	c5 91       	lpm	r28, Z+
    47e4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    47e6:	fc 01       	movw	r30, r24
    47e8:	ea 5a       	subi	r30, 0xAA	; 170
    47ea:	fd 4e       	sbci	r31, 0xED	; 237
    47ec:	a5 91       	lpm	r26, Z+
    47ee:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    47f0:	61 11       	cpse	r22, r1
    47f2:	09 c0       	rjmp	.+18     	; 0x4806 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    47f4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    47f6:	f8 94       	cli
		*reg &= ~bit;
    47f8:	88 81       	ld	r24, Y
    47fa:	20 95       	com	r18
    47fc:	82 23       	and	r24, r18
    47fe:	88 83       	st	Y, r24
		*out &= ~bit;
    4800:	ec 91       	ld	r30, X
    4802:	2e 23       	and	r18, r30
    4804:	0b c0       	rjmp	.+22     	; 0x481c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4806:	62 30       	cpi	r22, 0x02	; 2
    4808:	61 f4       	brne	.+24     	; 0x4822 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    480a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    480c:	f8 94       	cli
		*reg &= ~bit;
    480e:	88 81       	ld	r24, Y
    4810:	32 2f       	mov	r19, r18
    4812:	30 95       	com	r19
    4814:	83 23       	and	r24, r19
    4816:	88 83       	st	Y, r24
		*out |= bit;
    4818:	ec 91       	ld	r30, X
    481a:	2e 2b       	or	r18, r30
    481c:	2c 93       	st	X, r18
		SREG = oldSREG;
    481e:	9f bf       	out	0x3f, r25	; 63
    4820:	06 c0       	rjmp	.+12     	; 0x482e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4822:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4824:	f8 94       	cli
		*reg |= bit;
    4826:	e8 81       	ld	r30, Y
    4828:	2e 2b       	or	r18, r30
    482a:	28 83       	st	Y, r18
		SREG = oldSREG;
    482c:	8f bf       	out	0x3f, r24	; 63
	}
}
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	08 95       	ret

00004834 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4834:	1f 93       	push	r17
    4836:	cf 93       	push	r28
    4838:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    483a:	28 2f       	mov	r18, r24
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	f9 01       	movw	r30, r18
    4840:	e6 5e       	subi	r30, 0xE6	; 230
    4842:	fd 4e       	sbci	r31, 0xED	; 237
    4844:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4846:	f9 01       	movw	r30, r18
    4848:	e2 5d       	subi	r30, 0xD2	; 210
    484a:	fd 4e       	sbci	r31, 0xED	; 237
    484c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    484e:	f9 01       	movw	r30, r18
    4850:	ee 5b       	subi	r30, 0xBE	; 190
    4852:	fd 4e       	sbci	r31, 0xED	; 237
    4854:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4856:	cc 23       	and	r28, r28
    4858:	c1 f0       	breq	.+48     	; 0x488a <digitalWrite+0x56>
    485a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    485c:	81 11       	cpse	r24, r1
    485e:	0e 94 b5 23 	call	0x476a	; 0x476a <turnOffPWM>

	out = portOutputRegister(port);
    4862:	ec 2f       	mov	r30, r28
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	ee 0f       	add	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	ea 5a       	subi	r30, 0xAA	; 170
    486c:	fd 4e       	sbci	r31, 0xED	; 237
    486e:	a5 91       	lpm	r26, Z+
    4870:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4872:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4874:	f8 94       	cli

	if (val == LOW) {
    4876:	11 11       	cpse	r17, r1
    4878:	04 c0       	rjmp	.+8      	; 0x4882 <digitalWrite+0x4e>
		*out &= ~bit;
    487a:	8c 91       	ld	r24, X
    487c:	d0 95       	com	r29
    487e:	d8 23       	and	r29, r24
    4880:	02 c0       	rjmp	.+4      	; 0x4886 <digitalWrite+0x52>
	} else {
		*out |= bit;
    4882:	ec 91       	ld	r30, X
    4884:	de 2b       	or	r29, r30
    4886:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4888:	9f bf       	out	0x3f, r25	; 63
}
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	1f 91       	pop	r17
    4890:	08 95       	ret

00004892 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    4892:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4894:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4896:	f8 94       	cli
  if (!initialized) {
    4898:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN8SPIClass11initializedE>
    489c:	81 11       	cpse	r24, r1
    489e:	27 c0       	rjmp	.+78     	; 0x48ee <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    48a0:	ec e4       	ldi	r30, 0x4C	; 76
    48a2:	f2 e1       	ldi	r31, 0x12	; 18
    48a4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    48a6:	e8 e3       	ldi	r30, 0x38	; 56
    48a8:	f2 e1       	ldi	r31, 0x12	; 18
    48aa:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    48ac:	e8 2f       	mov	r30, r24
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	ee 0f       	add	r30, r30
    48b2:	ff 1f       	adc	r31, r31
    48b4:	e0 5a       	subi	r30, 0xA0	; 160
    48b6:	fd 4e       	sbci	r31, 0xED	; 237
    48b8:	a5 91       	lpm	r26, Z+
    48ba:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    48bc:	ec 91       	ld	r30, X
    48be:	e9 23       	and	r30, r25
    48c0:	21 f4       	brne	.+8      	; 0x48ca <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    48c2:	61 e0       	ldi	r22, 0x01	; 1
    48c4:	8a e0       	ldi	r24, 0x0A	; 10
    48c6:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    48ca:	61 e0       	ldi	r22, 0x01	; 1
    48cc:	8a e0       	ldi	r24, 0x0A	; 10
    48ce:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    48d2:	8c b5       	in	r24, 0x2c	; 44
    48d4:	80 61       	ori	r24, 0x10	; 16
    48d6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    48d8:	8c b5       	in	r24, 0x2c	; 44
    48da:	80 64       	ori	r24, 0x40	; 64
    48dc:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    48de:	61 e0       	ldi	r22, 0x01	; 1
    48e0:	8d e0       	ldi	r24, 0x0D	; 13
    48e2:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
    pinMode(MOSI, OUTPUT);
    48e6:	61 e0       	ldi	r22, 0x01	; 1
    48e8:	8b e0       	ldi	r24, 0x0B	; 11
    48ea:	0e 94 de 23 	call	0x47bc	; 0x47bc <pinMode>
  }
  initialized++; // reference count
    48ee:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN8SPIClass11initializedE>
    48f2:	8f 5f       	subi	r24, 0xFF	; 255
    48f4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    48f8:	cf bf       	out	0x3f, r28	; 63
}
    48fa:	cf 91       	pop	r28
    48fc:	08 95       	ret

000048fe <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    48fe:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <twi_state>
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_sendStop>
    4908:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <twi_inRepStart>
    490c:	61 e0       	ldi	r22, 0x01	; 1
    490e:	82 e1       	ldi	r24, 0x12	; 18
    4910:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    4914:	61 e0       	ldi	r22, 0x01	; 1
    4916:	83 e1       	ldi	r24, 0x13	; 19
    4918:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    491c:	e9 eb       	ldi	r30, 0xB9	; 185
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	80 81       	ld	r24, Z
    4922:	8e 7f       	andi	r24, 0xFE	; 254
    4924:	80 83       	st	Z, r24
    4926:	80 81       	ld	r24, Z
    4928:	8d 7f       	andi	r24, 0xFD	; 253
    492a:	80 83       	st	Z, r24
    492c:	88 e4       	ldi	r24, 0x48	; 72
    492e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4932:	85 e4       	ldi	r24, 0x45	; 69
    4934:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4938:	08 95       	ret

0000493a <twi_disable>:
    493a:	ec eb       	ldi	r30, 0xBC	; 188
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	80 81       	ld	r24, Z
    4940:	8a 7b       	andi	r24, 0xBA	; 186
    4942:	80 83       	st	Z, r24
    4944:	60 e0       	ldi	r22, 0x00	; 0
    4946:	82 e1       	ldi	r24, 0x12	; 18
    4948:	0e 94 1a 24 	call	0x4834	; 0x4834 <digitalWrite>
    494c:	60 e0       	ldi	r22, 0x00	; 0
    494e:	83 e1       	ldi	r24, 0x13	; 19
    4950:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <digitalWrite>

00004954 <twi_setFrequency>:
    4954:	9b 01       	movw	r18, r22
    4956:	ac 01       	movw	r20, r24
    4958:	60 e0       	ldi	r22, 0x00	; 0
    495a:	74 e2       	ldi	r23, 0x24	; 36
    495c:	84 ef       	ldi	r24, 0xF4	; 244
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodsi4>
    4964:	da 01       	movw	r26, r20
    4966:	c9 01       	movw	r24, r18
    4968:	40 97       	sbiw	r24, 0x10	; 16
    496a:	a1 09       	sbc	r26, r1
    496c:	b1 09       	sbc	r27, r1
    496e:	b6 95       	lsr	r27
    4970:	a7 95       	ror	r26
    4972:	97 95       	ror	r25
    4974:	87 95       	ror	r24
    4976:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    497a:	08 95       	ret

0000497c <twi_transmit>:
    497c:	40 91 94 04 	lds	r20, 0x0494	; 0x800494 <twi_txBufferLength>
    4980:	26 2f       	mov	r18, r22
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	24 0f       	add	r18, r20
    4986:	31 1d       	adc	r19, r1
    4988:	21 32       	cpi	r18, 0x21	; 33
    498a:	31 05       	cpc	r19, r1
    498c:	dc f4       	brge	.+54     	; 0x49c4 <twi_transmit+0x48>
    498e:	20 91 e5 04 	lds	r18, 0x04E5	; 0x8004e5 <twi_state>
    4992:	24 30       	cpi	r18, 0x04	; 4
    4994:	c9 f4       	brne	.+50     	; 0x49c8 <twi_transmit+0x4c>
    4996:	fc 01       	movw	r30, r24
    4998:	80 e0       	ldi	r24, 0x00	; 0
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	86 17       	cp	r24, r22
    499e:	58 f4       	brcc	.+22     	; 0x49b6 <twi_transmit+0x3a>
    49a0:	30 91 94 04 	lds	r19, 0x0494	; 0x800494 <twi_txBufferLength>
    49a4:	21 91       	ld	r18, Z+
    49a6:	dc 01       	movw	r26, r24
    49a8:	aa 56       	subi	r26, 0x6A	; 106
    49aa:	bb 4f       	sbci	r27, 0xFB	; 251
    49ac:	a3 0f       	add	r26, r19
    49ae:	b1 1d       	adc	r27, r1
    49b0:	2c 93       	st	X, r18
    49b2:	01 96       	adiw	r24, 0x01	; 1
    49b4:	f3 cf       	rjmp	.-26     	; 0x499c <twi_transmit+0x20>
    49b6:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_txBufferLength>
    49ba:	68 0f       	add	r22, r24
    49bc:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <twi_txBufferLength>
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	08 95       	ret
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	08 95       	ret
    49c8:	82 e0       	ldi	r24, 0x02	; 2
    49ca:	08 95       	ret

000049cc <twi_attachSlaveRxEvent>:
    49cc:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <twi_onSlaveReceive+0x1>
    49d0:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <twi_onSlaveReceive>
    49d4:	08 95       	ret

000049d6 <twi_attachSlaveTxEvent>:
    49d6:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <twi_onSlaveTransmit+0x1>
    49da:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <twi_onSlaveTransmit>
    49de:	08 95       	ret

000049e0 <twi_releaseBus>:
    49e0:	85 ec       	ldi	r24, 0xC5	; 197
    49e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    49e6:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <twi_state>
    49ea:	08 95       	ret

000049ec <twi_handleTimeout>:
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	91 e0       	ldi	r25, 0x01	; 1
    49f2:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <twi_timed_out_flag>
    49f6:	88 23       	and	r24, r24
    49f8:	61 f0       	breq	.+24     	; 0x4a12 <twi_handleTimeout+0x26>
    49fa:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    49fe:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    4a02:	0e 94 9d 24 	call	0x493a	; 0x493a <twi_disable>
    4a06:	0e 94 7f 24 	call	0x48fe	; 0x48fe <twi_init>
    4a0a:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    4a0e:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	08 95       	ret

00004a18 <twi_readFrom>:
    4a18:	4f 92       	push	r4
    4a1a:	5f 92       	push	r5
    4a1c:	6f 92       	push	r6
    4a1e:	7f 92       	push	r7
    4a20:	8f 92       	push	r8
    4a22:	9f 92       	push	r9
    4a24:	af 92       	push	r10
    4a26:	bf 92       	push	r11
    4a28:	cf 92       	push	r12
    4a2a:	df 92       	push	r13
    4a2c:	ef 92       	push	r14
    4a2e:	ff 92       	push	r15
    4a30:	0f 93       	push	r16
    4a32:	1f 93       	push	r17
    4a34:	cf 93       	push	r28
    4a36:	df 93       	push	r29
    4a38:	f8 2e       	mov	r15, r24
    4a3a:	16 2f       	mov	r17, r22
    4a3c:	07 2f       	mov	r16, r23
    4a3e:	c4 2f       	mov	r28, r20
    4a40:	e2 2e       	mov	r14, r18
    4a42:	41 32       	cpi	r20, 0x21	; 33
    4a44:	08 f0       	brcs	.+2      	; 0x4a48 <twi_readFrom+0x30>
    4a46:	be c0       	rjmp	.+380    	; 0x4bc4 <twi_readFrom+0x1ac>
    4a48:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4a4c:	4b 01       	movw	r8, r22
    4a4e:	5c 01       	movw	r10, r24
    4a50:	d0 91 e5 04 	lds	r29, 0x04E5	; 0x8004e5 <twi_state>
    4a54:	dd 23       	and	r29, r29
    4a56:	31 f1       	breq	.+76     	; 0x4aa4 <twi_readFrom+0x8c>
    4a58:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <twi_timeout_us>
    4a5c:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4a60:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4a64:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4a68:	89 2b       	or	r24, r25
    4a6a:	8a 2b       	or	r24, r26
    4a6c:	8b 2b       	or	r24, r27
    4a6e:	81 f3       	breq	.-32     	; 0x4a50 <twi_readFrom+0x38>
    4a70:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4a74:	40 90 de 04 	lds	r4, 0x04DE	; 0x8004de <twi_timeout_us>
    4a78:	50 90 df 04 	lds	r5, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4a7c:	60 90 e0 04 	lds	r6, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4a80:	70 90 e1 04 	lds	r7, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	88 19       	sub	r24, r8
    4a8a:	99 09       	sbc	r25, r9
    4a8c:	aa 09       	sbc	r26, r10
    4a8e:	bb 09       	sbc	r27, r11
    4a90:	48 16       	cp	r4, r24
    4a92:	59 06       	cpc	r5, r25
    4a94:	6a 06       	cpc	r6, r26
    4a96:	7b 06       	cpc	r7, r27
    4a98:	d8 f6       	brcc	.-74     	; 0x4a50 <twi_readFrom+0x38>
    4a9a:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <twi_do_reset_on_timeout>
    4a9e:	0e 94 f6 24 	call	0x49ec	; 0x49ec <twi_handleTimeout>
    4aa2:	90 c0       	rjmp	.+288    	; 0x4bc4 <twi_readFrom+0x1ac>
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <twi_state>
    4aaa:	e0 92 e3 04 	sts	0x04E3, r14	; 0x8004e3 <twi_sendStop>
    4aae:	9f ef       	ldi	r25, 0xFF	; 255
    4ab0:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <twi_error>
    4ab4:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_masterBufferIndex>
    4ab8:	9c 0f       	add	r25, r28
    4aba:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <twi_masterBufferLength>
    4abe:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_slarw>
    4ac2:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <twi_slarw>
    4ac6:	8f 2d       	mov	r24, r15
    4ac8:	88 0f       	add	r24, r24
    4aca:	89 2b       	or	r24, r25
    4acc:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_slarw>
    4ad0:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_inRepStart>
    4ad4:	81 30       	cpi	r24, 0x01	; 1
    4ad6:	89 f5       	brne	.+98     	; 0x4b3a <twi_readFrom+0x122>
    4ad8:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <twi_inRepStart>
    4adc:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4ae0:	6b 01       	movw	r12, r22
    4ae2:	7c 01       	movw	r14, r24
    4ae4:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_slarw>
    4ae8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4aec:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <twi_timeout_us>
    4af0:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4af4:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4af8:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4afc:	89 2b       	or	r24, r25
    4afe:	8a 2b       	or	r24, r26
    4b00:	8b 2b       	or	r24, r27
    4b02:	a9 f0       	breq	.+42     	; 0x4b2e <twi_readFrom+0x116>
    4b04:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4b08:	80 90 de 04 	lds	r8, 0x04DE	; 0x8004de <twi_timeout_us>
    4b0c:	90 90 df 04 	lds	r9, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4b10:	a0 90 e0 04 	lds	r10, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4b14:	b0 90 e1 04 	lds	r11, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4b18:	dc 01       	movw	r26, r24
    4b1a:	cb 01       	movw	r24, r22
    4b1c:	8c 19       	sub	r24, r12
    4b1e:	9d 09       	sbc	r25, r13
    4b20:	ae 09       	sbc	r26, r14
    4b22:	bf 09       	sbc	r27, r15
    4b24:	88 16       	cp	r8, r24
    4b26:	99 06       	cpc	r9, r25
    4b28:	aa 06       	cpc	r10, r26
    4b2a:	bb 06       	cpc	r11, r27
    4b2c:	90 f1       	brcs	.+100    	; 0x4b92 <twi_readFrom+0x17a>
    4b2e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4b32:	83 fd       	sbrc	r24, 3
    4b34:	d7 cf       	rjmp	.-82     	; 0x4ae4 <twi_readFrom+0xcc>
    4b36:	85 ec       	ldi	r24, 0xC5	; 197
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <twi_readFrom+0x124>
    4b3a:	85 ee       	ldi	r24, 0xE5	; 229
    4b3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4b40:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4b44:	6b 01       	movw	r12, r22
    4b46:	7c 01       	movw	r14, r24
    4b48:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <twi_state>
    4b4c:	81 30       	cpi	r24, 0x01	; 1
    4b4e:	31 f5       	brne	.+76     	; 0x4b9c <twi_readFrom+0x184>
    4b50:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <twi_timeout_us>
    4b54:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4b58:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4b5c:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4b60:	89 2b       	or	r24, r25
    4b62:	8a 2b       	or	r24, r26
    4b64:	8b 2b       	or	r24, r27
    4b66:	81 f3       	breq	.-32     	; 0x4b48 <twi_readFrom+0x130>
    4b68:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4b6c:	80 90 de 04 	lds	r8, 0x04DE	; 0x8004de <twi_timeout_us>
    4b70:	90 90 df 04 	lds	r9, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4b74:	a0 90 e0 04 	lds	r10, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4b78:	b0 90 e1 04 	lds	r11, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	cb 01       	movw	r24, r22
    4b80:	8c 19       	sub	r24, r12
    4b82:	9d 09       	sbc	r25, r13
    4b84:	ae 09       	sbc	r26, r14
    4b86:	bf 09       	sbc	r27, r15
    4b88:	88 16       	cp	r8, r24
    4b8a:	99 06       	cpc	r9, r25
    4b8c:	aa 06       	cpc	r10, r26
    4b8e:	bb 06       	cpc	r11, r27
    4b90:	d8 f6       	brcc	.-74     	; 0x4b48 <twi_readFrom+0x130>
    4b92:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <twi_do_reset_on_timeout>
    4b96:	0e 94 f6 24 	call	0x49ec	; 0x49ec <twi_handleTimeout>
    4b9a:	15 c0       	rjmp	.+42     	; 0x4bc6 <twi_readFrom+0x1ae>
    4b9c:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_masterBufferIndex>
    4ba0:	8c 17       	cp	r24, r28
    4ba2:	10 f4       	brcc	.+4      	; 0x4ba8 <twi_readFrom+0x190>
    4ba4:	c0 91 b7 04 	lds	r28, 0x04B7	; 0x8004b7 <twi_masterBufferIndex>
    4ba8:	a8 eb       	ldi	r26, 0xB8	; 184
    4baa:	b4 e0       	ldi	r27, 0x04	; 4
    4bac:	91 2f       	mov	r25, r17
    4bae:	e1 2f       	mov	r30, r17
    4bb0:	f0 2f       	mov	r31, r16
    4bb2:	8e 2f       	mov	r24, r30
    4bb4:	89 1b       	sub	r24, r25
    4bb6:	8c 17       	cp	r24, r28
    4bb8:	18 f4       	brcc	.+6      	; 0x4bc0 <twi_readFrom+0x1a8>
    4bba:	8d 91       	ld	r24, X+
    4bbc:	81 93       	st	Z+, r24
    4bbe:	f9 cf       	rjmp	.-14     	; 0x4bb2 <twi_readFrom+0x19a>
    4bc0:	dc 2f       	mov	r29, r28
    4bc2:	01 c0       	rjmp	.+2      	; 0x4bc6 <twi_readFrom+0x1ae>
    4bc4:	d0 e0       	ldi	r29, 0x00	; 0
    4bc6:	8d 2f       	mov	r24, r29
    4bc8:	df 91       	pop	r29
    4bca:	cf 91       	pop	r28
    4bcc:	1f 91       	pop	r17
    4bce:	0f 91       	pop	r16
    4bd0:	ff 90       	pop	r15
    4bd2:	ef 90       	pop	r14
    4bd4:	df 90       	pop	r13
    4bd6:	cf 90       	pop	r12
    4bd8:	bf 90       	pop	r11
    4bda:	af 90       	pop	r10
    4bdc:	9f 90       	pop	r9
    4bde:	8f 90       	pop	r8
    4be0:	7f 90       	pop	r7
    4be2:	6f 90       	pop	r6
    4be4:	5f 90       	pop	r5
    4be6:	4f 90       	pop	r4
    4be8:	08 95       	ret

00004bea <twi_writeTo>:
    4bea:	4f 92       	push	r4
    4bec:	5f 92       	push	r5
    4bee:	6f 92       	push	r6
    4bf0:	7f 92       	push	r7
    4bf2:	8f 92       	push	r8
    4bf4:	9f 92       	push	r9
    4bf6:	af 92       	push	r10
    4bf8:	bf 92       	push	r11
    4bfa:	cf 92       	push	r12
    4bfc:	df 92       	push	r13
    4bfe:	ef 92       	push	r14
    4c00:	ff 92       	push	r15
    4c02:	0f 93       	push	r16
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	41 32       	cpi	r20, 0x21	; 33
    4c0c:	08 f0       	brcs	.+2      	; 0x4c10 <twi_writeTo+0x26>
    4c0e:	c6 c0       	rjmp	.+396    	; 0x4d9c <twi_writeTo+0x1b2>
    4c10:	12 2f       	mov	r17, r18
    4c12:	f4 2e       	mov	r15, r20
    4c14:	d7 2e       	mov	r13, r23
    4c16:	e6 2e       	mov	r14, r22
    4c18:	d8 2f       	mov	r29, r24
    4c1a:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4c1e:	4b 01       	movw	r8, r22
    4c20:	5c 01       	movw	r10, r24
    4c22:	c0 91 e5 04 	lds	r28, 0x04E5	; 0x8004e5 <twi_state>
    4c26:	cc 23       	and	r28, r28
    4c28:	11 f1       	breq	.+68     	; 0x4c6e <twi_writeTo+0x84>
    4c2a:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <twi_timeout_us>
    4c2e:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4c32:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4c36:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4c3a:	89 2b       	or	r24, r25
    4c3c:	8a 2b       	or	r24, r26
    4c3e:	8b 2b       	or	r24, r27
    4c40:	81 f3       	breq	.-32     	; 0x4c22 <twi_writeTo+0x38>
    4c42:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4c46:	40 90 de 04 	lds	r4, 0x04DE	; 0x8004de <twi_timeout_us>
    4c4a:	50 90 df 04 	lds	r5, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4c4e:	60 90 e0 04 	lds	r6, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4c52:	70 90 e1 04 	lds	r7, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	88 19       	sub	r24, r8
    4c5c:	99 09       	sbc	r25, r9
    4c5e:	aa 09       	sbc	r26, r10
    4c60:	bb 09       	sbc	r27, r11
    4c62:	48 16       	cp	r4, r24
    4c64:	59 06       	cpc	r5, r25
    4c66:	6a 06       	cpc	r6, r26
    4c68:	7b 06       	cpc	r7, r27
    4c6a:	d8 f6       	brcc	.-74     	; 0x4c22 <twi_writeTo+0x38>
    4c6c:	83 c0       	rjmp	.+262    	; 0x4d74 <twi_writeTo+0x18a>
    4c6e:	82 e0       	ldi	r24, 0x02	; 2
    4c70:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <twi_state>
    4c74:	00 93 e3 04 	sts	0x04E3, r16	; 0x8004e3 <twi_sendStop>
    4c78:	8f ef       	ldi	r24, 0xFF	; 255
    4c7a:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <twi_error>
    4c7e:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_masterBufferIndex>
    4c82:	f0 92 b6 04 	sts	0x04B6, r15	; 0x8004b6 <twi_masterBufferLength>
    4c86:	9e 2d       	mov	r25, r14
    4c88:	a8 eb       	ldi	r26, 0xB8	; 184
    4c8a:	b4 e0       	ldi	r27, 0x04	; 4
    4c8c:	ee 2d       	mov	r30, r14
    4c8e:	fd 2d       	mov	r31, r13
    4c90:	8e 2f       	mov	r24, r30
    4c92:	89 1b       	sub	r24, r25
    4c94:	8f 15       	cp	r24, r15
    4c96:	18 f4       	brcc	.+6      	; 0x4c9e <twi_writeTo+0xb4>
    4c98:	81 91       	ld	r24, Z+
    4c9a:	8d 93       	st	X+, r24
    4c9c:	f9 cf       	rjmp	.-14     	; 0x4c90 <twi_writeTo+0xa6>
    4c9e:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_slarw>
    4ca2:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <twi_slarw>
    4ca6:	dd 0f       	add	r29, r29
    4ca8:	d9 2b       	or	r29, r25
    4caa:	d0 93 e4 04 	sts	0x04E4, r29	; 0x8004e4 <twi_slarw>
    4cae:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_inRepStart>
    4cb2:	81 30       	cpi	r24, 0x01	; 1
    4cb4:	89 f5       	brne	.+98     	; 0x4d18 <twi_writeTo+0x12e>
    4cb6:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <twi_inRepStart>
    4cba:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4cbe:	6b 01       	movw	r12, r22
    4cc0:	7c 01       	movw	r14, r24
    4cc2:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_slarw>
    4cc6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4cca:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <twi_timeout_us>
    4cce:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4cd2:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4cd6:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4cda:	89 2b       	or	r24, r25
    4cdc:	8a 2b       	or	r24, r26
    4cde:	8b 2b       	or	r24, r27
    4ce0:	a9 f0       	breq	.+42     	; 0x4d0c <twi_writeTo+0x122>
    4ce2:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4ce6:	80 90 de 04 	lds	r8, 0x04DE	; 0x8004de <twi_timeout_us>
    4cea:	90 90 df 04 	lds	r9, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4cee:	a0 90 e0 04 	lds	r10, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4cf2:	b0 90 e1 04 	lds	r11, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	8c 19       	sub	r24, r12
    4cfc:	9d 09       	sbc	r25, r13
    4cfe:	ae 09       	sbc	r26, r14
    4d00:	bf 09       	sbc	r27, r15
    4d02:	88 16       	cp	r8, r24
    4d04:	99 06       	cpc	r9, r25
    4d06:	aa 06       	cpc	r10, r26
    4d08:	bb 06       	cpc	r11, r27
    4d0a:	a0 f1       	brcs	.+104    	; 0x4d74 <twi_writeTo+0x18a>
    4d0c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4d10:	83 fd       	sbrc	r24, 3
    4d12:	d7 cf       	rjmp	.-82     	; 0x4cc2 <twi_writeTo+0xd8>
    4d14:	85 ec       	ldi	r24, 0xC5	; 197
    4d16:	01 c0       	rjmp	.+2      	; 0x4d1a <twi_writeTo+0x130>
    4d18:	85 ee       	ldi	r24, 0xE5	; 229
    4d1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4d1e:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4d22:	6b 01       	movw	r12, r22
    4d24:	7c 01       	movw	r14, r24
    4d26:	11 23       	and	r17, r17
    4d28:	59 f1       	breq	.+86     	; 0x4d80 <twi_writeTo+0x196>
    4d2a:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <twi_state>
    4d2e:	82 30       	cpi	r24, 0x02	; 2
    4d30:	39 f5       	brne	.+78     	; 0x4d80 <twi_writeTo+0x196>
    4d32:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <twi_timeout_us>
    4d36:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4d3a:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4d3e:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4d42:	89 2b       	or	r24, r25
    4d44:	8a 2b       	or	r24, r26
    4d46:	8b 2b       	or	r24, r27
    4d48:	71 f3       	breq	.-36     	; 0x4d26 <twi_writeTo+0x13c>
    4d4a:	0e 94 36 12 	call	0x246c	; 0x246c <micros>
    4d4e:	80 90 de 04 	lds	r8, 0x04DE	; 0x8004de <twi_timeout_us>
    4d52:	90 90 df 04 	lds	r9, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4d56:	a0 90 e0 04 	lds	r10, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4d5a:	b0 90 e1 04 	lds	r11, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	8c 19       	sub	r24, r12
    4d64:	9d 09       	sbc	r25, r13
    4d66:	ae 09       	sbc	r26, r14
    4d68:	bf 09       	sbc	r27, r15
    4d6a:	88 16       	cp	r8, r24
    4d6c:	99 06       	cpc	r9, r25
    4d6e:	aa 06       	cpc	r10, r26
    4d70:	bb 06       	cpc	r11, r27
    4d72:	c8 f6       	brcc	.-78     	; 0x4d26 <twi_writeTo+0x13c>
    4d74:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <twi_do_reset_on_timeout>
    4d78:	0e 94 f6 24 	call	0x49ec	; 0x49ec <twi_handleTimeout>
    4d7c:	c5 e0       	ldi	r28, 0x05	; 5
    4d7e:	13 c0       	rjmp	.+38     	; 0x4da6 <twi_writeTo+0x1bc>
    4d80:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_error>
    4d84:	8f 3f       	cpi	r24, 0xFF	; 255
    4d86:	79 f0       	breq	.+30     	; 0x4da6 <twi_writeTo+0x1bc>
    4d88:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_error>
    4d8c:	80 32       	cpi	r24, 0x20	; 32
    4d8e:	41 f0       	breq	.+16     	; 0x4da0 <twi_writeTo+0x1b6>
    4d90:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_error>
    4d94:	80 33       	cpi	r24, 0x30	; 48
    4d96:	31 f0       	breq	.+12     	; 0x4da4 <twi_writeTo+0x1ba>
    4d98:	c4 e0       	ldi	r28, 0x04	; 4
    4d9a:	05 c0       	rjmp	.+10     	; 0x4da6 <twi_writeTo+0x1bc>
    4d9c:	c1 e0       	ldi	r28, 0x01	; 1
    4d9e:	03 c0       	rjmp	.+6      	; 0x4da6 <twi_writeTo+0x1bc>
    4da0:	c2 e0       	ldi	r28, 0x02	; 2
    4da2:	01 c0       	rjmp	.+2      	; 0x4da6 <twi_writeTo+0x1bc>
    4da4:	c3 e0       	ldi	r28, 0x03	; 3
    4da6:	8c 2f       	mov	r24, r28
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	1f 91       	pop	r17
    4dae:	0f 91       	pop	r16
    4db0:	ff 90       	pop	r15
    4db2:	ef 90       	pop	r14
    4db4:	df 90       	pop	r13
    4db6:	cf 90       	pop	r12
    4db8:	bf 90       	pop	r11
    4dba:	af 90       	pop	r10
    4dbc:	9f 90       	pop	r9
    4dbe:	8f 90       	pop	r8
    4dc0:	7f 90       	pop	r7
    4dc2:	6f 90       	pop	r6
    4dc4:	5f 90       	pop	r5
    4dc6:	4f 90       	pop	r4
    4dc8:	08 95       	ret

00004dca <twi_stop>:
    4dca:	85 ed       	ldi	r24, 0xD5	; 213
    4dcc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4dd0:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <twi_timeout_us>
    4dd4:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4dd8:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4ddc:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4de0:	07 96       	adiw	r24, 0x07	; 7
    4de2:	a1 1d       	adc	r26, r1
    4de4:	b1 1d       	adc	r27, r1
    4de6:	23 e0       	ldi	r18, 0x03	; 3
    4de8:	b6 95       	lsr	r27
    4dea:	a7 95       	ror	r26
    4dec:	97 95       	ror	r25
    4dee:	87 95       	ror	r24
    4df0:	2a 95       	dec	r18
    4df2:	d1 f7       	brne	.-12     	; 0x4de8 <twi_stop+0x1e>
    4df4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4df8:	24 ff       	sbrs	r18, 4
    4dfa:	1c c0       	rjmp	.+56     	; 0x4e34 <twi_stop+0x6a>
    4dfc:	40 91 de 04 	lds	r20, 0x04DE	; 0x8004de <twi_timeout_us>
    4e00:	50 91 df 04 	lds	r21, 0x04DF	; 0x8004df <twi_timeout_us+0x1>
    4e04:	60 91 e0 04 	lds	r22, 0x04E0	; 0x8004e0 <twi_timeout_us+0x2>
    4e08:	70 91 e1 04 	lds	r23, 0x04E1	; 0x8004e1 <twi_timeout_us+0x3>
    4e0c:	45 2b       	or	r20, r21
    4e0e:	46 2b       	or	r20, r22
    4e10:	47 2b       	or	r20, r23
    4e12:	81 f3       	breq	.-32     	; 0x4df4 <twi_stop+0x2a>
    4e14:	00 97       	sbiw	r24, 0x00	; 0
    4e16:	a1 05       	cpc	r26, r1
    4e18:	b1 05       	cpc	r27, r1
    4e1a:	41 f0       	breq	.+16     	; 0x4e2c <twi_stop+0x62>
    4e1c:	25 e3       	ldi	r18, 0x35	; 53
    4e1e:	2a 95       	dec	r18
    4e20:	f1 f7       	brne	.-4      	; 0x4e1e <twi_stop+0x54>
    4e22:	00 00       	nop
    4e24:	01 97       	sbiw	r24, 0x01	; 1
    4e26:	a1 09       	sbc	r26, r1
    4e28:	b1 09       	sbc	r27, r1
    4e2a:	e4 cf       	rjmp	.-56     	; 0x4df4 <twi_stop+0x2a>
    4e2c:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <twi_do_reset_on_timeout>
    4e30:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <twi_handleTimeout>
    4e34:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <twi_state>
    4e38:	08 95       	ret

00004e3a <__vector_24>:

ISR(TWI_vect)
{
    4e3a:	1f 92       	push	r1
    4e3c:	0f 92       	push	r0
    4e3e:	0f b6       	in	r0, 0x3f	; 63
    4e40:	0f 92       	push	r0
    4e42:	11 24       	eor	r1, r1
    4e44:	2f 93       	push	r18
    4e46:	3f 93       	push	r19
    4e48:	4f 93       	push	r20
    4e4a:	5f 93       	push	r21
    4e4c:	6f 93       	push	r22
    4e4e:	7f 93       	push	r23
    4e50:	8f 93       	push	r24
    4e52:	9f 93       	push	r25
    4e54:	af 93       	push	r26
    4e56:	bf 93       	push	r27
    4e58:	ef 93       	push	r30
    4e5a:	ff 93       	push	r31
  switch(TW_STATUS){
    4e5c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    4e60:	88 7f       	andi	r24, 0xF8	; 248
    4e62:	80 36       	cpi	r24, 0x60	; 96
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <__vector_24+0x2e>
    4e66:	9e c0       	rjmp	.+316    	; 0x4fa4 <__vector_24+0x16a>
    4e68:	78 f5       	brcc	.+94     	; 0x4ec8 <__vector_24+0x8e>
    4e6a:	88 32       	cpi	r24, 0x28	; 40
    4e6c:	09 f4       	brne	.+2      	; 0x4e70 <__vector_24+0x36>
    4e6e:	5d c0       	rjmp	.+186    	; 0x4f2a <__vector_24+0xf0>
    4e70:	90 f4       	brcc	.+36     	; 0x4e96 <__vector_24+0x5c>
    4e72:	80 31       	cpi	r24, 0x10	; 16
    4e74:	09 f4       	brne	.+2      	; 0x4e78 <__vector_24+0x3e>
    4e76:	56 c0       	rjmp	.+172    	; 0x4f24 <__vector_24+0xea>
    4e78:	38 f4       	brcc	.+14     	; 0x4e88 <__vector_24+0x4e>
    4e7a:	88 23       	and	r24, r24
    4e7c:	09 f4       	brne	.+2      	; 0x4e80 <__vector_24+0x46>
    4e7e:	f5 c0       	rjmp	.+490    	; 0x506a <__vector_24+0x230>
    4e80:	88 30       	cpi	r24, 0x08	; 8
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <__vector_24+0x4c>
    4e84:	4f c0       	rjmp	.+158    	; 0x4f24 <__vector_24+0xea>
    4e86:	f5 c0       	rjmp	.+490    	; 0x5072 <__vector_24+0x238>
    4e88:	88 31       	cpi	r24, 0x18	; 24
    4e8a:	09 f4       	brne	.+2      	; 0x4e8e <__vector_24+0x54>
    4e8c:	4e c0       	rjmp	.+156    	; 0x4f2a <__vector_24+0xf0>
    4e8e:	80 32       	cpi	r24, 0x20	; 32
    4e90:	09 f4       	brne	.+2      	; 0x4e94 <__vector_24+0x5a>
    4e92:	5f c0       	rjmp	.+190    	; 0x4f52 <__vector_24+0x118>
    4e94:	ee c0       	rjmp	.+476    	; 0x5072 <__vector_24+0x238>
    4e96:	80 34       	cpi	r24, 0x40	; 64
    4e98:	09 f4       	brne	.+2      	; 0x4e9c <__vector_24+0x62>
    4e9a:	6a c0       	rjmp	.+212    	; 0x4f70 <__vector_24+0x136>
    4e9c:	58 f4       	brcc	.+22     	; 0x4eb4 <__vector_24+0x7a>
    4e9e:	80 33       	cpi	r24, 0x30	; 48
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <__vector_24+0x6a>
    4ea2:	57 c0       	rjmp	.+174    	; 0x4f52 <__vector_24+0x118>
    4ea4:	88 33       	cpi	r24, 0x38	; 56
    4ea6:	09 f0       	breq	.+2      	; 0x4eaa <__vector_24+0x70>
    4ea8:	e4 c0       	rjmp	.+456    	; 0x5072 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4eaa:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <twi_error>
      twi_releaseBus();
    4eae:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <twi_releaseBus>
      break;
    4eb2:	df c0       	rjmp	.+446    	; 0x5072 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4eb4:	80 35       	cpi	r24, 0x50	; 80
    4eb6:	09 f4       	brne	.+2      	; 0x4eba <__vector_24+0x80>
    4eb8:	4f c0       	rjmp	.+158    	; 0x4f58 <__vector_24+0x11e>
    4eba:	88 35       	cpi	r24, 0x58	; 88
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <__vector_24+0x86>
    4ebe:	5d c0       	rjmp	.+186    	; 0x4f7a <__vector_24+0x140>
    4ec0:	88 34       	cpi	r24, 0x48	; 72
    4ec2:	09 f0       	breq	.+2      	; 0x4ec6 <__vector_24+0x8c>
    4ec4:	d6 c0       	rjmp	.+428    	; 0x5072 <__vector_24+0x238>
    4ec6:	d3 c0       	rjmp	.+422    	; 0x506e <__vector_24+0x234>
    4ec8:	88 39       	cpi	r24, 0x98	; 152
    4eca:	09 f4       	brne	.+2      	; 0x4ece <__vector_24+0x94>
    4ecc:	c4 c0       	rjmp	.+392    	; 0x5056 <__vector_24+0x21c>
    4ece:	a8 f4       	brcc	.+42     	; 0x4efa <__vector_24+0xc0>
    4ed0:	88 37       	cpi	r24, 0x78	; 120
    4ed2:	09 f4       	brne	.+2      	; 0x4ed6 <__vector_24+0x9c>
    4ed4:	67 c0       	rjmp	.+206    	; 0x4fa4 <__vector_24+0x16a>
    4ed6:	38 f4       	brcc	.+14     	; 0x4ee6 <__vector_24+0xac>
    4ed8:	88 36       	cpi	r24, 0x68	; 104
    4eda:	09 f4       	brne	.+2      	; 0x4ede <__vector_24+0xa4>
    4edc:	63 c0       	rjmp	.+198    	; 0x4fa4 <__vector_24+0x16a>
    4ede:	80 37       	cpi	r24, 0x70	; 112
    4ee0:	09 f4       	brne	.+2      	; 0x4ee4 <__vector_24+0xaa>
    4ee2:	60 c0       	rjmp	.+192    	; 0x4fa4 <__vector_24+0x16a>
    4ee4:	c6 c0       	rjmp	.+396    	; 0x5072 <__vector_24+0x238>
    4ee6:	88 38       	cpi	r24, 0x88	; 136
    4ee8:	09 f4       	brne	.+2      	; 0x4eec <__vector_24+0xb2>
    4eea:	b5 c0       	rjmp	.+362    	; 0x5056 <__vector_24+0x21c>
    4eec:	80 39       	cpi	r24, 0x90	; 144
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <__vector_24+0xb8>
    4ef0:	5f c0       	rjmp	.+190    	; 0x4fb0 <__vector_24+0x176>
    4ef2:	80 38       	cpi	r24, 0x80	; 128
    4ef4:	09 f0       	breq	.+2      	; 0x4ef8 <__vector_24+0xbe>
    4ef6:	bd c0       	rjmp	.+378    	; 0x5072 <__vector_24+0x238>
    4ef8:	5b c0       	rjmp	.+182    	; 0x4fb0 <__vector_24+0x176>
    4efa:	80 3b       	cpi	r24, 0xB0	; 176
    4efc:	09 f4       	brne	.+2      	; 0x4f00 <__vector_24+0xc6>
    4efe:	83 c0       	rjmp	.+262    	; 0x5006 <__vector_24+0x1cc>
    4f00:	38 f4       	brcc	.+14     	; 0x4f10 <__vector_24+0xd6>
    4f02:	80 3a       	cpi	r24, 0xA0	; 160
    4f04:	09 f4       	brne	.+2      	; 0x4f08 <__vector_24+0xce>
    4f06:	66 c0       	rjmp	.+204    	; 0x4fd4 <__vector_24+0x19a>
    4f08:	88 3a       	cpi	r24, 0xA8	; 168
    4f0a:	09 f4       	brne	.+2      	; 0x4f0e <__vector_24+0xd4>
    4f0c:	7c c0       	rjmp	.+248    	; 0x5006 <__vector_24+0x1cc>
    4f0e:	b1 c0       	rjmp	.+354    	; 0x5072 <__vector_24+0x238>
    4f10:	80 3c       	cpi	r24, 0xC0	; 192
    4f12:	09 f4       	brne	.+2      	; 0x4f16 <__vector_24+0xdc>
    4f14:	a4 c0       	rjmp	.+328    	; 0x505e <__vector_24+0x224>
    4f16:	88 3c       	cpi	r24, 0xC8	; 200
    4f18:	09 f4       	brne	.+2      	; 0x4f1c <__vector_24+0xe2>
    4f1a:	a1 c0       	rjmp	.+322    	; 0x505e <__vector_24+0x224>
    4f1c:	88 3b       	cpi	r24, 0xB8	; 184
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <__vector_24+0xe8>
    4f20:	87 c0       	rjmp	.+270    	; 0x5030 <__vector_24+0x1f6>
    4f22:	a7 c0       	rjmp	.+334    	; 0x5072 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4f24:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_slarw>
    4f28:	10 c0       	rjmp	.+32     	; 0x4f4a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4f2a:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_masterBufferIndex>
    4f2e:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_masterBufferLength>
    4f32:	98 17       	cp	r25, r24
    4f34:	70 f5       	brcc	.+92     	; 0x4f92 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4f36:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <twi_masterBufferIndex>
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	8e 0f       	add	r24, r30
    4f3e:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_masterBufferIndex>
    4f42:	f0 e0       	ldi	r31, 0x00	; 0
    4f44:	e8 54       	subi	r30, 0x48	; 72
    4f46:	fb 4f       	sbci	r31, 0xFB	; 251
    4f48:	80 81       	ld	r24, Z
    4f4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4f4e:	85 ec       	ldi	r24, 0xC5	; 197
    4f50:	83 c0       	rjmp	.+262    	; 0x5058 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4f52:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <twi_error>
    4f56:	8b c0       	rjmp	.+278    	; 0x506e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4f58:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <twi_masterBufferIndex>
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	8e 0f       	add	r24, r30
    4f60:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_masterBufferIndex>
    4f64:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	e8 54       	subi	r30, 0x48	; 72
    4f6c:	fb 4f       	sbci	r31, 0xFB	; 251
    4f6e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4f70:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_masterBufferIndex>
    4f74:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_masterBufferLength>
    4f78:	6b c0       	rjmp	.+214    	; 0x5050 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4f7a:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <twi_masterBufferIndex>
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	8e 0f       	add	r24, r30
    4f82:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_masterBufferIndex>
    4f86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4f8a:	f0 e0       	ldi	r31, 0x00	; 0
    4f8c:	e8 54       	subi	r30, 0x48	; 72
    4f8e:	fb 4f       	sbci	r31, 0xFB	; 251
    4f90:	80 83       	st	Z, r24
      if (twi_sendStop){
    4f92:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_sendStop>
    4f96:	81 11       	cpse	r24, r1
    4f98:	6a c0       	rjmp	.+212    	; 0x506e <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4fa0:	84 ea       	ldi	r24, 0xA4	; 164
    4fa2:	5e c0       	rjmp	.+188    	; 0x5060 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4fa4:	83 e0       	ldi	r24, 0x03	; 3
    4fa6:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4faa:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_rxBufferIndex>
    4fae:	cf cf       	rjmp	.-98     	; 0x4f4e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4fb0:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_rxBufferIndex>
    4fb4:	80 32       	cpi	r24, 0x20	; 32
    4fb6:	08 f0       	brcs	.+2      	; 0x4fba <__vector_24+0x180>
    4fb8:	4e c0       	rjmp	.+156    	; 0x5056 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4fba:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <twi_rxBufferIndex>
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	8e 0f       	add	r24, r30
    4fc2:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_rxBufferIndex>
    4fc6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4fca:	f0 e0       	ldi	r31, 0x00	; 0
    4fcc:	ec 58       	subi	r30, 0x8C	; 140
    4fce:	fb 4f       	sbci	r31, 0xFB	; 251
    4fd0:	80 83       	st	Z, r24
    4fd2:	bd cf       	rjmp	.-134    	; 0x4f4e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4fd4:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4fd8:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_rxBufferIndex>
    4fdc:	80 32       	cpi	r24, 0x20	; 32
    4fde:	30 f4       	brcc	.+12     	; 0x4fec <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4fe0:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <twi_rxBufferIndex>
    4fe4:	f0 e0       	ldi	r31, 0x00	; 0
    4fe6:	ec 58       	subi	r30, 0x8C	; 140
    4fe8:	fb 4f       	sbci	r31, 0xFB	; 251
    4fea:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4fec:	60 91 73 04 	lds	r22, 0x0473	; 0x800473 <twi_rxBufferIndex>
    4ff0:	70 e0       	ldi	r23, 0x00	; 0
    4ff2:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <twi_onSlaveReceive>
    4ff6:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <twi_onSlaveReceive+0x1>
    4ffa:	84 e7       	ldi	r24, 0x74	; 116
    4ffc:	94 e0       	ldi	r25, 0x04	; 4
    4ffe:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5000:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_rxBufferIndex>
      break;
    5004:	36 c0       	rjmp	.+108    	; 0x5072 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5006:	84 e0       	ldi	r24, 0x04	; 4
    5008:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    500c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5010:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5014:	e0 91 da 04 	lds	r30, 0x04DA	; 0x8004da <twi_onSlaveTransmit>
    5018:	f0 91 db 04 	lds	r31, 0x04DB	; 0x8004db <twi_onSlaveTransmit+0x1>
    501c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    501e:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_txBufferLength>
    5022:	81 11       	cpse	r24, r1
    5024:	05 c0       	rjmp	.+10     	; 0x5030 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    502c:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5030:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <twi_txBufferIndex>
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	8e 0f       	add	r24, r30
    5038:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <twi_txBufferIndex>
    503c:	f0 e0       	ldi	r31, 0x00	; 0
    503e:	ea 56       	subi	r30, 0x6A	; 106
    5040:	fb 4f       	sbci	r31, 0xFB	; 251
    5042:	80 81       	ld	r24, Z
    5044:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5048:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <twi_txBufferIndex>
    504c:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_txBufferLength>
    5050:	98 17       	cp	r25, r24
    5052:	08 f4       	brcc	.+2      	; 0x5056 <__vector_24+0x21c>
    5054:	7c cf       	rjmp	.-264    	; 0x4f4e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5056:	85 e8       	ldi	r24, 0x85	; 133
    5058:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    505c:	0a c0       	rjmp	.+20     	; 0x5072 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    505e:	85 ec       	ldi	r24, 0xC5	; 197
    5060:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5064:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <twi_state>
      break;
    5068:	04 c0       	rjmp	.+8      	; 0x5072 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    506a:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <twi_error>
      twi_stop();
    506e:	0e 94 e5 26 	call	0x4dca	; 0x4dca <twi_stop>
      break;
  }
}
    5072:	ff 91       	pop	r31
    5074:	ef 91       	pop	r30
    5076:	bf 91       	pop	r27
    5078:	af 91       	pop	r26
    507a:	9f 91       	pop	r25
    507c:	8f 91       	pop	r24
    507e:	7f 91       	pop	r23
    5080:	6f 91       	pop	r22
    5082:	5f 91       	pop	r21
    5084:	4f 91       	pop	r20
    5086:	3f 91       	pop	r19
    5088:	2f 91       	pop	r18
    508a:	0f 90       	pop	r0
    508c:	0f be       	out	0x3f, r0	; 63
    508e:	0f 90       	pop	r0
    5090:	1f 90       	pop	r1
    5092:	18 95       	reti

00005094 <__cmpsf2>:
    5094:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_cmp>
    5098:	08 f4       	brcc	.+2      	; 0x509c <__cmpsf2+0x8>
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	08 95       	ret

0000509e <__mulsf3>:
    509e:	0e 94 62 28 	call	0x50c4	; 0x50c4 <__mulsf3x>
    50a2:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__fp_round>
    50a6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_pscA>
    50aa:	38 f0       	brcs	.+14     	; 0x50ba <__mulsf3+0x1c>
    50ac:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscB>
    50b0:	20 f0       	brcs	.+8      	; 0x50ba <__mulsf3+0x1c>
    50b2:	95 23       	and	r25, r21
    50b4:	11 f0       	breq	.+4      	; 0x50ba <__mulsf3+0x1c>
    50b6:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_inf>
    50ba:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__fp_nan>
    50be:	11 24       	eor	r1, r1
    50c0:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_szero>

000050c4 <__mulsf3x>:
    50c4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_split3>
    50c8:	70 f3       	brcs	.-36     	; 0x50a6 <__mulsf3+0x8>

000050ca <__mulsf3_pse>:
    50ca:	95 9f       	mul	r25, r21
    50cc:	c1 f3       	breq	.-16     	; 0x50be <__mulsf3+0x20>
    50ce:	95 0f       	add	r25, r21
    50d0:	50 e0       	ldi	r21, 0x00	; 0
    50d2:	55 1f       	adc	r21, r21
    50d4:	62 9f       	mul	r22, r18
    50d6:	f0 01       	movw	r30, r0
    50d8:	72 9f       	mul	r23, r18
    50da:	bb 27       	eor	r27, r27
    50dc:	f0 0d       	add	r31, r0
    50de:	b1 1d       	adc	r27, r1
    50e0:	63 9f       	mul	r22, r19
    50e2:	aa 27       	eor	r26, r26
    50e4:	f0 0d       	add	r31, r0
    50e6:	b1 1d       	adc	r27, r1
    50e8:	aa 1f       	adc	r26, r26
    50ea:	64 9f       	mul	r22, r20
    50ec:	66 27       	eor	r22, r22
    50ee:	b0 0d       	add	r27, r0
    50f0:	a1 1d       	adc	r26, r1
    50f2:	66 1f       	adc	r22, r22
    50f4:	82 9f       	mul	r24, r18
    50f6:	22 27       	eor	r18, r18
    50f8:	b0 0d       	add	r27, r0
    50fa:	a1 1d       	adc	r26, r1
    50fc:	62 1f       	adc	r22, r18
    50fe:	73 9f       	mul	r23, r19
    5100:	b0 0d       	add	r27, r0
    5102:	a1 1d       	adc	r26, r1
    5104:	62 1f       	adc	r22, r18
    5106:	83 9f       	mul	r24, r19
    5108:	a0 0d       	add	r26, r0
    510a:	61 1d       	adc	r22, r1
    510c:	22 1f       	adc	r18, r18
    510e:	74 9f       	mul	r23, r20
    5110:	33 27       	eor	r19, r19
    5112:	a0 0d       	add	r26, r0
    5114:	61 1d       	adc	r22, r1
    5116:	23 1f       	adc	r18, r19
    5118:	84 9f       	mul	r24, r20
    511a:	60 0d       	add	r22, r0
    511c:	21 1d       	adc	r18, r1
    511e:	82 2f       	mov	r24, r18
    5120:	76 2f       	mov	r23, r22
    5122:	6a 2f       	mov	r22, r26
    5124:	11 24       	eor	r1, r1
    5126:	9f 57       	subi	r25, 0x7F	; 127
    5128:	50 40       	sbci	r21, 0x00	; 0
    512a:	9a f0       	brmi	.+38     	; 0x5152 <__mulsf3_pse+0x88>
    512c:	f1 f0       	breq	.+60     	; 0x516a <__mulsf3_pse+0xa0>
    512e:	88 23       	and	r24, r24
    5130:	4a f0       	brmi	.+18     	; 0x5144 <__mulsf3_pse+0x7a>
    5132:	ee 0f       	add	r30, r30
    5134:	ff 1f       	adc	r31, r31
    5136:	bb 1f       	adc	r27, r27
    5138:	66 1f       	adc	r22, r22
    513a:	77 1f       	adc	r23, r23
    513c:	88 1f       	adc	r24, r24
    513e:	91 50       	subi	r25, 0x01	; 1
    5140:	50 40       	sbci	r21, 0x00	; 0
    5142:	a9 f7       	brne	.-22     	; 0x512e <__mulsf3_pse+0x64>
    5144:	9e 3f       	cpi	r25, 0xFE	; 254
    5146:	51 05       	cpc	r21, r1
    5148:	80 f0       	brcs	.+32     	; 0x516a <__mulsf3_pse+0xa0>
    514a:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_inf>
    514e:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__fp_szero>
    5152:	5f 3f       	cpi	r21, 0xFF	; 255
    5154:	e4 f3       	brlt	.-8      	; 0x514e <__mulsf3_pse+0x84>
    5156:	98 3e       	cpi	r25, 0xE8	; 232
    5158:	d4 f3       	brlt	.-12     	; 0x514e <__mulsf3_pse+0x84>
    515a:	86 95       	lsr	r24
    515c:	77 95       	ror	r23
    515e:	67 95       	ror	r22
    5160:	b7 95       	ror	r27
    5162:	f7 95       	ror	r31
    5164:	e7 95       	ror	r30
    5166:	9f 5f       	subi	r25, 0xFF	; 255
    5168:	c1 f7       	brne	.-16     	; 0x515a <__mulsf3_pse+0x90>
    516a:	fe 2b       	or	r31, r30
    516c:	88 0f       	add	r24, r24
    516e:	91 1d       	adc	r25, r1
    5170:	96 95       	lsr	r25
    5172:	87 95       	ror	r24
    5174:	97 f9       	bld	r25, 7
    5176:	08 95       	ret

00005178 <__unordsf2>:
    5178:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fp_cmp>
    517c:	88 0b       	sbc	r24, r24
    517e:	99 0b       	sbc	r25, r25
    5180:	08 95       	ret

00005182 <__mulsi3>:
    5182:	db 01       	movw	r26, r22
    5184:	8f 93       	push	r24
    5186:	9f 93       	push	r25
    5188:	0e 94 2c 29 	call	0x5258	; 0x5258 <__muluhisi3>
    518c:	bf 91       	pop	r27
    518e:	af 91       	pop	r26
    5190:	a2 9f       	mul	r26, r18
    5192:	80 0d       	add	r24, r0
    5194:	91 1d       	adc	r25, r1
    5196:	a3 9f       	mul	r26, r19
    5198:	90 0d       	add	r25, r0
    519a:	b2 9f       	mul	r27, r18
    519c:	90 0d       	add	r25, r0
    519e:	11 24       	eor	r1, r1
    51a0:	08 95       	ret

000051a2 <__divmodhi4>:
    51a2:	97 fb       	bst	r25, 7
    51a4:	07 2e       	mov	r0, r23
    51a6:	16 f4       	brtc	.+4      	; 0x51ac <__divmodhi4+0xa>
    51a8:	00 94       	com	r0
    51aa:	07 d0       	rcall	.+14     	; 0x51ba <__divmodhi4_neg1>
    51ac:	77 fd       	sbrc	r23, 7
    51ae:	09 d0       	rcall	.+18     	; 0x51c2 <__divmodhi4_neg2>
    51b0:	0e 94 37 29 	call	0x526e	; 0x526e <__udivmodhi4>
    51b4:	07 fc       	sbrc	r0, 7
    51b6:	05 d0       	rcall	.+10     	; 0x51c2 <__divmodhi4_neg2>
    51b8:	3e f4       	brtc	.+14     	; 0x51c8 <__divmodhi4_exit>

000051ba <__divmodhi4_neg1>:
    51ba:	90 95       	com	r25
    51bc:	81 95       	neg	r24
    51be:	9f 4f       	sbci	r25, 0xFF	; 255
    51c0:	08 95       	ret

000051c2 <__divmodhi4_neg2>:
    51c2:	70 95       	com	r23
    51c4:	61 95       	neg	r22
    51c6:	7f 4f       	sbci	r23, 0xFF	; 255

000051c8 <__divmodhi4_exit>:
    51c8:	08 95       	ret

000051ca <__udivmodsi4>:
    51ca:	a1 e2       	ldi	r26, 0x21	; 33
    51cc:	1a 2e       	mov	r1, r26
    51ce:	aa 1b       	sub	r26, r26
    51d0:	bb 1b       	sub	r27, r27
    51d2:	fd 01       	movw	r30, r26
    51d4:	0d c0       	rjmp	.+26     	; 0x51f0 <__udivmodsi4_ep>

000051d6 <__udivmodsi4_loop>:
    51d6:	aa 1f       	adc	r26, r26
    51d8:	bb 1f       	adc	r27, r27
    51da:	ee 1f       	adc	r30, r30
    51dc:	ff 1f       	adc	r31, r31
    51de:	a2 17       	cp	r26, r18
    51e0:	b3 07       	cpc	r27, r19
    51e2:	e4 07       	cpc	r30, r20
    51e4:	f5 07       	cpc	r31, r21
    51e6:	20 f0       	brcs	.+8      	; 0x51f0 <__udivmodsi4_ep>
    51e8:	a2 1b       	sub	r26, r18
    51ea:	b3 0b       	sbc	r27, r19
    51ec:	e4 0b       	sbc	r30, r20
    51ee:	f5 0b       	sbc	r31, r21

000051f0 <__udivmodsi4_ep>:
    51f0:	66 1f       	adc	r22, r22
    51f2:	77 1f       	adc	r23, r23
    51f4:	88 1f       	adc	r24, r24
    51f6:	99 1f       	adc	r25, r25
    51f8:	1a 94       	dec	r1
    51fa:	69 f7       	brne	.-38     	; 0x51d6 <__udivmodsi4_loop>
    51fc:	60 95       	com	r22
    51fe:	70 95       	com	r23
    5200:	80 95       	com	r24
    5202:	90 95       	com	r25
    5204:	9b 01       	movw	r18, r22
    5206:	ac 01       	movw	r20, r24
    5208:	bd 01       	movw	r22, r26
    520a:	cf 01       	movw	r24, r30
    520c:	08 95       	ret

0000520e <__divmodsi4>:
    520e:	05 2e       	mov	r0, r21
    5210:	97 fb       	bst	r25, 7
    5212:	1e f4       	brtc	.+6      	; 0x521a <__divmodsi4+0xc>
    5214:	00 94       	com	r0
    5216:	0e 94 1e 29 	call	0x523c	; 0x523c <__negsi2>
    521a:	57 fd       	sbrc	r21, 7
    521c:	07 d0       	rcall	.+14     	; 0x522c <__divmodsi4_neg2>
    521e:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__udivmodsi4>
    5222:	07 fc       	sbrc	r0, 7
    5224:	03 d0       	rcall	.+6      	; 0x522c <__divmodsi4_neg2>
    5226:	4e f4       	brtc	.+18     	; 0x523a <__divmodsi4_exit>
    5228:	0c 94 1e 29 	jmp	0x523c	; 0x523c <__negsi2>

0000522c <__divmodsi4_neg2>:
    522c:	50 95       	com	r21
    522e:	40 95       	com	r20
    5230:	30 95       	com	r19
    5232:	21 95       	neg	r18
    5234:	3f 4f       	sbci	r19, 0xFF	; 255
    5236:	4f 4f       	sbci	r20, 0xFF	; 255
    5238:	5f 4f       	sbci	r21, 0xFF	; 255

0000523a <__divmodsi4_exit>:
    523a:	08 95       	ret

0000523c <__negsi2>:
    523c:	90 95       	com	r25
    523e:	80 95       	com	r24
    5240:	70 95       	com	r23
    5242:	61 95       	neg	r22
    5244:	7f 4f       	sbci	r23, 0xFF	; 255
    5246:	8f 4f       	sbci	r24, 0xFF	; 255
    5248:	9f 4f       	sbci	r25, 0xFF	; 255
    524a:	08 95       	ret

0000524c <__tablejump2__>:
    524c:	ee 0f       	add	r30, r30
    524e:	ff 1f       	adc	r31, r31
    5250:	05 90       	lpm	r0, Z+
    5252:	f4 91       	lpm	r31, Z
    5254:	e0 2d       	mov	r30, r0
    5256:	09 94       	ijmp

00005258 <__muluhisi3>:
    5258:	0e 94 4b 29 	call	0x5296	; 0x5296 <__umulhisi3>
    525c:	a5 9f       	mul	r26, r21
    525e:	90 0d       	add	r25, r0
    5260:	b4 9f       	mul	r27, r20
    5262:	90 0d       	add	r25, r0
    5264:	a4 9f       	mul	r26, r20
    5266:	80 0d       	add	r24, r0
    5268:	91 1d       	adc	r25, r1
    526a:	11 24       	eor	r1, r1
    526c:	08 95       	ret

0000526e <__udivmodhi4>:
    526e:	aa 1b       	sub	r26, r26
    5270:	bb 1b       	sub	r27, r27
    5272:	51 e1       	ldi	r21, 0x11	; 17
    5274:	07 c0       	rjmp	.+14     	; 0x5284 <__udivmodhi4_ep>

00005276 <__udivmodhi4_loop>:
    5276:	aa 1f       	adc	r26, r26
    5278:	bb 1f       	adc	r27, r27
    527a:	a6 17       	cp	r26, r22
    527c:	b7 07       	cpc	r27, r23
    527e:	10 f0       	brcs	.+4      	; 0x5284 <__udivmodhi4_ep>
    5280:	a6 1b       	sub	r26, r22
    5282:	b7 0b       	sbc	r27, r23

00005284 <__udivmodhi4_ep>:
    5284:	88 1f       	adc	r24, r24
    5286:	99 1f       	adc	r25, r25
    5288:	5a 95       	dec	r21
    528a:	a9 f7       	brne	.-22     	; 0x5276 <__udivmodhi4_loop>
    528c:	80 95       	com	r24
    528e:	90 95       	com	r25
    5290:	bc 01       	movw	r22, r24
    5292:	cd 01       	movw	r24, r26
    5294:	08 95       	ret

00005296 <__umulhisi3>:
    5296:	a2 9f       	mul	r26, r18
    5298:	b0 01       	movw	r22, r0
    529a:	b3 9f       	mul	r27, r19
    529c:	c0 01       	movw	r24, r0
    529e:	a3 9f       	mul	r26, r19
    52a0:	70 0d       	add	r23, r0
    52a2:	81 1d       	adc	r24, r1
    52a4:	11 24       	eor	r1, r1
    52a6:	91 1d       	adc	r25, r1
    52a8:	b2 9f       	mul	r27, r18
    52aa:	70 0d       	add	r23, r0
    52ac:	81 1d       	adc	r24, r1
    52ae:	11 24       	eor	r1, r1
    52b0:	91 1d       	adc	r25, r1
    52b2:	08 95       	ret

000052b4 <dtostrf>:
    52b4:	ef 92       	push	r14
    52b6:	0f 93       	push	r16
    52b8:	1f 93       	push	r17
    52ba:	cf 93       	push	r28
    52bc:	df 93       	push	r29
    52be:	e8 01       	movw	r28, r16
    52c0:	47 fd       	sbrc	r20, 7
    52c2:	02 c0       	rjmp	.+4      	; 0x52c8 <dtostrf+0x14>
    52c4:	34 e0       	ldi	r19, 0x04	; 4
    52c6:	01 c0       	rjmp	.+2      	; 0x52ca <dtostrf+0x16>
    52c8:	34 e1       	ldi	r19, 0x14	; 20
    52ca:	04 2e       	mov	r0, r20
    52cc:	00 0c       	add	r0, r0
    52ce:	55 0b       	sbc	r21, r21
    52d0:	57 ff       	sbrs	r21, 7
    52d2:	03 c0       	rjmp	.+6      	; 0x52da <dtostrf+0x26>
    52d4:	51 95       	neg	r21
    52d6:	41 95       	neg	r20
    52d8:	51 09       	sbc	r21, r1
    52da:	e3 2e       	mov	r14, r19
    52dc:	02 2f       	mov	r16, r18
    52de:	24 2f       	mov	r18, r20
    52e0:	ae 01       	movw	r20, r28
    52e2:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <dtoa_prf>
    52e6:	ce 01       	movw	r24, r28
    52e8:	df 91       	pop	r29
    52ea:	cf 91       	pop	r28
    52ec:	1f 91       	pop	r17
    52ee:	0f 91       	pop	r16
    52f0:	ef 90       	pop	r14
    52f2:	08 95       	ret

000052f4 <malloc>:
    52f4:	0f 93       	push	r16
    52f6:	1f 93       	push	r17
    52f8:	cf 93       	push	r28
    52fa:	df 93       	push	r29
    52fc:	82 30       	cpi	r24, 0x02	; 2
    52fe:	91 05       	cpc	r25, r1
    5300:	10 f4       	brcc	.+4      	; 0x5306 <malloc+0x12>
    5302:	82 e0       	ldi	r24, 0x02	; 2
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <__flp>
    530a:	f0 91 e9 04 	lds	r31, 0x04E9	; 0x8004e9 <__flp+0x1>
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	a0 e0       	ldi	r26, 0x00	; 0
    5314:	b0 e0       	ldi	r27, 0x00	; 0
    5316:	30 97       	sbiw	r30, 0x00	; 0
    5318:	19 f1       	breq	.+70     	; 0x5360 <malloc+0x6c>
    531a:	40 81       	ld	r20, Z
    531c:	51 81       	ldd	r21, Z+1	; 0x01
    531e:	02 81       	ldd	r16, Z+2	; 0x02
    5320:	13 81       	ldd	r17, Z+3	; 0x03
    5322:	48 17       	cp	r20, r24
    5324:	59 07       	cpc	r21, r25
    5326:	c8 f0       	brcs	.+50     	; 0x535a <malloc+0x66>
    5328:	84 17       	cp	r24, r20
    532a:	95 07       	cpc	r25, r21
    532c:	69 f4       	brne	.+26     	; 0x5348 <malloc+0x54>
    532e:	10 97       	sbiw	r26, 0x00	; 0
    5330:	31 f0       	breq	.+12     	; 0x533e <malloc+0x4a>
    5332:	12 96       	adiw	r26, 0x02	; 2
    5334:	0c 93       	st	X, r16
    5336:	12 97       	sbiw	r26, 0x02	; 2
    5338:	13 96       	adiw	r26, 0x03	; 3
    533a:	1c 93       	st	X, r17
    533c:	27 c0       	rjmp	.+78     	; 0x538c <malloc+0x98>
    533e:	00 93 e8 04 	sts	0x04E8, r16	; 0x8004e8 <__flp>
    5342:	10 93 e9 04 	sts	0x04E9, r17	; 0x8004e9 <__flp+0x1>
    5346:	22 c0       	rjmp	.+68     	; 0x538c <malloc+0x98>
    5348:	21 15       	cp	r18, r1
    534a:	31 05       	cpc	r19, r1
    534c:	19 f0       	breq	.+6      	; 0x5354 <malloc+0x60>
    534e:	42 17       	cp	r20, r18
    5350:	53 07       	cpc	r21, r19
    5352:	18 f4       	brcc	.+6      	; 0x535a <malloc+0x66>
    5354:	9a 01       	movw	r18, r20
    5356:	bd 01       	movw	r22, r26
    5358:	ef 01       	movw	r28, r30
    535a:	df 01       	movw	r26, r30
    535c:	f8 01       	movw	r30, r16
    535e:	db cf       	rjmp	.-74     	; 0x5316 <malloc+0x22>
    5360:	21 15       	cp	r18, r1
    5362:	31 05       	cpc	r19, r1
    5364:	f9 f0       	breq	.+62     	; 0x53a4 <malloc+0xb0>
    5366:	28 1b       	sub	r18, r24
    5368:	39 0b       	sbc	r19, r25
    536a:	24 30       	cpi	r18, 0x04	; 4
    536c:	31 05       	cpc	r19, r1
    536e:	80 f4       	brcc	.+32     	; 0x5390 <malloc+0x9c>
    5370:	8a 81       	ldd	r24, Y+2	; 0x02
    5372:	9b 81       	ldd	r25, Y+3	; 0x03
    5374:	61 15       	cp	r22, r1
    5376:	71 05       	cpc	r23, r1
    5378:	21 f0       	breq	.+8      	; 0x5382 <malloc+0x8e>
    537a:	fb 01       	movw	r30, r22
    537c:	93 83       	std	Z+3, r25	; 0x03
    537e:	82 83       	std	Z+2, r24	; 0x02
    5380:	04 c0       	rjmp	.+8      	; 0x538a <malloc+0x96>
    5382:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <__flp+0x1>
    5386:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <__flp>
    538a:	fe 01       	movw	r30, r28
    538c:	32 96       	adiw	r30, 0x02	; 2
    538e:	44 c0       	rjmp	.+136    	; 0x5418 <malloc+0x124>
    5390:	fe 01       	movw	r30, r28
    5392:	e2 0f       	add	r30, r18
    5394:	f3 1f       	adc	r31, r19
    5396:	81 93       	st	Z+, r24
    5398:	91 93       	st	Z+, r25
    539a:	22 50       	subi	r18, 0x02	; 2
    539c:	31 09       	sbc	r19, r1
    539e:	39 83       	std	Y+1, r19	; 0x01
    53a0:	28 83       	st	Y, r18
    53a2:	3a c0       	rjmp	.+116    	; 0x5418 <malloc+0x124>
    53a4:	20 91 e6 04 	lds	r18, 0x04E6	; 0x8004e6 <__brkval>
    53a8:	30 91 e7 04 	lds	r19, 0x04E7	; 0x8004e7 <__brkval+0x1>
    53ac:	23 2b       	or	r18, r19
    53ae:	41 f4       	brne	.+16     	; 0x53c0 <malloc+0xcc>
    53b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    53b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    53b8:	30 93 e7 04 	sts	0x04E7, r19	; 0x8004e7 <__brkval+0x1>
    53bc:	20 93 e6 04 	sts	0x04E6, r18	; 0x8004e6 <__brkval>
    53c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    53c4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    53c8:	21 15       	cp	r18, r1
    53ca:	31 05       	cpc	r19, r1
    53cc:	41 f4       	brne	.+16     	; 0x53de <malloc+0xea>
    53ce:	2d b7       	in	r18, 0x3d	; 61
    53d0:	3e b7       	in	r19, 0x3e	; 62
    53d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    53d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    53da:	24 1b       	sub	r18, r20
    53dc:	35 0b       	sbc	r19, r21
    53de:	e0 91 e6 04 	lds	r30, 0x04E6	; 0x8004e6 <__brkval>
    53e2:	f0 91 e7 04 	lds	r31, 0x04E7	; 0x8004e7 <__brkval+0x1>
    53e6:	e2 17       	cp	r30, r18
    53e8:	f3 07       	cpc	r31, r19
    53ea:	a0 f4       	brcc	.+40     	; 0x5414 <malloc+0x120>
    53ec:	2e 1b       	sub	r18, r30
    53ee:	3f 0b       	sbc	r19, r31
    53f0:	28 17       	cp	r18, r24
    53f2:	39 07       	cpc	r19, r25
    53f4:	78 f0       	brcs	.+30     	; 0x5414 <malloc+0x120>
    53f6:	ac 01       	movw	r20, r24
    53f8:	4e 5f       	subi	r20, 0xFE	; 254
    53fa:	5f 4f       	sbci	r21, 0xFF	; 255
    53fc:	24 17       	cp	r18, r20
    53fe:	35 07       	cpc	r19, r21
    5400:	48 f0       	brcs	.+18     	; 0x5414 <malloc+0x120>
    5402:	4e 0f       	add	r20, r30
    5404:	5f 1f       	adc	r21, r31
    5406:	50 93 e7 04 	sts	0x04E7, r21	; 0x8004e7 <__brkval+0x1>
    540a:	40 93 e6 04 	sts	0x04E6, r20	; 0x8004e6 <__brkval>
    540e:	81 93       	st	Z+, r24
    5410:	91 93       	st	Z+, r25
    5412:	02 c0       	rjmp	.+4      	; 0x5418 <malloc+0x124>
    5414:	e0 e0       	ldi	r30, 0x00	; 0
    5416:	f0 e0       	ldi	r31, 0x00	; 0
    5418:	cf 01       	movw	r24, r30
    541a:	df 91       	pop	r29
    541c:	cf 91       	pop	r28
    541e:	1f 91       	pop	r17
    5420:	0f 91       	pop	r16
    5422:	08 95       	ret

00005424 <free>:
    5424:	cf 93       	push	r28
    5426:	df 93       	push	r29
    5428:	00 97       	sbiw	r24, 0x00	; 0
    542a:	09 f4       	brne	.+2      	; 0x542e <free+0xa>
    542c:	81 c0       	rjmp	.+258    	; 0x5530 <free+0x10c>
    542e:	fc 01       	movw	r30, r24
    5430:	32 97       	sbiw	r30, 0x02	; 2
    5432:	13 82       	std	Z+3, r1	; 0x03
    5434:	12 82       	std	Z+2, r1	; 0x02
    5436:	a0 91 e8 04 	lds	r26, 0x04E8	; 0x8004e8 <__flp>
    543a:	b0 91 e9 04 	lds	r27, 0x04E9	; 0x8004e9 <__flp+0x1>
    543e:	10 97       	sbiw	r26, 0x00	; 0
    5440:	81 f4       	brne	.+32     	; 0x5462 <free+0x3e>
    5442:	20 81       	ld	r18, Z
    5444:	31 81       	ldd	r19, Z+1	; 0x01
    5446:	82 0f       	add	r24, r18
    5448:	93 1f       	adc	r25, r19
    544a:	20 91 e6 04 	lds	r18, 0x04E6	; 0x8004e6 <__brkval>
    544e:	30 91 e7 04 	lds	r19, 0x04E7	; 0x8004e7 <__brkval+0x1>
    5452:	28 17       	cp	r18, r24
    5454:	39 07       	cpc	r19, r25
    5456:	51 f5       	brne	.+84     	; 0x54ac <free+0x88>
    5458:	f0 93 e7 04 	sts	0x04E7, r31	; 0x8004e7 <__brkval+0x1>
    545c:	e0 93 e6 04 	sts	0x04E6, r30	; 0x8004e6 <__brkval>
    5460:	67 c0       	rjmp	.+206    	; 0x5530 <free+0x10c>
    5462:	ed 01       	movw	r28, r26
    5464:	20 e0       	ldi	r18, 0x00	; 0
    5466:	30 e0       	ldi	r19, 0x00	; 0
    5468:	ce 17       	cp	r28, r30
    546a:	df 07       	cpc	r29, r31
    546c:	40 f4       	brcc	.+16     	; 0x547e <free+0x5a>
    546e:	4a 81       	ldd	r20, Y+2	; 0x02
    5470:	5b 81       	ldd	r21, Y+3	; 0x03
    5472:	9e 01       	movw	r18, r28
    5474:	41 15       	cp	r20, r1
    5476:	51 05       	cpc	r21, r1
    5478:	f1 f0       	breq	.+60     	; 0x54b6 <free+0x92>
    547a:	ea 01       	movw	r28, r20
    547c:	f5 cf       	rjmp	.-22     	; 0x5468 <free+0x44>
    547e:	d3 83       	std	Z+3, r29	; 0x03
    5480:	c2 83       	std	Z+2, r28	; 0x02
    5482:	40 81       	ld	r20, Z
    5484:	51 81       	ldd	r21, Z+1	; 0x01
    5486:	84 0f       	add	r24, r20
    5488:	95 1f       	adc	r25, r21
    548a:	c8 17       	cp	r28, r24
    548c:	d9 07       	cpc	r29, r25
    548e:	59 f4       	brne	.+22     	; 0x54a6 <free+0x82>
    5490:	88 81       	ld	r24, Y
    5492:	99 81       	ldd	r25, Y+1	; 0x01
    5494:	84 0f       	add	r24, r20
    5496:	95 1f       	adc	r25, r21
    5498:	02 96       	adiw	r24, 0x02	; 2
    549a:	91 83       	std	Z+1, r25	; 0x01
    549c:	80 83       	st	Z, r24
    549e:	8a 81       	ldd	r24, Y+2	; 0x02
    54a0:	9b 81       	ldd	r25, Y+3	; 0x03
    54a2:	93 83       	std	Z+3, r25	; 0x03
    54a4:	82 83       	std	Z+2, r24	; 0x02
    54a6:	21 15       	cp	r18, r1
    54a8:	31 05       	cpc	r19, r1
    54aa:	29 f4       	brne	.+10     	; 0x54b6 <free+0x92>
    54ac:	f0 93 e9 04 	sts	0x04E9, r31	; 0x8004e9 <__flp+0x1>
    54b0:	e0 93 e8 04 	sts	0x04E8, r30	; 0x8004e8 <__flp>
    54b4:	3d c0       	rjmp	.+122    	; 0x5530 <free+0x10c>
    54b6:	e9 01       	movw	r28, r18
    54b8:	fb 83       	std	Y+3, r31	; 0x03
    54ba:	ea 83       	std	Y+2, r30	; 0x02
    54bc:	49 91       	ld	r20, Y+
    54be:	59 91       	ld	r21, Y+
    54c0:	c4 0f       	add	r28, r20
    54c2:	d5 1f       	adc	r29, r21
    54c4:	ec 17       	cp	r30, r28
    54c6:	fd 07       	cpc	r31, r29
    54c8:	61 f4       	brne	.+24     	; 0x54e2 <free+0xbe>
    54ca:	80 81       	ld	r24, Z
    54cc:	91 81       	ldd	r25, Z+1	; 0x01
    54ce:	84 0f       	add	r24, r20
    54d0:	95 1f       	adc	r25, r21
    54d2:	02 96       	adiw	r24, 0x02	; 2
    54d4:	e9 01       	movw	r28, r18
    54d6:	99 83       	std	Y+1, r25	; 0x01
    54d8:	88 83       	st	Y, r24
    54da:	82 81       	ldd	r24, Z+2	; 0x02
    54dc:	93 81       	ldd	r25, Z+3	; 0x03
    54de:	9b 83       	std	Y+3, r25	; 0x03
    54e0:	8a 83       	std	Y+2, r24	; 0x02
    54e2:	e0 e0       	ldi	r30, 0x00	; 0
    54e4:	f0 e0       	ldi	r31, 0x00	; 0
    54e6:	12 96       	adiw	r26, 0x02	; 2
    54e8:	8d 91       	ld	r24, X+
    54ea:	9c 91       	ld	r25, X
    54ec:	13 97       	sbiw	r26, 0x03	; 3
    54ee:	00 97       	sbiw	r24, 0x00	; 0
    54f0:	19 f0       	breq	.+6      	; 0x54f8 <free+0xd4>
    54f2:	fd 01       	movw	r30, r26
    54f4:	dc 01       	movw	r26, r24
    54f6:	f7 cf       	rjmp	.-18     	; 0x54e6 <free+0xc2>
    54f8:	8d 91       	ld	r24, X+
    54fa:	9c 91       	ld	r25, X
    54fc:	11 97       	sbiw	r26, 0x01	; 1
    54fe:	9d 01       	movw	r18, r26
    5500:	2e 5f       	subi	r18, 0xFE	; 254
    5502:	3f 4f       	sbci	r19, 0xFF	; 255
    5504:	82 0f       	add	r24, r18
    5506:	93 1f       	adc	r25, r19
    5508:	20 91 e6 04 	lds	r18, 0x04E6	; 0x8004e6 <__brkval>
    550c:	30 91 e7 04 	lds	r19, 0x04E7	; 0x8004e7 <__brkval+0x1>
    5510:	28 17       	cp	r18, r24
    5512:	39 07       	cpc	r19, r25
    5514:	69 f4       	brne	.+26     	; 0x5530 <free+0x10c>
    5516:	30 97       	sbiw	r30, 0x00	; 0
    5518:	29 f4       	brne	.+10     	; 0x5524 <free+0x100>
    551a:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <__flp+0x1>
    551e:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <__flp>
    5522:	02 c0       	rjmp	.+4      	; 0x5528 <free+0x104>
    5524:	13 82       	std	Z+3, r1	; 0x03
    5526:	12 82       	std	Z+2, r1	; 0x02
    5528:	b0 93 e7 04 	sts	0x04E7, r27	; 0x8004e7 <__brkval+0x1>
    552c:	a0 93 e6 04 	sts	0x04E6, r26	; 0x8004e6 <__brkval>
    5530:	df 91       	pop	r29
    5532:	cf 91       	pop	r28
    5534:	08 95       	ret

00005536 <realloc>:
    5536:	a0 e0       	ldi	r26, 0x00	; 0
    5538:	b0 e0       	ldi	r27, 0x00	; 0
    553a:	e1 ea       	ldi	r30, 0xA1	; 161
    553c:	fa e2       	ldi	r31, 0x2A	; 42
    553e:	0c 94 5a 30 	jmp	0x60b4	; 0x60b4 <__prologue_saves__+0x8>
    5542:	ec 01       	movw	r28, r24
    5544:	00 97       	sbiw	r24, 0x00	; 0
    5546:	21 f4       	brne	.+8      	; 0x5550 <realloc+0x1a>
    5548:	cb 01       	movw	r24, r22
    554a:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <malloc>
    554e:	b4 c0       	rjmp	.+360    	; 0x56b8 <realloc+0x182>
    5550:	fc 01       	movw	r30, r24
    5552:	e6 0f       	add	r30, r22
    5554:	f7 1f       	adc	r31, r23
    5556:	9c 01       	movw	r18, r24
    5558:	22 50       	subi	r18, 0x02	; 2
    555a:	31 09       	sbc	r19, r1
    555c:	e2 17       	cp	r30, r18
    555e:	f3 07       	cpc	r31, r19
    5560:	08 f4       	brcc	.+2      	; 0x5564 <realloc+0x2e>
    5562:	a8 c0       	rjmp	.+336    	; 0x56b4 <realloc+0x17e>
    5564:	d9 01       	movw	r26, r18
    5566:	0d 91       	ld	r16, X+
    5568:	1c 91       	ld	r17, X
    556a:	11 97       	sbiw	r26, 0x01	; 1
    556c:	06 17       	cp	r16, r22
    556e:	17 07       	cpc	r17, r23
    5570:	b0 f0       	brcs	.+44     	; 0x559e <realloc+0x68>
    5572:	05 30       	cpi	r16, 0x05	; 5
    5574:	11 05       	cpc	r17, r1
    5576:	08 f4       	brcc	.+2      	; 0x557a <realloc+0x44>
    5578:	9b c0       	rjmp	.+310    	; 0x56b0 <realloc+0x17a>
    557a:	c8 01       	movw	r24, r16
    557c:	04 97       	sbiw	r24, 0x04	; 4
    557e:	86 17       	cp	r24, r22
    5580:	97 07       	cpc	r25, r23
    5582:	08 f4       	brcc	.+2      	; 0x5586 <realloc+0x50>
    5584:	95 c0       	rjmp	.+298    	; 0x56b0 <realloc+0x17a>
    5586:	02 50       	subi	r16, 0x02	; 2
    5588:	11 09       	sbc	r17, r1
    558a:	06 1b       	sub	r16, r22
    558c:	17 0b       	sbc	r17, r23
    558e:	01 93       	st	Z+, r16
    5590:	11 93       	st	Z+, r17
    5592:	6d 93       	st	X+, r22
    5594:	7c 93       	st	X, r23
    5596:	cf 01       	movw	r24, r30
    5598:	0e 94 12 2a 	call	0x5424	; 0x5424 <free>
    559c:	89 c0       	rjmp	.+274    	; 0x56b0 <realloc+0x17a>
    559e:	5b 01       	movw	r10, r22
    55a0:	a0 1a       	sub	r10, r16
    55a2:	b1 0a       	sbc	r11, r17
    55a4:	4c 01       	movw	r8, r24
    55a6:	80 0e       	add	r8, r16
    55a8:	91 1e       	adc	r9, r17
    55aa:	a0 91 e8 04 	lds	r26, 0x04E8	; 0x8004e8 <__flp>
    55ae:	b0 91 e9 04 	lds	r27, 0x04E9	; 0x8004e9 <__flp+0x1>
    55b2:	61 2c       	mov	r6, r1
    55b4:	71 2c       	mov	r7, r1
    55b6:	e1 2c       	mov	r14, r1
    55b8:	f1 2c       	mov	r15, r1
    55ba:	10 97       	sbiw	r26, 0x00	; 0
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <realloc+0x8a>
    55be:	46 c0       	rjmp	.+140    	; 0x564c <realloc+0x116>
    55c0:	8d 91       	ld	r24, X+
    55c2:	9c 91       	ld	r25, X
    55c4:	11 97       	sbiw	r26, 0x01	; 1
    55c6:	a8 15       	cp	r26, r8
    55c8:	b9 05       	cpc	r27, r9
    55ca:	b1 f5       	brne	.+108    	; 0x5638 <realloc+0x102>
    55cc:	6c 01       	movw	r12, r24
    55ce:	42 e0       	ldi	r20, 0x02	; 2
    55d0:	c4 0e       	add	r12, r20
    55d2:	d1 1c       	adc	r13, r1
    55d4:	ca 14       	cp	r12, r10
    55d6:	db 04       	cpc	r13, r11
    55d8:	78 f1       	brcs	.+94     	; 0x5638 <realloc+0x102>
    55da:	4c 01       	movw	r8, r24
    55dc:	8a 18       	sub	r8, r10
    55de:	9b 08       	sbc	r9, r11
    55e0:	64 01       	movw	r12, r8
    55e2:	42 e0       	ldi	r20, 0x02	; 2
    55e4:	c4 0e       	add	r12, r20
    55e6:	d1 1c       	adc	r13, r1
    55e8:	12 96       	adiw	r26, 0x02	; 2
    55ea:	bc 90       	ld	r11, X
    55ec:	12 97       	sbiw	r26, 0x02	; 2
    55ee:	13 96       	adiw	r26, 0x03	; 3
    55f0:	ac 91       	ld	r26, X
    55f2:	b5 e0       	ldi	r27, 0x05	; 5
    55f4:	cb 16       	cp	r12, r27
    55f6:	d1 04       	cpc	r13, r1
    55f8:	40 f0       	brcs	.+16     	; 0x560a <realloc+0xd4>
    55fa:	b2 82       	std	Z+2, r11	; 0x02
    55fc:	a3 83       	std	Z+3, r26	; 0x03
    55fe:	91 82       	std	Z+1, r9	; 0x01
    5600:	80 82       	st	Z, r8
    5602:	d9 01       	movw	r26, r18
    5604:	6d 93       	st	X+, r22
    5606:	7c 93       	st	X, r23
    5608:	09 c0       	rjmp	.+18     	; 0x561c <realloc+0xe6>
    560a:	0e 5f       	subi	r16, 0xFE	; 254
    560c:	1f 4f       	sbci	r17, 0xFF	; 255
    560e:	80 0f       	add	r24, r16
    5610:	91 1f       	adc	r25, r17
    5612:	f9 01       	movw	r30, r18
    5614:	91 83       	std	Z+1, r25	; 0x01
    5616:	80 83       	st	Z, r24
    5618:	eb 2d       	mov	r30, r11
    561a:	fa 2f       	mov	r31, r26
    561c:	e1 14       	cp	r14, r1
    561e:	f1 04       	cpc	r15, r1
    5620:	31 f0       	breq	.+12     	; 0x562e <realloc+0xf8>
    5622:	d7 01       	movw	r26, r14
    5624:	13 96       	adiw	r26, 0x03	; 3
    5626:	fc 93       	st	X, r31
    5628:	ee 93       	st	-X, r30
    562a:	12 97       	sbiw	r26, 0x02	; 2
    562c:	41 c0       	rjmp	.+130    	; 0x56b0 <realloc+0x17a>
    562e:	f0 93 e9 04 	sts	0x04E9, r31	; 0x8004e9 <__flp+0x1>
    5632:	e0 93 e8 04 	sts	0x04E8, r30	; 0x8004e8 <__flp>
    5636:	3c c0       	rjmp	.+120    	; 0x56b0 <realloc+0x17a>
    5638:	68 16       	cp	r6, r24
    563a:	79 06       	cpc	r7, r25
    563c:	08 f4       	brcc	.+2      	; 0x5640 <realloc+0x10a>
    563e:	3c 01       	movw	r6, r24
    5640:	7d 01       	movw	r14, r26
    5642:	12 96       	adiw	r26, 0x02	; 2
    5644:	0d 90       	ld	r0, X+
    5646:	bc 91       	ld	r27, X
    5648:	a0 2d       	mov	r26, r0
    564a:	b7 cf       	rjmp	.-146    	; 0x55ba <realloc+0x84>
    564c:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <__brkval>
    5650:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <__brkval+0x1>
    5654:	88 16       	cp	r8, r24
    5656:	99 06       	cpc	r9, r25
    5658:	e1 f4       	brne	.+56     	; 0x5692 <realloc+0x15c>
    565a:	66 16       	cp	r6, r22
    565c:	77 06       	cpc	r7, r23
    565e:	c8 f4       	brcc	.+50     	; 0x5692 <realloc+0x15c>
    5660:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5664:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5668:	00 97       	sbiw	r24, 0x00	; 0
    566a:	41 f4       	brne	.+16     	; 0x567c <realloc+0x146>
    566c:	8d b7       	in	r24, 0x3d	; 61
    566e:	9e b7       	in	r25, 0x3e	; 62
    5670:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5674:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5678:	84 1b       	sub	r24, r20
    567a:	95 0b       	sbc	r25, r21
    567c:	e8 17       	cp	r30, r24
    567e:	f9 07       	cpc	r31, r25
    5680:	c8 f4       	brcc	.+50     	; 0x56b4 <realloc+0x17e>
    5682:	f0 93 e7 04 	sts	0x04E7, r31	; 0x8004e7 <__brkval+0x1>
    5686:	e0 93 e6 04 	sts	0x04E6, r30	; 0x8004e6 <__brkval>
    568a:	f9 01       	movw	r30, r18
    568c:	71 83       	std	Z+1, r23	; 0x01
    568e:	60 83       	st	Z, r22
    5690:	0f c0       	rjmp	.+30     	; 0x56b0 <realloc+0x17a>
    5692:	cb 01       	movw	r24, r22
    5694:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <malloc>
    5698:	7c 01       	movw	r14, r24
    569a:	00 97       	sbiw	r24, 0x00	; 0
    569c:	59 f0       	breq	.+22     	; 0x56b4 <realloc+0x17e>
    569e:	a8 01       	movw	r20, r16
    56a0:	be 01       	movw	r22, r28
    56a2:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <memcpy>
    56a6:	ce 01       	movw	r24, r28
    56a8:	0e 94 12 2a 	call	0x5424	; 0x5424 <free>
    56ac:	c7 01       	movw	r24, r14
    56ae:	04 c0       	rjmp	.+8      	; 0x56b8 <realloc+0x182>
    56b0:	ce 01       	movw	r24, r28
    56b2:	02 c0       	rjmp	.+4      	; 0x56b8 <realloc+0x182>
    56b4:	80 e0       	ldi	r24, 0x00	; 0
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	cd b7       	in	r28, 0x3d	; 61
    56ba:	de b7       	in	r29, 0x3e	; 62
    56bc:	ee e0       	ldi	r30, 0x0E	; 14
    56be:	0c 94 76 30 	jmp	0x60ec	; 0x60ec <__epilogue_restores__+0x8>

000056c2 <memcpy>:
    56c2:	fb 01       	movw	r30, r22
    56c4:	dc 01       	movw	r26, r24
    56c6:	02 c0       	rjmp	.+4      	; 0x56cc <memcpy+0xa>
    56c8:	01 90       	ld	r0, Z+
    56ca:	0d 92       	st	X+, r0
    56cc:	41 50       	subi	r20, 0x01	; 1
    56ce:	50 40       	sbci	r21, 0x00	; 0
    56d0:	d8 f7       	brcc	.-10     	; 0x56c8 <memcpy+0x6>
    56d2:	08 95       	ret

000056d4 <strcpy>:
    56d4:	fb 01       	movw	r30, r22
    56d6:	dc 01       	movw	r26, r24
    56d8:	01 90       	ld	r0, Z+
    56da:	0d 92       	st	X+, r0
    56dc:	00 20       	and	r0, r0
    56de:	e1 f7       	brne	.-8      	; 0x56d8 <strcpy+0x4>
    56e0:	08 95       	ret

000056e2 <sprintf>:
    56e2:	ae e0       	ldi	r26, 0x0E	; 14
    56e4:	b0 e0       	ldi	r27, 0x00	; 0
    56e6:	e7 e7       	ldi	r30, 0x77	; 119
    56e8:	fb e2       	ldi	r31, 0x2B	; 43
    56ea:	0c 94 64 30 	jmp	0x60c8	; 0x60c8 <__prologue_saves__+0x1c>
    56ee:	0d 89       	ldd	r16, Y+21	; 0x15
    56f0:	1e 89       	ldd	r17, Y+22	; 0x16
    56f2:	86 e0       	ldi	r24, 0x06	; 6
    56f4:	8c 83       	std	Y+4, r24	; 0x04
    56f6:	1a 83       	std	Y+2, r17	; 0x02
    56f8:	09 83       	std	Y+1, r16	; 0x01
    56fa:	8f ef       	ldi	r24, 0xFF	; 255
    56fc:	9f e7       	ldi	r25, 0x7F	; 127
    56fe:	9e 83       	std	Y+6, r25	; 0x06
    5700:	8d 83       	std	Y+5, r24	; 0x05
    5702:	ae 01       	movw	r20, r28
    5704:	47 5e       	subi	r20, 0xE7	; 231
    5706:	5f 4f       	sbci	r21, 0xFF	; 255
    5708:	6f 89       	ldd	r22, Y+23	; 0x17
    570a:	78 8d       	ldd	r23, Y+24	; 0x18
    570c:	ce 01       	movw	r24, r28
    570e:	01 96       	adiw	r24, 0x01	; 1
    5710:	0e 94 93 2b 	call	0x5726	; 0x5726 <vfprintf>
    5714:	ef 81       	ldd	r30, Y+7	; 0x07
    5716:	f8 85       	ldd	r31, Y+8	; 0x08
    5718:	e0 0f       	add	r30, r16
    571a:	f1 1f       	adc	r31, r17
    571c:	10 82       	st	Z, r1
    571e:	2e 96       	adiw	r28, 0x0e	; 14
    5720:	e4 e0       	ldi	r30, 0x04	; 4
    5722:	0c 94 80 30 	jmp	0x6100	; 0x6100 <__epilogue_restores__+0x1c>

00005726 <vfprintf>:
    5726:	ab e0       	ldi	r26, 0x0B	; 11
    5728:	b0 e0       	ldi	r27, 0x00	; 0
    572a:	e9 e9       	ldi	r30, 0x99	; 153
    572c:	fb e2       	ldi	r31, 0x2B	; 43
    572e:	0c 94 56 30 	jmp	0x60ac	; 0x60ac <__prologue_saves__>
    5732:	6c 01       	movw	r12, r24
    5734:	7b 01       	movw	r14, r22
    5736:	8a 01       	movw	r16, r20
    5738:	fc 01       	movw	r30, r24
    573a:	17 82       	std	Z+7, r1	; 0x07
    573c:	16 82       	std	Z+6, r1	; 0x06
    573e:	83 81       	ldd	r24, Z+3	; 0x03
    5740:	81 ff       	sbrs	r24, 1
    5742:	cc c1       	rjmp	.+920    	; 0x5adc <vfprintf+0x3b6>
    5744:	ce 01       	movw	r24, r28
    5746:	01 96       	adiw	r24, 0x01	; 1
    5748:	3c 01       	movw	r6, r24
    574a:	f6 01       	movw	r30, r12
    574c:	93 81       	ldd	r25, Z+3	; 0x03
    574e:	f7 01       	movw	r30, r14
    5750:	93 fd       	sbrc	r25, 3
    5752:	85 91       	lpm	r24, Z+
    5754:	93 ff       	sbrs	r25, 3
    5756:	81 91       	ld	r24, Z+
    5758:	7f 01       	movw	r14, r30
    575a:	88 23       	and	r24, r24
    575c:	09 f4       	brne	.+2      	; 0x5760 <vfprintf+0x3a>
    575e:	ba c1       	rjmp	.+884    	; 0x5ad4 <vfprintf+0x3ae>
    5760:	85 32       	cpi	r24, 0x25	; 37
    5762:	39 f4       	brne	.+14     	; 0x5772 <vfprintf+0x4c>
    5764:	93 fd       	sbrc	r25, 3
    5766:	85 91       	lpm	r24, Z+
    5768:	93 ff       	sbrs	r25, 3
    576a:	81 91       	ld	r24, Z+
    576c:	7f 01       	movw	r14, r30
    576e:	85 32       	cpi	r24, 0x25	; 37
    5770:	29 f4       	brne	.+10     	; 0x577c <vfprintf+0x56>
    5772:	b6 01       	movw	r22, r12
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    577a:	e7 cf       	rjmp	.-50     	; 0x574a <vfprintf+0x24>
    577c:	91 2c       	mov	r9, r1
    577e:	21 2c       	mov	r2, r1
    5780:	31 2c       	mov	r3, r1
    5782:	ff e1       	ldi	r31, 0x1F	; 31
    5784:	f3 15       	cp	r31, r3
    5786:	d8 f0       	brcs	.+54     	; 0x57be <vfprintf+0x98>
    5788:	8b 32       	cpi	r24, 0x2B	; 43
    578a:	79 f0       	breq	.+30     	; 0x57aa <vfprintf+0x84>
    578c:	38 f4       	brcc	.+14     	; 0x579c <vfprintf+0x76>
    578e:	80 32       	cpi	r24, 0x20	; 32
    5790:	79 f0       	breq	.+30     	; 0x57b0 <vfprintf+0x8a>
    5792:	83 32       	cpi	r24, 0x23	; 35
    5794:	a1 f4       	brne	.+40     	; 0x57be <vfprintf+0x98>
    5796:	23 2d       	mov	r18, r3
    5798:	20 61       	ori	r18, 0x10	; 16
    579a:	1d c0       	rjmp	.+58     	; 0x57d6 <vfprintf+0xb0>
    579c:	8d 32       	cpi	r24, 0x2D	; 45
    579e:	61 f0       	breq	.+24     	; 0x57b8 <vfprintf+0x92>
    57a0:	80 33       	cpi	r24, 0x30	; 48
    57a2:	69 f4       	brne	.+26     	; 0x57be <vfprintf+0x98>
    57a4:	23 2d       	mov	r18, r3
    57a6:	21 60       	ori	r18, 0x01	; 1
    57a8:	16 c0       	rjmp	.+44     	; 0x57d6 <vfprintf+0xb0>
    57aa:	83 2d       	mov	r24, r3
    57ac:	82 60       	ori	r24, 0x02	; 2
    57ae:	38 2e       	mov	r3, r24
    57b0:	e3 2d       	mov	r30, r3
    57b2:	e4 60       	ori	r30, 0x04	; 4
    57b4:	3e 2e       	mov	r3, r30
    57b6:	2a c0       	rjmp	.+84     	; 0x580c <vfprintf+0xe6>
    57b8:	f3 2d       	mov	r31, r3
    57ba:	f8 60       	ori	r31, 0x08	; 8
    57bc:	1d c0       	rjmp	.+58     	; 0x57f8 <vfprintf+0xd2>
    57be:	37 fc       	sbrc	r3, 7
    57c0:	2d c0       	rjmp	.+90     	; 0x581c <vfprintf+0xf6>
    57c2:	20 ed       	ldi	r18, 0xD0	; 208
    57c4:	28 0f       	add	r18, r24
    57c6:	2a 30       	cpi	r18, 0x0A	; 10
    57c8:	40 f0       	brcs	.+16     	; 0x57da <vfprintf+0xb4>
    57ca:	8e 32       	cpi	r24, 0x2E	; 46
    57cc:	b9 f4       	brne	.+46     	; 0x57fc <vfprintf+0xd6>
    57ce:	36 fc       	sbrc	r3, 6
    57d0:	81 c1       	rjmp	.+770    	; 0x5ad4 <vfprintf+0x3ae>
    57d2:	23 2d       	mov	r18, r3
    57d4:	20 64       	ori	r18, 0x40	; 64
    57d6:	32 2e       	mov	r3, r18
    57d8:	19 c0       	rjmp	.+50     	; 0x580c <vfprintf+0xe6>
    57da:	36 fe       	sbrs	r3, 6
    57dc:	06 c0       	rjmp	.+12     	; 0x57ea <vfprintf+0xc4>
    57de:	8a e0       	ldi	r24, 0x0A	; 10
    57e0:	98 9e       	mul	r9, r24
    57e2:	20 0d       	add	r18, r0
    57e4:	11 24       	eor	r1, r1
    57e6:	92 2e       	mov	r9, r18
    57e8:	11 c0       	rjmp	.+34     	; 0x580c <vfprintf+0xe6>
    57ea:	ea e0       	ldi	r30, 0x0A	; 10
    57ec:	2e 9e       	mul	r2, r30
    57ee:	20 0d       	add	r18, r0
    57f0:	11 24       	eor	r1, r1
    57f2:	22 2e       	mov	r2, r18
    57f4:	f3 2d       	mov	r31, r3
    57f6:	f0 62       	ori	r31, 0x20	; 32
    57f8:	3f 2e       	mov	r3, r31
    57fa:	08 c0       	rjmp	.+16     	; 0x580c <vfprintf+0xe6>
    57fc:	8c 36       	cpi	r24, 0x6C	; 108
    57fe:	21 f4       	brne	.+8      	; 0x5808 <vfprintf+0xe2>
    5800:	83 2d       	mov	r24, r3
    5802:	80 68       	ori	r24, 0x80	; 128
    5804:	38 2e       	mov	r3, r24
    5806:	02 c0       	rjmp	.+4      	; 0x580c <vfprintf+0xe6>
    5808:	88 36       	cpi	r24, 0x68	; 104
    580a:	41 f4       	brne	.+16     	; 0x581c <vfprintf+0xf6>
    580c:	f7 01       	movw	r30, r14
    580e:	93 fd       	sbrc	r25, 3
    5810:	85 91       	lpm	r24, Z+
    5812:	93 ff       	sbrs	r25, 3
    5814:	81 91       	ld	r24, Z+
    5816:	7f 01       	movw	r14, r30
    5818:	81 11       	cpse	r24, r1
    581a:	b3 cf       	rjmp	.-154    	; 0x5782 <vfprintf+0x5c>
    581c:	98 2f       	mov	r25, r24
    581e:	9f 7d       	andi	r25, 0xDF	; 223
    5820:	95 54       	subi	r25, 0x45	; 69
    5822:	93 30       	cpi	r25, 0x03	; 3
    5824:	28 f4       	brcc	.+10     	; 0x5830 <vfprintf+0x10a>
    5826:	0c 5f       	subi	r16, 0xFC	; 252
    5828:	1f 4f       	sbci	r17, 0xFF	; 255
    582a:	9f e3       	ldi	r25, 0x3F	; 63
    582c:	99 83       	std	Y+1, r25	; 0x01
    582e:	0d c0       	rjmp	.+26     	; 0x584a <vfprintf+0x124>
    5830:	83 36       	cpi	r24, 0x63	; 99
    5832:	31 f0       	breq	.+12     	; 0x5840 <vfprintf+0x11a>
    5834:	83 37       	cpi	r24, 0x73	; 115
    5836:	71 f0       	breq	.+28     	; 0x5854 <vfprintf+0x12e>
    5838:	83 35       	cpi	r24, 0x53	; 83
    583a:	09 f0       	breq	.+2      	; 0x583e <vfprintf+0x118>
    583c:	59 c0       	rjmp	.+178    	; 0x58f0 <vfprintf+0x1ca>
    583e:	21 c0       	rjmp	.+66     	; 0x5882 <vfprintf+0x15c>
    5840:	f8 01       	movw	r30, r16
    5842:	80 81       	ld	r24, Z
    5844:	89 83       	std	Y+1, r24	; 0x01
    5846:	0e 5f       	subi	r16, 0xFE	; 254
    5848:	1f 4f       	sbci	r17, 0xFF	; 255
    584a:	88 24       	eor	r8, r8
    584c:	83 94       	inc	r8
    584e:	91 2c       	mov	r9, r1
    5850:	53 01       	movw	r10, r6
    5852:	13 c0       	rjmp	.+38     	; 0x587a <vfprintf+0x154>
    5854:	28 01       	movw	r4, r16
    5856:	f2 e0       	ldi	r31, 0x02	; 2
    5858:	4f 0e       	add	r4, r31
    585a:	51 1c       	adc	r5, r1
    585c:	f8 01       	movw	r30, r16
    585e:	a0 80       	ld	r10, Z
    5860:	b1 80       	ldd	r11, Z+1	; 0x01
    5862:	36 fe       	sbrs	r3, 6
    5864:	03 c0       	rjmp	.+6      	; 0x586c <vfprintf+0x146>
    5866:	69 2d       	mov	r22, r9
    5868:	70 e0       	ldi	r23, 0x00	; 0
    586a:	02 c0       	rjmp	.+4      	; 0x5870 <vfprintf+0x14a>
    586c:	6f ef       	ldi	r22, 0xFF	; 255
    586e:	7f ef       	ldi	r23, 0xFF	; 255
    5870:	c5 01       	movw	r24, r10
    5872:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <strnlen>
    5876:	4c 01       	movw	r8, r24
    5878:	82 01       	movw	r16, r4
    587a:	f3 2d       	mov	r31, r3
    587c:	ff 77       	andi	r31, 0x7F	; 127
    587e:	3f 2e       	mov	r3, r31
    5880:	16 c0       	rjmp	.+44     	; 0x58ae <vfprintf+0x188>
    5882:	28 01       	movw	r4, r16
    5884:	22 e0       	ldi	r18, 0x02	; 2
    5886:	42 0e       	add	r4, r18
    5888:	51 1c       	adc	r5, r1
    588a:	f8 01       	movw	r30, r16
    588c:	a0 80       	ld	r10, Z
    588e:	b1 80       	ldd	r11, Z+1	; 0x01
    5890:	36 fe       	sbrs	r3, 6
    5892:	03 c0       	rjmp	.+6      	; 0x589a <vfprintf+0x174>
    5894:	69 2d       	mov	r22, r9
    5896:	70 e0       	ldi	r23, 0x00	; 0
    5898:	02 c0       	rjmp	.+4      	; 0x589e <vfprintf+0x178>
    589a:	6f ef       	ldi	r22, 0xFF	; 255
    589c:	7f ef       	ldi	r23, 0xFF	; 255
    589e:	c5 01       	movw	r24, r10
    58a0:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <strnlen_P>
    58a4:	4c 01       	movw	r8, r24
    58a6:	f3 2d       	mov	r31, r3
    58a8:	f0 68       	ori	r31, 0x80	; 128
    58aa:	3f 2e       	mov	r3, r31
    58ac:	82 01       	movw	r16, r4
    58ae:	33 fc       	sbrc	r3, 3
    58b0:	1b c0       	rjmp	.+54     	; 0x58e8 <vfprintf+0x1c2>
    58b2:	82 2d       	mov	r24, r2
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	88 16       	cp	r8, r24
    58b8:	99 06       	cpc	r9, r25
    58ba:	b0 f4       	brcc	.+44     	; 0x58e8 <vfprintf+0x1c2>
    58bc:	b6 01       	movw	r22, r12
    58be:	80 e2       	ldi	r24, 0x20	; 32
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    58c6:	2a 94       	dec	r2
    58c8:	f4 cf       	rjmp	.-24     	; 0x58b2 <vfprintf+0x18c>
    58ca:	f5 01       	movw	r30, r10
    58cc:	37 fc       	sbrc	r3, 7
    58ce:	85 91       	lpm	r24, Z+
    58d0:	37 fe       	sbrs	r3, 7
    58d2:	81 91       	ld	r24, Z+
    58d4:	5f 01       	movw	r10, r30
    58d6:	b6 01       	movw	r22, r12
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    58de:	21 10       	cpse	r2, r1
    58e0:	2a 94       	dec	r2
    58e2:	21 e0       	ldi	r18, 0x01	; 1
    58e4:	82 1a       	sub	r8, r18
    58e6:	91 08       	sbc	r9, r1
    58e8:	81 14       	cp	r8, r1
    58ea:	91 04       	cpc	r9, r1
    58ec:	71 f7       	brne	.-36     	; 0x58ca <vfprintf+0x1a4>
    58ee:	e8 c0       	rjmp	.+464    	; 0x5ac0 <vfprintf+0x39a>
    58f0:	84 36       	cpi	r24, 0x64	; 100
    58f2:	11 f0       	breq	.+4      	; 0x58f8 <vfprintf+0x1d2>
    58f4:	89 36       	cpi	r24, 0x69	; 105
    58f6:	41 f5       	brne	.+80     	; 0x5948 <vfprintf+0x222>
    58f8:	f8 01       	movw	r30, r16
    58fa:	37 fe       	sbrs	r3, 7
    58fc:	07 c0       	rjmp	.+14     	; 0x590c <vfprintf+0x1e6>
    58fe:	60 81       	ld	r22, Z
    5900:	71 81       	ldd	r23, Z+1	; 0x01
    5902:	82 81       	ldd	r24, Z+2	; 0x02
    5904:	93 81       	ldd	r25, Z+3	; 0x03
    5906:	0c 5f       	subi	r16, 0xFC	; 252
    5908:	1f 4f       	sbci	r17, 0xFF	; 255
    590a:	08 c0       	rjmp	.+16     	; 0x591c <vfprintf+0x1f6>
    590c:	60 81       	ld	r22, Z
    590e:	71 81       	ldd	r23, Z+1	; 0x01
    5910:	07 2e       	mov	r0, r23
    5912:	00 0c       	add	r0, r0
    5914:	88 0b       	sbc	r24, r24
    5916:	99 0b       	sbc	r25, r25
    5918:	0e 5f       	subi	r16, 0xFE	; 254
    591a:	1f 4f       	sbci	r17, 0xFF	; 255
    591c:	f3 2d       	mov	r31, r3
    591e:	ff 76       	andi	r31, 0x6F	; 111
    5920:	3f 2e       	mov	r3, r31
    5922:	97 ff       	sbrs	r25, 7
    5924:	09 c0       	rjmp	.+18     	; 0x5938 <vfprintf+0x212>
    5926:	90 95       	com	r25
    5928:	80 95       	com	r24
    592a:	70 95       	com	r23
    592c:	61 95       	neg	r22
    592e:	7f 4f       	sbci	r23, 0xFF	; 255
    5930:	8f 4f       	sbci	r24, 0xFF	; 255
    5932:	9f 4f       	sbci	r25, 0xFF	; 255
    5934:	f0 68       	ori	r31, 0x80	; 128
    5936:	3f 2e       	mov	r3, r31
    5938:	2a e0       	ldi	r18, 0x0A	; 10
    593a:	30 e0       	ldi	r19, 0x00	; 0
    593c:	a3 01       	movw	r20, r6
    593e:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <__ultoa_invert>
    5942:	88 2e       	mov	r8, r24
    5944:	86 18       	sub	r8, r6
    5946:	45 c0       	rjmp	.+138    	; 0x59d2 <vfprintf+0x2ac>
    5948:	85 37       	cpi	r24, 0x75	; 117
    594a:	31 f4       	brne	.+12     	; 0x5958 <vfprintf+0x232>
    594c:	23 2d       	mov	r18, r3
    594e:	2f 7e       	andi	r18, 0xEF	; 239
    5950:	b2 2e       	mov	r11, r18
    5952:	2a e0       	ldi	r18, 0x0A	; 10
    5954:	30 e0       	ldi	r19, 0x00	; 0
    5956:	25 c0       	rjmp	.+74     	; 0x59a2 <vfprintf+0x27c>
    5958:	93 2d       	mov	r25, r3
    595a:	99 7f       	andi	r25, 0xF9	; 249
    595c:	b9 2e       	mov	r11, r25
    595e:	8f 36       	cpi	r24, 0x6F	; 111
    5960:	c1 f0       	breq	.+48     	; 0x5992 <vfprintf+0x26c>
    5962:	18 f4       	brcc	.+6      	; 0x596a <vfprintf+0x244>
    5964:	88 35       	cpi	r24, 0x58	; 88
    5966:	79 f0       	breq	.+30     	; 0x5986 <vfprintf+0x260>
    5968:	b5 c0       	rjmp	.+362    	; 0x5ad4 <vfprintf+0x3ae>
    596a:	80 37       	cpi	r24, 0x70	; 112
    596c:	19 f0       	breq	.+6      	; 0x5974 <vfprintf+0x24e>
    596e:	88 37       	cpi	r24, 0x78	; 120
    5970:	21 f0       	breq	.+8      	; 0x597a <vfprintf+0x254>
    5972:	b0 c0       	rjmp	.+352    	; 0x5ad4 <vfprintf+0x3ae>
    5974:	e9 2f       	mov	r30, r25
    5976:	e0 61       	ori	r30, 0x10	; 16
    5978:	be 2e       	mov	r11, r30
    597a:	b4 fe       	sbrs	r11, 4
    597c:	0d c0       	rjmp	.+26     	; 0x5998 <vfprintf+0x272>
    597e:	fb 2d       	mov	r31, r11
    5980:	f4 60       	ori	r31, 0x04	; 4
    5982:	bf 2e       	mov	r11, r31
    5984:	09 c0       	rjmp	.+18     	; 0x5998 <vfprintf+0x272>
    5986:	34 fe       	sbrs	r3, 4
    5988:	0a c0       	rjmp	.+20     	; 0x599e <vfprintf+0x278>
    598a:	29 2f       	mov	r18, r25
    598c:	26 60       	ori	r18, 0x06	; 6
    598e:	b2 2e       	mov	r11, r18
    5990:	06 c0       	rjmp	.+12     	; 0x599e <vfprintf+0x278>
    5992:	28 e0       	ldi	r18, 0x08	; 8
    5994:	30 e0       	ldi	r19, 0x00	; 0
    5996:	05 c0       	rjmp	.+10     	; 0x59a2 <vfprintf+0x27c>
    5998:	20 e1       	ldi	r18, 0x10	; 16
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	02 c0       	rjmp	.+4      	; 0x59a2 <vfprintf+0x27c>
    599e:	20 e1       	ldi	r18, 0x10	; 16
    59a0:	32 e0       	ldi	r19, 0x02	; 2
    59a2:	f8 01       	movw	r30, r16
    59a4:	b7 fe       	sbrs	r11, 7
    59a6:	07 c0       	rjmp	.+14     	; 0x59b6 <vfprintf+0x290>
    59a8:	60 81       	ld	r22, Z
    59aa:	71 81       	ldd	r23, Z+1	; 0x01
    59ac:	82 81       	ldd	r24, Z+2	; 0x02
    59ae:	93 81       	ldd	r25, Z+3	; 0x03
    59b0:	0c 5f       	subi	r16, 0xFC	; 252
    59b2:	1f 4f       	sbci	r17, 0xFF	; 255
    59b4:	06 c0       	rjmp	.+12     	; 0x59c2 <vfprintf+0x29c>
    59b6:	60 81       	ld	r22, Z
    59b8:	71 81       	ldd	r23, Z+1	; 0x01
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	0e 5f       	subi	r16, 0xFE	; 254
    59c0:	1f 4f       	sbci	r17, 0xFF	; 255
    59c2:	a3 01       	movw	r20, r6
    59c4:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <__ultoa_invert>
    59c8:	88 2e       	mov	r8, r24
    59ca:	86 18       	sub	r8, r6
    59cc:	fb 2d       	mov	r31, r11
    59ce:	ff 77       	andi	r31, 0x7F	; 127
    59d0:	3f 2e       	mov	r3, r31
    59d2:	36 fe       	sbrs	r3, 6
    59d4:	0d c0       	rjmp	.+26     	; 0x59f0 <vfprintf+0x2ca>
    59d6:	23 2d       	mov	r18, r3
    59d8:	2e 7f       	andi	r18, 0xFE	; 254
    59da:	a2 2e       	mov	r10, r18
    59dc:	89 14       	cp	r8, r9
    59de:	58 f4       	brcc	.+22     	; 0x59f6 <vfprintf+0x2d0>
    59e0:	34 fe       	sbrs	r3, 4
    59e2:	0b c0       	rjmp	.+22     	; 0x59fa <vfprintf+0x2d4>
    59e4:	32 fc       	sbrc	r3, 2
    59e6:	09 c0       	rjmp	.+18     	; 0x59fa <vfprintf+0x2d4>
    59e8:	83 2d       	mov	r24, r3
    59ea:	8e 7e       	andi	r24, 0xEE	; 238
    59ec:	a8 2e       	mov	r10, r24
    59ee:	05 c0       	rjmp	.+10     	; 0x59fa <vfprintf+0x2d4>
    59f0:	b8 2c       	mov	r11, r8
    59f2:	a3 2c       	mov	r10, r3
    59f4:	03 c0       	rjmp	.+6      	; 0x59fc <vfprintf+0x2d6>
    59f6:	b8 2c       	mov	r11, r8
    59f8:	01 c0       	rjmp	.+2      	; 0x59fc <vfprintf+0x2d6>
    59fa:	b9 2c       	mov	r11, r9
    59fc:	a4 fe       	sbrs	r10, 4
    59fe:	0f c0       	rjmp	.+30     	; 0x5a1e <vfprintf+0x2f8>
    5a00:	fe 01       	movw	r30, r28
    5a02:	e8 0d       	add	r30, r8
    5a04:	f1 1d       	adc	r31, r1
    5a06:	80 81       	ld	r24, Z
    5a08:	80 33       	cpi	r24, 0x30	; 48
    5a0a:	21 f4       	brne	.+8      	; 0x5a14 <vfprintf+0x2ee>
    5a0c:	9a 2d       	mov	r25, r10
    5a0e:	99 7e       	andi	r25, 0xE9	; 233
    5a10:	a9 2e       	mov	r10, r25
    5a12:	09 c0       	rjmp	.+18     	; 0x5a26 <vfprintf+0x300>
    5a14:	a2 fe       	sbrs	r10, 2
    5a16:	06 c0       	rjmp	.+12     	; 0x5a24 <vfprintf+0x2fe>
    5a18:	b3 94       	inc	r11
    5a1a:	b3 94       	inc	r11
    5a1c:	04 c0       	rjmp	.+8      	; 0x5a26 <vfprintf+0x300>
    5a1e:	8a 2d       	mov	r24, r10
    5a20:	86 78       	andi	r24, 0x86	; 134
    5a22:	09 f0       	breq	.+2      	; 0x5a26 <vfprintf+0x300>
    5a24:	b3 94       	inc	r11
    5a26:	a3 fc       	sbrc	r10, 3
    5a28:	11 c0       	rjmp	.+34     	; 0x5a4c <vfprintf+0x326>
    5a2a:	a0 fe       	sbrs	r10, 0
    5a2c:	06 c0       	rjmp	.+12     	; 0x5a3a <vfprintf+0x314>
    5a2e:	b2 14       	cp	r11, r2
    5a30:	88 f4       	brcc	.+34     	; 0x5a54 <vfprintf+0x32e>
    5a32:	28 0c       	add	r2, r8
    5a34:	92 2c       	mov	r9, r2
    5a36:	9b 18       	sub	r9, r11
    5a38:	0e c0       	rjmp	.+28     	; 0x5a56 <vfprintf+0x330>
    5a3a:	b2 14       	cp	r11, r2
    5a3c:	60 f4       	brcc	.+24     	; 0x5a56 <vfprintf+0x330>
    5a3e:	b6 01       	movw	r22, r12
    5a40:	80 e2       	ldi	r24, 0x20	; 32
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    5a48:	b3 94       	inc	r11
    5a4a:	f7 cf       	rjmp	.-18     	; 0x5a3a <vfprintf+0x314>
    5a4c:	b2 14       	cp	r11, r2
    5a4e:	18 f4       	brcc	.+6      	; 0x5a56 <vfprintf+0x330>
    5a50:	2b 18       	sub	r2, r11
    5a52:	02 c0       	rjmp	.+4      	; 0x5a58 <vfprintf+0x332>
    5a54:	98 2c       	mov	r9, r8
    5a56:	21 2c       	mov	r2, r1
    5a58:	a4 fe       	sbrs	r10, 4
    5a5a:	10 c0       	rjmp	.+32     	; 0x5a7c <vfprintf+0x356>
    5a5c:	b6 01       	movw	r22, r12
    5a5e:	80 e3       	ldi	r24, 0x30	; 48
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    5a66:	a2 fe       	sbrs	r10, 2
    5a68:	17 c0       	rjmp	.+46     	; 0x5a98 <vfprintf+0x372>
    5a6a:	a1 fc       	sbrc	r10, 1
    5a6c:	03 c0       	rjmp	.+6      	; 0x5a74 <vfprintf+0x34e>
    5a6e:	88 e7       	ldi	r24, 0x78	; 120
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	02 c0       	rjmp	.+4      	; 0x5a78 <vfprintf+0x352>
    5a74:	88 e5       	ldi	r24, 0x58	; 88
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	b6 01       	movw	r22, r12
    5a7a:	0c c0       	rjmp	.+24     	; 0x5a94 <vfprintf+0x36e>
    5a7c:	8a 2d       	mov	r24, r10
    5a7e:	86 78       	andi	r24, 0x86	; 134
    5a80:	59 f0       	breq	.+22     	; 0x5a98 <vfprintf+0x372>
    5a82:	a1 fe       	sbrs	r10, 1
    5a84:	02 c0       	rjmp	.+4      	; 0x5a8a <vfprintf+0x364>
    5a86:	8b e2       	ldi	r24, 0x2B	; 43
    5a88:	01 c0       	rjmp	.+2      	; 0x5a8c <vfprintf+0x366>
    5a8a:	80 e2       	ldi	r24, 0x20	; 32
    5a8c:	a7 fc       	sbrc	r10, 7
    5a8e:	8d e2       	ldi	r24, 0x2D	; 45
    5a90:	b6 01       	movw	r22, r12
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    5a98:	89 14       	cp	r8, r9
    5a9a:	38 f4       	brcc	.+14     	; 0x5aaa <vfprintf+0x384>
    5a9c:	b6 01       	movw	r22, r12
    5a9e:	80 e3       	ldi	r24, 0x30	; 48
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    5aa6:	9a 94       	dec	r9
    5aa8:	f7 cf       	rjmp	.-18     	; 0x5a98 <vfprintf+0x372>
    5aaa:	8a 94       	dec	r8
    5aac:	f3 01       	movw	r30, r6
    5aae:	e8 0d       	add	r30, r8
    5ab0:	f1 1d       	adc	r31, r1
    5ab2:	80 81       	ld	r24, Z
    5ab4:	b6 01       	movw	r22, r12
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    5abc:	81 10       	cpse	r8, r1
    5abe:	f5 cf       	rjmp	.-22     	; 0x5aaa <vfprintf+0x384>
    5ac0:	22 20       	and	r2, r2
    5ac2:	09 f4       	brne	.+2      	; 0x5ac6 <vfprintf+0x3a0>
    5ac4:	42 ce       	rjmp	.-892    	; 0x574a <vfprintf+0x24>
    5ac6:	b6 01       	movw	r22, r12
    5ac8:	80 e2       	ldi	r24, 0x20	; 32
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <fputc>
    5ad0:	2a 94       	dec	r2
    5ad2:	f6 cf       	rjmp	.-20     	; 0x5ac0 <vfprintf+0x39a>
    5ad4:	f6 01       	movw	r30, r12
    5ad6:	86 81       	ldd	r24, Z+6	; 0x06
    5ad8:	97 81       	ldd	r25, Z+7	; 0x07
    5ada:	02 c0       	rjmp	.+4      	; 0x5ae0 <vfprintf+0x3ba>
    5adc:	8f ef       	ldi	r24, 0xFF	; 255
    5ade:	9f ef       	ldi	r25, 0xFF	; 255
    5ae0:	2b 96       	adiw	r28, 0x0b	; 11
    5ae2:	e2 e1       	ldi	r30, 0x12	; 18
    5ae4:	0c 94 72 30 	jmp	0x60e4	; 0x60e4 <__epilogue_restores__>

00005ae8 <dtoa_prf>:
    5ae8:	a9 e0       	ldi	r26, 0x09	; 9
    5aea:	b0 e0       	ldi	r27, 0x00	; 0
    5aec:	ea e7       	ldi	r30, 0x7A	; 122
    5aee:	fd e2       	ldi	r31, 0x2D	; 45
    5af0:	0c 94 5c 30 	jmp	0x60b8	; 0x60b8 <__prologue_saves__+0xc>
    5af4:	6a 01       	movw	r12, r20
    5af6:	12 2f       	mov	r17, r18
    5af8:	b0 2e       	mov	r11, r16
    5afa:	2b e3       	ldi	r18, 0x3B	; 59
    5afc:	20 17       	cp	r18, r16
    5afe:	20 f0       	brcs	.+8      	; 0x5b08 <dtoa_prf+0x20>
    5b00:	ff 24       	eor	r15, r15
    5b02:	f3 94       	inc	r15
    5b04:	f0 0e       	add	r15, r16
    5b06:	02 c0       	rjmp	.+4      	; 0x5b0c <dtoa_prf+0x24>
    5b08:	2c e3       	ldi	r18, 0x3C	; 60
    5b0a:	f2 2e       	mov	r15, r18
    5b0c:	0f 2d       	mov	r16, r15
    5b0e:	27 e0       	ldi	r18, 0x07	; 7
    5b10:	ae 01       	movw	r20, r28
    5b12:	4f 5f       	subi	r20, 0xFF	; 255
    5b14:	5f 4f       	sbci	r21, 0xFF	; 255
    5b16:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__ftoa_engine>
    5b1a:	bc 01       	movw	r22, r24
    5b1c:	49 81       	ldd	r20, Y+1	; 0x01
    5b1e:	84 2f       	mov	r24, r20
    5b20:	89 70       	andi	r24, 0x09	; 9
    5b22:	81 30       	cpi	r24, 0x01	; 1
    5b24:	31 f0       	breq	.+12     	; 0x5b32 <dtoa_prf+0x4a>
    5b26:	e1 fc       	sbrc	r14, 1
    5b28:	06 c0       	rjmp	.+12     	; 0x5b36 <dtoa_prf+0x4e>
    5b2a:	e0 fe       	sbrs	r14, 0
    5b2c:	06 c0       	rjmp	.+12     	; 0x5b3a <dtoa_prf+0x52>
    5b2e:	90 e2       	ldi	r25, 0x20	; 32
    5b30:	05 c0       	rjmp	.+10     	; 0x5b3c <dtoa_prf+0x54>
    5b32:	9d e2       	ldi	r25, 0x2D	; 45
    5b34:	03 c0       	rjmp	.+6      	; 0x5b3c <dtoa_prf+0x54>
    5b36:	9b e2       	ldi	r25, 0x2B	; 43
    5b38:	01 c0       	rjmp	.+2      	; 0x5b3c <dtoa_prf+0x54>
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	5e 2d       	mov	r21, r14
    5b3e:	50 71       	andi	r21, 0x10	; 16
    5b40:	43 ff       	sbrs	r20, 3
    5b42:	3c c0       	rjmp	.+120    	; 0x5bbc <dtoa_prf+0xd4>
    5b44:	91 11       	cpse	r25, r1
    5b46:	02 c0       	rjmp	.+4      	; 0x5b4c <dtoa_prf+0x64>
    5b48:	83 e0       	ldi	r24, 0x03	; 3
    5b4a:	01 c0       	rjmp	.+2      	; 0x5b4e <dtoa_prf+0x66>
    5b4c:	84 e0       	ldi	r24, 0x04	; 4
    5b4e:	81 17       	cp	r24, r17
    5b50:	18 f4       	brcc	.+6      	; 0x5b58 <dtoa_prf+0x70>
    5b52:	21 2f       	mov	r18, r17
    5b54:	28 1b       	sub	r18, r24
    5b56:	01 c0       	rjmp	.+2      	; 0x5b5a <dtoa_prf+0x72>
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	51 11       	cpse	r21, r1
    5b5c:	0b c0       	rjmp	.+22     	; 0x5b74 <dtoa_prf+0x8c>
    5b5e:	f6 01       	movw	r30, r12
    5b60:	82 2f       	mov	r24, r18
    5b62:	30 e2       	ldi	r19, 0x20	; 32
    5b64:	88 23       	and	r24, r24
    5b66:	19 f0       	breq	.+6      	; 0x5b6e <dtoa_prf+0x86>
    5b68:	31 93       	st	Z+, r19
    5b6a:	81 50       	subi	r24, 0x01	; 1
    5b6c:	fb cf       	rjmp	.-10     	; 0x5b64 <dtoa_prf+0x7c>
    5b6e:	c2 0e       	add	r12, r18
    5b70:	d1 1c       	adc	r13, r1
    5b72:	20 e0       	ldi	r18, 0x00	; 0
    5b74:	99 23       	and	r25, r25
    5b76:	29 f0       	breq	.+10     	; 0x5b82 <dtoa_prf+0x9a>
    5b78:	d6 01       	movw	r26, r12
    5b7a:	9c 93       	st	X, r25
    5b7c:	f6 01       	movw	r30, r12
    5b7e:	31 96       	adiw	r30, 0x01	; 1
    5b80:	6f 01       	movw	r12, r30
    5b82:	c6 01       	movw	r24, r12
    5b84:	03 96       	adiw	r24, 0x03	; 3
    5b86:	e2 fe       	sbrs	r14, 2
    5b88:	0a c0       	rjmp	.+20     	; 0x5b9e <dtoa_prf+0xb6>
    5b8a:	3e e4       	ldi	r19, 0x4E	; 78
    5b8c:	d6 01       	movw	r26, r12
    5b8e:	3c 93       	st	X, r19
    5b90:	41 e4       	ldi	r20, 0x41	; 65
    5b92:	11 96       	adiw	r26, 0x01	; 1
    5b94:	4c 93       	st	X, r20
    5b96:	11 97       	sbiw	r26, 0x01	; 1
    5b98:	12 96       	adiw	r26, 0x02	; 2
    5b9a:	3c 93       	st	X, r19
    5b9c:	06 c0       	rjmp	.+12     	; 0x5baa <dtoa_prf+0xc2>
    5b9e:	3e e6       	ldi	r19, 0x6E	; 110
    5ba0:	f6 01       	movw	r30, r12
    5ba2:	30 83       	st	Z, r19
    5ba4:	41 e6       	ldi	r20, 0x61	; 97
    5ba6:	41 83       	std	Z+1, r20	; 0x01
    5ba8:	32 83       	std	Z+2, r19	; 0x02
    5baa:	fc 01       	movw	r30, r24
    5bac:	32 2f       	mov	r19, r18
    5bae:	40 e2       	ldi	r20, 0x20	; 32
    5bb0:	33 23       	and	r19, r19
    5bb2:	09 f4       	brne	.+2      	; 0x5bb6 <dtoa_prf+0xce>
    5bb4:	42 c0       	rjmp	.+132    	; 0x5c3a <dtoa_prf+0x152>
    5bb6:	41 93       	st	Z+, r20
    5bb8:	31 50       	subi	r19, 0x01	; 1
    5bba:	fa cf       	rjmp	.-12     	; 0x5bb0 <dtoa_prf+0xc8>
    5bbc:	42 ff       	sbrs	r20, 2
    5bbe:	44 c0       	rjmp	.+136    	; 0x5c48 <dtoa_prf+0x160>
    5bc0:	91 11       	cpse	r25, r1
    5bc2:	02 c0       	rjmp	.+4      	; 0x5bc8 <dtoa_prf+0xe0>
    5bc4:	83 e0       	ldi	r24, 0x03	; 3
    5bc6:	01 c0       	rjmp	.+2      	; 0x5bca <dtoa_prf+0xe2>
    5bc8:	84 e0       	ldi	r24, 0x04	; 4
    5bca:	81 17       	cp	r24, r17
    5bcc:	18 f4       	brcc	.+6      	; 0x5bd4 <dtoa_prf+0xec>
    5bce:	21 2f       	mov	r18, r17
    5bd0:	28 1b       	sub	r18, r24
    5bd2:	01 c0       	rjmp	.+2      	; 0x5bd6 <dtoa_prf+0xee>
    5bd4:	20 e0       	ldi	r18, 0x00	; 0
    5bd6:	51 11       	cpse	r21, r1
    5bd8:	0b c0       	rjmp	.+22     	; 0x5bf0 <dtoa_prf+0x108>
    5bda:	f6 01       	movw	r30, r12
    5bdc:	82 2f       	mov	r24, r18
    5bde:	30 e2       	ldi	r19, 0x20	; 32
    5be0:	88 23       	and	r24, r24
    5be2:	19 f0       	breq	.+6      	; 0x5bea <dtoa_prf+0x102>
    5be4:	31 93       	st	Z+, r19
    5be6:	81 50       	subi	r24, 0x01	; 1
    5be8:	fb cf       	rjmp	.-10     	; 0x5be0 <dtoa_prf+0xf8>
    5bea:	c2 0e       	add	r12, r18
    5bec:	d1 1c       	adc	r13, r1
    5bee:	20 e0       	ldi	r18, 0x00	; 0
    5bf0:	99 23       	and	r25, r25
    5bf2:	29 f0       	breq	.+10     	; 0x5bfe <dtoa_prf+0x116>
    5bf4:	d6 01       	movw	r26, r12
    5bf6:	9c 93       	st	X, r25
    5bf8:	f6 01       	movw	r30, r12
    5bfa:	31 96       	adiw	r30, 0x01	; 1
    5bfc:	6f 01       	movw	r12, r30
    5bfe:	c6 01       	movw	r24, r12
    5c00:	03 96       	adiw	r24, 0x03	; 3
    5c02:	e2 fe       	sbrs	r14, 2
    5c04:	0b c0       	rjmp	.+22     	; 0x5c1c <dtoa_prf+0x134>
    5c06:	39 e4       	ldi	r19, 0x49	; 73
    5c08:	d6 01       	movw	r26, r12
    5c0a:	3c 93       	st	X, r19
    5c0c:	3e e4       	ldi	r19, 0x4E	; 78
    5c0e:	11 96       	adiw	r26, 0x01	; 1
    5c10:	3c 93       	st	X, r19
    5c12:	11 97       	sbiw	r26, 0x01	; 1
    5c14:	36 e4       	ldi	r19, 0x46	; 70
    5c16:	12 96       	adiw	r26, 0x02	; 2
    5c18:	3c 93       	st	X, r19
    5c1a:	07 c0       	rjmp	.+14     	; 0x5c2a <dtoa_prf+0x142>
    5c1c:	39 e6       	ldi	r19, 0x69	; 105
    5c1e:	f6 01       	movw	r30, r12
    5c20:	30 83       	st	Z, r19
    5c22:	3e e6       	ldi	r19, 0x6E	; 110
    5c24:	31 83       	std	Z+1, r19	; 0x01
    5c26:	36 e6       	ldi	r19, 0x66	; 102
    5c28:	32 83       	std	Z+2, r19	; 0x02
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	32 2f       	mov	r19, r18
    5c2e:	40 e2       	ldi	r20, 0x20	; 32
    5c30:	33 23       	and	r19, r19
    5c32:	19 f0       	breq	.+6      	; 0x5c3a <dtoa_prf+0x152>
    5c34:	41 93       	st	Z+, r20
    5c36:	31 50       	subi	r19, 0x01	; 1
    5c38:	fb cf       	rjmp	.-10     	; 0x5c30 <dtoa_prf+0x148>
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	e2 0f       	add	r30, r18
    5c3e:	f1 1d       	adc	r31, r1
    5c40:	10 82       	st	Z, r1
    5c42:	8e ef       	ldi	r24, 0xFE	; 254
    5c44:	9f ef       	ldi	r25, 0xFF	; 255
    5c46:	a6 c0       	rjmp	.+332    	; 0x5d94 <dtoa_prf+0x2ac>
    5c48:	21 e0       	ldi	r18, 0x01	; 1
    5c4a:	30 e0       	ldi	r19, 0x00	; 0
    5c4c:	91 11       	cpse	r25, r1
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <dtoa_prf+0x16c>
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	16 16       	cp	r1, r22
    5c56:	17 06       	cpc	r1, r23
    5c58:	1c f4       	brge	.+6      	; 0x5c60 <dtoa_prf+0x178>
    5c5a:	fb 01       	movw	r30, r22
    5c5c:	31 96       	adiw	r30, 0x01	; 1
    5c5e:	02 c0       	rjmp	.+4      	; 0x5c64 <dtoa_prf+0x17c>
    5c60:	e1 e0       	ldi	r30, 0x01	; 1
    5c62:	f0 e0       	ldi	r31, 0x00	; 0
    5c64:	2e 0f       	add	r18, r30
    5c66:	3f 1f       	adc	r19, r31
    5c68:	bb 20       	and	r11, r11
    5c6a:	21 f0       	breq	.+8      	; 0x5c74 <dtoa_prf+0x18c>
    5c6c:	eb 2d       	mov	r30, r11
    5c6e:	f0 e0       	ldi	r31, 0x00	; 0
    5c70:	31 96       	adiw	r30, 0x01	; 1
    5c72:	02 c0       	rjmp	.+4      	; 0x5c78 <dtoa_prf+0x190>
    5c74:	e0 e0       	ldi	r30, 0x00	; 0
    5c76:	f0 e0       	ldi	r31, 0x00	; 0
    5c78:	2e 0f       	add	r18, r30
    5c7a:	3f 1f       	adc	r19, r31
    5c7c:	e1 2f       	mov	r30, r17
    5c7e:	f0 e0       	ldi	r31, 0x00	; 0
    5c80:	2e 17       	cp	r18, r30
    5c82:	3f 07       	cpc	r19, r31
    5c84:	1c f4       	brge	.+6      	; 0x5c8c <dtoa_prf+0x1a4>
    5c86:	12 1b       	sub	r17, r18
    5c88:	21 2f       	mov	r18, r17
    5c8a:	01 c0       	rjmp	.+2      	; 0x5c8e <dtoa_prf+0x1a6>
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	8e 2d       	mov	r24, r14
    5c90:	88 71       	andi	r24, 0x18	; 24
    5c92:	59 f4       	brne	.+22     	; 0x5caa <dtoa_prf+0x1c2>
    5c94:	f6 01       	movw	r30, r12
    5c96:	82 2f       	mov	r24, r18
    5c98:	30 e2       	ldi	r19, 0x20	; 32
    5c9a:	88 23       	and	r24, r24
    5c9c:	19 f0       	breq	.+6      	; 0x5ca4 <dtoa_prf+0x1bc>
    5c9e:	31 93       	st	Z+, r19
    5ca0:	81 50       	subi	r24, 0x01	; 1
    5ca2:	fb cf       	rjmp	.-10     	; 0x5c9a <dtoa_prf+0x1b2>
    5ca4:	c2 0e       	add	r12, r18
    5ca6:	d1 1c       	adc	r13, r1
    5ca8:	20 e0       	ldi	r18, 0x00	; 0
    5caa:	99 23       	and	r25, r25
    5cac:	29 f0       	breq	.+10     	; 0x5cb8 <dtoa_prf+0x1d0>
    5cae:	d6 01       	movw	r26, r12
    5cb0:	9c 93       	st	X, r25
    5cb2:	f6 01       	movw	r30, r12
    5cb4:	31 96       	adiw	r30, 0x01	; 1
    5cb6:	6f 01       	movw	r12, r30
    5cb8:	51 11       	cpse	r21, r1
    5cba:	0b c0       	rjmp	.+22     	; 0x5cd2 <dtoa_prf+0x1ea>
    5cbc:	f6 01       	movw	r30, r12
    5cbe:	82 2f       	mov	r24, r18
    5cc0:	90 e3       	ldi	r25, 0x30	; 48
    5cc2:	88 23       	and	r24, r24
    5cc4:	19 f0       	breq	.+6      	; 0x5ccc <dtoa_prf+0x1e4>
    5cc6:	91 93       	st	Z+, r25
    5cc8:	81 50       	subi	r24, 0x01	; 1
    5cca:	fb cf       	rjmp	.-10     	; 0x5cc2 <dtoa_prf+0x1da>
    5ccc:	c2 0e       	add	r12, r18
    5cce:	d1 1c       	adc	r13, r1
    5cd0:	20 e0       	ldi	r18, 0x00	; 0
    5cd2:	0f 2d       	mov	r16, r15
    5cd4:	06 0f       	add	r16, r22
    5cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd8:	34 2f       	mov	r19, r20
    5cda:	30 71       	andi	r19, 0x10	; 16
    5cdc:	44 ff       	sbrs	r20, 4
    5cde:	03 c0       	rjmp	.+6      	; 0x5ce6 <dtoa_prf+0x1fe>
    5ce0:	91 33       	cpi	r25, 0x31	; 49
    5ce2:	09 f4       	brne	.+2      	; 0x5ce6 <dtoa_prf+0x1fe>
    5ce4:	01 50       	subi	r16, 0x01	; 1
    5ce6:	10 16       	cp	r1, r16
    5ce8:	24 f4       	brge	.+8      	; 0x5cf2 <dtoa_prf+0x20a>
    5cea:	09 30       	cpi	r16, 0x09	; 9
    5cec:	18 f0       	brcs	.+6      	; 0x5cf4 <dtoa_prf+0x20c>
    5cee:	08 e0       	ldi	r16, 0x08	; 8
    5cf0:	01 c0       	rjmp	.+2      	; 0x5cf4 <dtoa_prf+0x20c>
    5cf2:	01 e0       	ldi	r16, 0x01	; 1
    5cf4:	ab 01       	movw	r20, r22
    5cf6:	77 ff       	sbrs	r23, 7
    5cf8:	02 c0       	rjmp	.+4      	; 0x5cfe <dtoa_prf+0x216>
    5cfa:	40 e0       	ldi	r20, 0x00	; 0
    5cfc:	50 e0       	ldi	r21, 0x00	; 0
    5cfe:	fb 01       	movw	r30, r22
    5d00:	e4 1b       	sub	r30, r20
    5d02:	f5 0b       	sbc	r31, r21
    5d04:	a1 e0       	ldi	r26, 0x01	; 1
    5d06:	b0 e0       	ldi	r27, 0x00	; 0
    5d08:	ac 0f       	add	r26, r28
    5d0a:	bd 1f       	adc	r27, r29
    5d0c:	ea 0f       	add	r30, r26
    5d0e:	fb 1f       	adc	r31, r27
    5d10:	8e e2       	ldi	r24, 0x2E	; 46
    5d12:	a8 2e       	mov	r10, r24
    5d14:	4b 01       	movw	r8, r22
    5d16:	80 1a       	sub	r8, r16
    5d18:	91 08       	sbc	r9, r1
    5d1a:	0b 2d       	mov	r16, r11
    5d1c:	10 e0       	ldi	r17, 0x00	; 0
    5d1e:	11 95       	neg	r17
    5d20:	01 95       	neg	r16
    5d22:	11 09       	sbc	r17, r1
    5d24:	4f 3f       	cpi	r20, 0xFF	; 255
    5d26:	bf ef       	ldi	r27, 0xFF	; 255
    5d28:	5b 07       	cpc	r21, r27
    5d2a:	21 f4       	brne	.+8      	; 0x5d34 <dtoa_prf+0x24c>
    5d2c:	d6 01       	movw	r26, r12
    5d2e:	ac 92       	st	X, r10
    5d30:	11 96       	adiw	r26, 0x01	; 1
    5d32:	6d 01       	movw	r12, r26
    5d34:	64 17       	cp	r22, r20
    5d36:	75 07       	cpc	r23, r21
    5d38:	2c f0       	brlt	.+10     	; 0x5d44 <dtoa_prf+0x25c>
    5d3a:	84 16       	cp	r8, r20
    5d3c:	95 06       	cpc	r9, r21
    5d3e:	14 f4       	brge	.+4      	; 0x5d44 <dtoa_prf+0x25c>
    5d40:	81 81       	ldd	r24, Z+1	; 0x01
    5d42:	01 c0       	rjmp	.+2      	; 0x5d46 <dtoa_prf+0x25e>
    5d44:	80 e3       	ldi	r24, 0x30	; 48
    5d46:	41 50       	subi	r20, 0x01	; 1
    5d48:	51 09       	sbc	r21, r1
    5d4a:	31 96       	adiw	r30, 0x01	; 1
    5d4c:	d6 01       	movw	r26, r12
    5d4e:	11 96       	adiw	r26, 0x01	; 1
    5d50:	7d 01       	movw	r14, r26
    5d52:	40 17       	cp	r20, r16
    5d54:	51 07       	cpc	r21, r17
    5d56:	24 f0       	brlt	.+8      	; 0x5d60 <dtoa_prf+0x278>
    5d58:	d6 01       	movw	r26, r12
    5d5a:	8c 93       	st	X, r24
    5d5c:	67 01       	movw	r12, r14
    5d5e:	e2 cf       	rjmp	.-60     	; 0x5d24 <dtoa_prf+0x23c>
    5d60:	64 17       	cp	r22, r20
    5d62:	75 07       	cpc	r23, r21
    5d64:	39 f4       	brne	.+14     	; 0x5d74 <dtoa_prf+0x28c>
    5d66:	96 33       	cpi	r25, 0x36	; 54
    5d68:	20 f4       	brcc	.+8      	; 0x5d72 <dtoa_prf+0x28a>
    5d6a:	95 33       	cpi	r25, 0x35	; 53
    5d6c:	19 f4       	brne	.+6      	; 0x5d74 <dtoa_prf+0x28c>
    5d6e:	31 11       	cpse	r19, r1
    5d70:	01 c0       	rjmp	.+2      	; 0x5d74 <dtoa_prf+0x28c>
    5d72:	81 e3       	ldi	r24, 0x31	; 49
    5d74:	f6 01       	movw	r30, r12
    5d76:	80 83       	st	Z, r24
    5d78:	f7 01       	movw	r30, r14
    5d7a:	82 2f       	mov	r24, r18
    5d7c:	90 e2       	ldi	r25, 0x20	; 32
    5d7e:	88 23       	and	r24, r24
    5d80:	19 f0       	breq	.+6      	; 0x5d88 <dtoa_prf+0x2a0>
    5d82:	91 93       	st	Z+, r25
    5d84:	81 50       	subi	r24, 0x01	; 1
    5d86:	fb cf       	rjmp	.-10     	; 0x5d7e <dtoa_prf+0x296>
    5d88:	f7 01       	movw	r30, r14
    5d8a:	e2 0f       	add	r30, r18
    5d8c:	f1 1d       	adc	r31, r1
    5d8e:	10 82       	st	Z, r1
    5d90:	80 e0       	ldi	r24, 0x00	; 0
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	29 96       	adiw	r28, 0x09	; 9
    5d96:	ec e0       	ldi	r30, 0x0C	; 12
    5d98:	0c 94 78 30 	jmp	0x60f0	; 0x60f0 <__epilogue_restores__+0xc>

00005d9c <__ftoa_engine>:
    5d9c:	28 30       	cpi	r18, 0x08	; 8
    5d9e:	08 f0       	brcs	.+2      	; 0x5da2 <__ftoa_engine+0x6>
    5da0:	27 e0       	ldi	r18, 0x07	; 7
    5da2:	33 27       	eor	r19, r19
    5da4:	da 01       	movw	r26, r20
    5da6:	99 0f       	add	r25, r25
    5da8:	31 1d       	adc	r19, r1
    5daa:	87 fd       	sbrc	r24, 7
    5dac:	91 60       	ori	r25, 0x01	; 1
    5dae:	00 96       	adiw	r24, 0x00	; 0
    5db0:	61 05       	cpc	r22, r1
    5db2:	71 05       	cpc	r23, r1
    5db4:	39 f4       	brne	.+14     	; 0x5dc4 <__ftoa_engine+0x28>
    5db6:	32 60       	ori	r19, 0x02	; 2
    5db8:	2e 5f       	subi	r18, 0xFE	; 254
    5dba:	3d 93       	st	X+, r19
    5dbc:	30 e3       	ldi	r19, 0x30	; 48
    5dbe:	2a 95       	dec	r18
    5dc0:	e1 f7       	brne	.-8      	; 0x5dba <__ftoa_engine+0x1e>
    5dc2:	08 95       	ret
    5dc4:	9f 3f       	cpi	r25, 0xFF	; 255
    5dc6:	30 f0       	brcs	.+12     	; 0x5dd4 <__ftoa_engine+0x38>
    5dc8:	80 38       	cpi	r24, 0x80	; 128
    5dca:	71 05       	cpc	r23, r1
    5dcc:	61 05       	cpc	r22, r1
    5dce:	09 f0       	breq	.+2      	; 0x5dd2 <__ftoa_engine+0x36>
    5dd0:	3c 5f       	subi	r19, 0xFC	; 252
    5dd2:	3c 5f       	subi	r19, 0xFC	; 252
    5dd4:	3d 93       	st	X+, r19
    5dd6:	91 30       	cpi	r25, 0x01	; 1
    5dd8:	08 f0       	brcs	.+2      	; 0x5ddc <__ftoa_engine+0x40>
    5dda:	80 68       	ori	r24, 0x80	; 128
    5ddc:	91 1d       	adc	r25, r1
    5dde:	df 93       	push	r29
    5de0:	cf 93       	push	r28
    5de2:	1f 93       	push	r17
    5de4:	0f 93       	push	r16
    5de6:	ff 92       	push	r15
    5de8:	ef 92       	push	r14
    5dea:	19 2f       	mov	r17, r25
    5dec:	98 7f       	andi	r25, 0xF8	; 248
    5dee:	96 95       	lsr	r25
    5df0:	e9 2f       	mov	r30, r25
    5df2:	96 95       	lsr	r25
    5df4:	96 95       	lsr	r25
    5df6:	e9 0f       	add	r30, r25
    5df8:	ff 27       	eor	r31, r31
    5dfa:	e2 51       	subi	r30, 0x12	; 18
    5dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfe:	99 27       	eor	r25, r25
    5e00:	33 27       	eor	r19, r19
    5e02:	ee 24       	eor	r14, r14
    5e04:	ff 24       	eor	r15, r15
    5e06:	a7 01       	movw	r20, r14
    5e08:	e7 01       	movw	r28, r14
    5e0a:	05 90       	lpm	r0, Z+
    5e0c:	08 94       	sec
    5e0e:	07 94       	ror	r0
    5e10:	28 f4       	brcc	.+10     	; 0x5e1c <__ftoa_engine+0x80>
    5e12:	36 0f       	add	r19, r22
    5e14:	e7 1e       	adc	r14, r23
    5e16:	f8 1e       	adc	r15, r24
    5e18:	49 1f       	adc	r20, r25
    5e1a:	51 1d       	adc	r21, r1
    5e1c:	66 0f       	add	r22, r22
    5e1e:	77 1f       	adc	r23, r23
    5e20:	88 1f       	adc	r24, r24
    5e22:	99 1f       	adc	r25, r25
    5e24:	06 94       	lsr	r0
    5e26:	a1 f7       	brne	.-24     	; 0x5e10 <__ftoa_engine+0x74>
    5e28:	05 90       	lpm	r0, Z+
    5e2a:	07 94       	ror	r0
    5e2c:	28 f4       	brcc	.+10     	; 0x5e38 <__ftoa_engine+0x9c>
    5e2e:	e7 0e       	add	r14, r23
    5e30:	f8 1e       	adc	r15, r24
    5e32:	49 1f       	adc	r20, r25
    5e34:	56 1f       	adc	r21, r22
    5e36:	c1 1d       	adc	r28, r1
    5e38:	77 0f       	add	r23, r23
    5e3a:	88 1f       	adc	r24, r24
    5e3c:	99 1f       	adc	r25, r25
    5e3e:	66 1f       	adc	r22, r22
    5e40:	06 94       	lsr	r0
    5e42:	a1 f7       	brne	.-24     	; 0x5e2c <__ftoa_engine+0x90>
    5e44:	05 90       	lpm	r0, Z+
    5e46:	07 94       	ror	r0
    5e48:	28 f4       	brcc	.+10     	; 0x5e54 <__ftoa_engine+0xb8>
    5e4a:	f8 0e       	add	r15, r24
    5e4c:	49 1f       	adc	r20, r25
    5e4e:	56 1f       	adc	r21, r22
    5e50:	c7 1f       	adc	r28, r23
    5e52:	d1 1d       	adc	r29, r1
    5e54:	88 0f       	add	r24, r24
    5e56:	99 1f       	adc	r25, r25
    5e58:	66 1f       	adc	r22, r22
    5e5a:	77 1f       	adc	r23, r23
    5e5c:	06 94       	lsr	r0
    5e5e:	a1 f7       	brne	.-24     	; 0x5e48 <__ftoa_engine+0xac>
    5e60:	05 90       	lpm	r0, Z+
    5e62:	07 94       	ror	r0
    5e64:	20 f4       	brcc	.+8      	; 0x5e6e <__ftoa_engine+0xd2>
    5e66:	49 0f       	add	r20, r25
    5e68:	56 1f       	adc	r21, r22
    5e6a:	c7 1f       	adc	r28, r23
    5e6c:	d8 1f       	adc	r29, r24
    5e6e:	99 0f       	add	r25, r25
    5e70:	66 1f       	adc	r22, r22
    5e72:	77 1f       	adc	r23, r23
    5e74:	88 1f       	adc	r24, r24
    5e76:	06 94       	lsr	r0
    5e78:	a9 f7       	brne	.-22     	; 0x5e64 <__ftoa_engine+0xc8>
    5e7a:	84 91       	lpm	r24, Z
    5e7c:	10 95       	com	r17
    5e7e:	17 70       	andi	r17, 0x07	; 7
    5e80:	41 f0       	breq	.+16     	; 0x5e92 <__ftoa_engine+0xf6>
    5e82:	d6 95       	lsr	r29
    5e84:	c7 95       	ror	r28
    5e86:	57 95       	ror	r21
    5e88:	47 95       	ror	r20
    5e8a:	f7 94       	ror	r15
    5e8c:	e7 94       	ror	r14
    5e8e:	1a 95       	dec	r17
    5e90:	c1 f7       	brne	.-16     	; 0x5e82 <__ftoa_engine+0xe6>
    5e92:	e4 e9       	ldi	r30, 0x94	; 148
    5e94:	f0 e0       	ldi	r31, 0x00	; 0
    5e96:	68 94       	set
    5e98:	15 90       	lpm	r1, Z+
    5e9a:	15 91       	lpm	r17, Z+
    5e9c:	35 91       	lpm	r19, Z+
    5e9e:	65 91       	lpm	r22, Z+
    5ea0:	95 91       	lpm	r25, Z+
    5ea2:	05 90       	lpm	r0, Z+
    5ea4:	7f e2       	ldi	r23, 0x2F	; 47
    5ea6:	73 95       	inc	r23
    5ea8:	e1 18       	sub	r14, r1
    5eaa:	f1 0a       	sbc	r15, r17
    5eac:	43 0b       	sbc	r20, r19
    5eae:	56 0b       	sbc	r21, r22
    5eb0:	c9 0b       	sbc	r28, r25
    5eb2:	d0 09       	sbc	r29, r0
    5eb4:	c0 f7       	brcc	.-16     	; 0x5ea6 <__ftoa_engine+0x10a>
    5eb6:	e1 0c       	add	r14, r1
    5eb8:	f1 1e       	adc	r15, r17
    5eba:	43 1f       	adc	r20, r19
    5ebc:	56 1f       	adc	r21, r22
    5ebe:	c9 1f       	adc	r28, r25
    5ec0:	d0 1d       	adc	r29, r0
    5ec2:	7e f4       	brtc	.+30     	; 0x5ee2 <__ftoa_engine+0x146>
    5ec4:	70 33       	cpi	r23, 0x30	; 48
    5ec6:	11 f4       	brne	.+4      	; 0x5ecc <__ftoa_engine+0x130>
    5ec8:	8a 95       	dec	r24
    5eca:	e6 cf       	rjmp	.-52     	; 0x5e98 <__ftoa_engine+0xfc>
    5ecc:	e8 94       	clt
    5ece:	01 50       	subi	r16, 0x01	; 1
    5ed0:	30 f0       	brcs	.+12     	; 0x5ede <__ftoa_engine+0x142>
    5ed2:	08 0f       	add	r16, r24
    5ed4:	0a f4       	brpl	.+2      	; 0x5ed8 <__ftoa_engine+0x13c>
    5ed6:	00 27       	eor	r16, r16
    5ed8:	02 17       	cp	r16, r18
    5eda:	08 f4       	brcc	.+2      	; 0x5ede <__ftoa_engine+0x142>
    5edc:	20 2f       	mov	r18, r16
    5ede:	23 95       	inc	r18
    5ee0:	02 2f       	mov	r16, r18
    5ee2:	7a 33       	cpi	r23, 0x3A	; 58
    5ee4:	28 f0       	brcs	.+10     	; 0x5ef0 <__ftoa_engine+0x154>
    5ee6:	79 e3       	ldi	r23, 0x39	; 57
    5ee8:	7d 93       	st	X+, r23
    5eea:	2a 95       	dec	r18
    5eec:	e9 f7       	brne	.-6      	; 0x5ee8 <__ftoa_engine+0x14c>
    5eee:	10 c0       	rjmp	.+32     	; 0x5f10 <__ftoa_engine+0x174>
    5ef0:	7d 93       	st	X+, r23
    5ef2:	2a 95       	dec	r18
    5ef4:	89 f6       	brne	.-94     	; 0x5e98 <__ftoa_engine+0xfc>
    5ef6:	06 94       	lsr	r0
    5ef8:	97 95       	ror	r25
    5efa:	67 95       	ror	r22
    5efc:	37 95       	ror	r19
    5efe:	17 95       	ror	r17
    5f00:	17 94       	ror	r1
    5f02:	e1 18       	sub	r14, r1
    5f04:	f1 0a       	sbc	r15, r17
    5f06:	43 0b       	sbc	r20, r19
    5f08:	56 0b       	sbc	r21, r22
    5f0a:	c9 0b       	sbc	r28, r25
    5f0c:	d0 09       	sbc	r29, r0
    5f0e:	98 f0       	brcs	.+38     	; 0x5f36 <__ftoa_engine+0x19a>
    5f10:	23 95       	inc	r18
    5f12:	7e 91       	ld	r23, -X
    5f14:	73 95       	inc	r23
    5f16:	7a 33       	cpi	r23, 0x3A	; 58
    5f18:	08 f0       	brcs	.+2      	; 0x5f1c <__ftoa_engine+0x180>
    5f1a:	70 e3       	ldi	r23, 0x30	; 48
    5f1c:	7c 93       	st	X, r23
    5f1e:	20 13       	cpse	r18, r16
    5f20:	b8 f7       	brcc	.-18     	; 0x5f10 <__ftoa_engine+0x174>
    5f22:	7e 91       	ld	r23, -X
    5f24:	70 61       	ori	r23, 0x10	; 16
    5f26:	7d 93       	st	X+, r23
    5f28:	30 f0       	brcs	.+12     	; 0x5f36 <__ftoa_engine+0x19a>
    5f2a:	83 95       	inc	r24
    5f2c:	71 e3       	ldi	r23, 0x31	; 49
    5f2e:	7d 93       	st	X+, r23
    5f30:	70 e3       	ldi	r23, 0x30	; 48
    5f32:	2a 95       	dec	r18
    5f34:	e1 f7       	brne	.-8      	; 0x5f2e <__ftoa_engine+0x192>
    5f36:	11 24       	eor	r1, r1
    5f38:	ef 90       	pop	r14
    5f3a:	ff 90       	pop	r15
    5f3c:	0f 91       	pop	r16
    5f3e:	1f 91       	pop	r17
    5f40:	cf 91       	pop	r28
    5f42:	df 91       	pop	r29
    5f44:	99 27       	eor	r25, r25
    5f46:	87 fd       	sbrc	r24, 7
    5f48:	90 95       	com	r25
    5f4a:	08 95       	ret

00005f4c <strnlen_P>:
    5f4c:	fc 01       	movw	r30, r24
    5f4e:	05 90       	lpm	r0, Z+
    5f50:	61 50       	subi	r22, 0x01	; 1
    5f52:	70 40       	sbci	r23, 0x00	; 0
    5f54:	01 10       	cpse	r0, r1
    5f56:	d8 f7       	brcc	.-10     	; 0x5f4e <strnlen_P+0x2>
    5f58:	80 95       	com	r24
    5f5a:	90 95       	com	r25
    5f5c:	8e 0f       	add	r24, r30
    5f5e:	9f 1f       	adc	r25, r31
    5f60:	08 95       	ret

00005f62 <strnlen>:
    5f62:	fc 01       	movw	r30, r24
    5f64:	61 50       	subi	r22, 0x01	; 1
    5f66:	70 40       	sbci	r23, 0x00	; 0
    5f68:	01 90       	ld	r0, Z+
    5f6a:	01 10       	cpse	r0, r1
    5f6c:	d8 f7       	brcc	.-10     	; 0x5f64 <strnlen+0x2>
    5f6e:	80 95       	com	r24
    5f70:	90 95       	com	r25
    5f72:	8e 0f       	add	r24, r30
    5f74:	9f 1f       	adc	r25, r31
    5f76:	08 95       	ret

00005f78 <fputc>:
    5f78:	0f 93       	push	r16
    5f7a:	1f 93       	push	r17
    5f7c:	cf 93       	push	r28
    5f7e:	df 93       	push	r29
    5f80:	fb 01       	movw	r30, r22
    5f82:	23 81       	ldd	r18, Z+3	; 0x03
    5f84:	21 fd       	sbrc	r18, 1
    5f86:	03 c0       	rjmp	.+6      	; 0x5f8e <fputc+0x16>
    5f88:	8f ef       	ldi	r24, 0xFF	; 255
    5f8a:	9f ef       	ldi	r25, 0xFF	; 255
    5f8c:	2c c0       	rjmp	.+88     	; 0x5fe6 <fputc+0x6e>
    5f8e:	22 ff       	sbrs	r18, 2
    5f90:	16 c0       	rjmp	.+44     	; 0x5fbe <fputc+0x46>
    5f92:	46 81       	ldd	r20, Z+6	; 0x06
    5f94:	57 81       	ldd	r21, Z+7	; 0x07
    5f96:	24 81       	ldd	r18, Z+4	; 0x04
    5f98:	35 81       	ldd	r19, Z+5	; 0x05
    5f9a:	42 17       	cp	r20, r18
    5f9c:	53 07       	cpc	r21, r19
    5f9e:	44 f4       	brge	.+16     	; 0x5fb0 <fputc+0x38>
    5fa0:	a0 81       	ld	r26, Z
    5fa2:	b1 81       	ldd	r27, Z+1	; 0x01
    5fa4:	9d 01       	movw	r18, r26
    5fa6:	2f 5f       	subi	r18, 0xFF	; 255
    5fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    5faa:	31 83       	std	Z+1, r19	; 0x01
    5fac:	20 83       	st	Z, r18
    5fae:	8c 93       	st	X, r24
    5fb0:	26 81       	ldd	r18, Z+6	; 0x06
    5fb2:	37 81       	ldd	r19, Z+7	; 0x07
    5fb4:	2f 5f       	subi	r18, 0xFF	; 255
    5fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fb8:	37 83       	std	Z+7, r19	; 0x07
    5fba:	26 83       	std	Z+6, r18	; 0x06
    5fbc:	14 c0       	rjmp	.+40     	; 0x5fe6 <fputc+0x6e>
    5fbe:	8b 01       	movw	r16, r22
    5fc0:	ec 01       	movw	r28, r24
    5fc2:	fb 01       	movw	r30, r22
    5fc4:	00 84       	ldd	r0, Z+8	; 0x08
    5fc6:	f1 85       	ldd	r31, Z+9	; 0x09
    5fc8:	e0 2d       	mov	r30, r0
    5fca:	09 95       	icall
    5fcc:	89 2b       	or	r24, r25
    5fce:	e1 f6       	brne	.-72     	; 0x5f88 <fputc+0x10>
    5fd0:	d8 01       	movw	r26, r16
    5fd2:	16 96       	adiw	r26, 0x06	; 6
    5fd4:	8d 91       	ld	r24, X+
    5fd6:	9c 91       	ld	r25, X
    5fd8:	17 97       	sbiw	r26, 0x07	; 7
    5fda:	01 96       	adiw	r24, 0x01	; 1
    5fdc:	17 96       	adiw	r26, 0x07	; 7
    5fde:	9c 93       	st	X, r25
    5fe0:	8e 93       	st	-X, r24
    5fe2:	16 97       	sbiw	r26, 0x06	; 6
    5fe4:	ce 01       	movw	r24, r28
    5fe6:	df 91       	pop	r29
    5fe8:	cf 91       	pop	r28
    5fea:	1f 91       	pop	r17
    5fec:	0f 91       	pop	r16
    5fee:	08 95       	ret

00005ff0 <__ultoa_invert>:
    5ff0:	fa 01       	movw	r30, r20
    5ff2:	aa 27       	eor	r26, r26
    5ff4:	28 30       	cpi	r18, 0x08	; 8
    5ff6:	51 f1       	breq	.+84     	; 0x604c <__ultoa_invert+0x5c>
    5ff8:	20 31       	cpi	r18, 0x10	; 16
    5ffa:	81 f1       	breq	.+96     	; 0x605c <__ultoa_invert+0x6c>
    5ffc:	e8 94       	clt
    5ffe:	6f 93       	push	r22
    6000:	6e 7f       	andi	r22, 0xFE	; 254
    6002:	6e 5f       	subi	r22, 0xFE	; 254
    6004:	7f 4f       	sbci	r23, 0xFF	; 255
    6006:	8f 4f       	sbci	r24, 0xFF	; 255
    6008:	9f 4f       	sbci	r25, 0xFF	; 255
    600a:	af 4f       	sbci	r26, 0xFF	; 255
    600c:	b1 e0       	ldi	r27, 0x01	; 1
    600e:	3e d0       	rcall	.+124    	; 0x608c <__ultoa_invert+0x9c>
    6010:	b4 e0       	ldi	r27, 0x04	; 4
    6012:	3c d0       	rcall	.+120    	; 0x608c <__ultoa_invert+0x9c>
    6014:	67 0f       	add	r22, r23
    6016:	78 1f       	adc	r23, r24
    6018:	89 1f       	adc	r24, r25
    601a:	9a 1f       	adc	r25, r26
    601c:	a1 1d       	adc	r26, r1
    601e:	68 0f       	add	r22, r24
    6020:	79 1f       	adc	r23, r25
    6022:	8a 1f       	adc	r24, r26
    6024:	91 1d       	adc	r25, r1
    6026:	a1 1d       	adc	r26, r1
    6028:	6a 0f       	add	r22, r26
    602a:	71 1d       	adc	r23, r1
    602c:	81 1d       	adc	r24, r1
    602e:	91 1d       	adc	r25, r1
    6030:	a1 1d       	adc	r26, r1
    6032:	20 d0       	rcall	.+64     	; 0x6074 <__ultoa_invert+0x84>
    6034:	09 f4       	brne	.+2      	; 0x6038 <__ultoa_invert+0x48>
    6036:	68 94       	set
    6038:	3f 91       	pop	r19
    603a:	2a e0       	ldi	r18, 0x0A	; 10
    603c:	26 9f       	mul	r18, r22
    603e:	11 24       	eor	r1, r1
    6040:	30 19       	sub	r19, r0
    6042:	30 5d       	subi	r19, 0xD0	; 208
    6044:	31 93       	st	Z+, r19
    6046:	de f6       	brtc	.-74     	; 0x5ffe <__ultoa_invert+0xe>
    6048:	cf 01       	movw	r24, r30
    604a:	08 95       	ret
    604c:	46 2f       	mov	r20, r22
    604e:	47 70       	andi	r20, 0x07	; 7
    6050:	40 5d       	subi	r20, 0xD0	; 208
    6052:	41 93       	st	Z+, r20
    6054:	b3 e0       	ldi	r27, 0x03	; 3
    6056:	0f d0       	rcall	.+30     	; 0x6076 <__ultoa_invert+0x86>
    6058:	c9 f7       	brne	.-14     	; 0x604c <__ultoa_invert+0x5c>
    605a:	f6 cf       	rjmp	.-20     	; 0x6048 <__ultoa_invert+0x58>
    605c:	46 2f       	mov	r20, r22
    605e:	4f 70       	andi	r20, 0x0F	; 15
    6060:	40 5d       	subi	r20, 0xD0	; 208
    6062:	4a 33       	cpi	r20, 0x3A	; 58
    6064:	18 f0       	brcs	.+6      	; 0x606c <__ultoa_invert+0x7c>
    6066:	49 5d       	subi	r20, 0xD9	; 217
    6068:	31 fd       	sbrc	r19, 1
    606a:	40 52       	subi	r20, 0x20	; 32
    606c:	41 93       	st	Z+, r20
    606e:	02 d0       	rcall	.+4      	; 0x6074 <__ultoa_invert+0x84>
    6070:	a9 f7       	brne	.-22     	; 0x605c <__ultoa_invert+0x6c>
    6072:	ea cf       	rjmp	.-44     	; 0x6048 <__ultoa_invert+0x58>
    6074:	b4 e0       	ldi	r27, 0x04	; 4
    6076:	a6 95       	lsr	r26
    6078:	97 95       	ror	r25
    607a:	87 95       	ror	r24
    607c:	77 95       	ror	r23
    607e:	67 95       	ror	r22
    6080:	ba 95       	dec	r27
    6082:	c9 f7       	brne	.-14     	; 0x6076 <__ultoa_invert+0x86>
    6084:	00 97       	sbiw	r24, 0x00	; 0
    6086:	61 05       	cpc	r22, r1
    6088:	71 05       	cpc	r23, r1
    608a:	08 95       	ret
    608c:	9b 01       	movw	r18, r22
    608e:	ac 01       	movw	r20, r24
    6090:	0a 2e       	mov	r0, r26
    6092:	06 94       	lsr	r0
    6094:	57 95       	ror	r21
    6096:	47 95       	ror	r20
    6098:	37 95       	ror	r19
    609a:	27 95       	ror	r18
    609c:	ba 95       	dec	r27
    609e:	c9 f7       	brne	.-14     	; 0x6092 <__ultoa_invert+0xa2>
    60a0:	62 0f       	add	r22, r18
    60a2:	73 1f       	adc	r23, r19
    60a4:	84 1f       	adc	r24, r20
    60a6:	95 1f       	adc	r25, r21
    60a8:	a0 1d       	adc	r26, r0
    60aa:	08 95       	ret

000060ac <__prologue_saves__>:
    60ac:	2f 92       	push	r2
    60ae:	3f 92       	push	r3
    60b0:	4f 92       	push	r4
    60b2:	5f 92       	push	r5
    60b4:	6f 92       	push	r6
    60b6:	7f 92       	push	r7
    60b8:	8f 92       	push	r8
    60ba:	9f 92       	push	r9
    60bc:	af 92       	push	r10
    60be:	bf 92       	push	r11
    60c0:	cf 92       	push	r12
    60c2:	df 92       	push	r13
    60c4:	ef 92       	push	r14
    60c6:	ff 92       	push	r15
    60c8:	0f 93       	push	r16
    60ca:	1f 93       	push	r17
    60cc:	cf 93       	push	r28
    60ce:	df 93       	push	r29
    60d0:	cd b7       	in	r28, 0x3d	; 61
    60d2:	de b7       	in	r29, 0x3e	; 62
    60d4:	ca 1b       	sub	r28, r26
    60d6:	db 0b       	sbc	r29, r27
    60d8:	0f b6       	in	r0, 0x3f	; 63
    60da:	f8 94       	cli
    60dc:	de bf       	out	0x3e, r29	; 62
    60de:	0f be       	out	0x3f, r0	; 63
    60e0:	cd bf       	out	0x3d, r28	; 61
    60e2:	09 94       	ijmp

000060e4 <__epilogue_restores__>:
    60e4:	2a 88       	ldd	r2, Y+18	; 0x12
    60e6:	39 88       	ldd	r3, Y+17	; 0x11
    60e8:	48 88       	ldd	r4, Y+16	; 0x10
    60ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    60ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    60ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    60f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    60f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    60f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    60f6:	b9 84       	ldd	r11, Y+9	; 0x09
    60f8:	c8 84       	ldd	r12, Y+8	; 0x08
    60fa:	df 80       	ldd	r13, Y+7	; 0x07
    60fc:	ee 80       	ldd	r14, Y+6	; 0x06
    60fe:	fd 80       	ldd	r15, Y+5	; 0x05
    6100:	0c 81       	ldd	r16, Y+4	; 0x04
    6102:	1b 81       	ldd	r17, Y+3	; 0x03
    6104:	aa 81       	ldd	r26, Y+2	; 0x02
    6106:	b9 81       	ldd	r27, Y+1	; 0x01
    6108:	ce 0f       	add	r28, r30
    610a:	d1 1d       	adc	r29, r1
    610c:	0f b6       	in	r0, 0x3f	; 63
    610e:	f8 94       	cli
    6110:	de bf       	out	0x3e, r29	; 62
    6112:	0f be       	out	0x3f, r0	; 63
    6114:	cd bf       	out	0x3d, r28	; 61
    6116:	ed 01       	movw	r28, r26
    6118:	08 95       	ret

0000611a <__do_global_dtors>:
    611a:	19 e0       	ldi	r17, 0x09	; 9
    611c:	c8 e3       	ldi	r28, 0x38	; 56
    611e:	d9 e0       	ldi	r29, 0x09	; 9
    6120:	04 c0       	rjmp	.+8      	; 0x612a <__do_global_dtors+0x10>
    6122:	fe 01       	movw	r30, r28
    6124:	0e 94 26 29 	call	0x524c	; 0x524c <__tablejump2__>
    6128:	21 96       	adiw	r28, 0x01	; 1
    612a:	c9 33       	cpi	r28, 0x39	; 57
    612c:	d1 07       	cpc	r29, r17
    612e:	c9 f7       	brne	.-14     	; 0x6122 <__do_global_dtors+0x8>
    6130:	f8 94       	cli

00006132 <__stop_program>:
    6132:	ff cf       	rjmp	.-2      	; 0x6132 <__stop_program>
